
Lab06_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d3c  08007d3c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d44  08007d44  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d48  08007d48  00017d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004830  20000060  08007dac  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004890  08007dac  00024890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001442b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb0  00000000  00000000  000344fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  000374b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8c  00000000  00000000  00038760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017995  00000000  00000000  000395ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001477d  00000000  00000000  00050f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972b4  00000000  00000000  000656fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000532c  00000000  00000000  000fc9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00101ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007be4 	.word	0x08007be4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007be4 	.word	0x08007be4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	200000d0 	.word	0x200000d0

080005c0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetTimerTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetTimerTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005de:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200002d0 	.word	0x200002d0
 80005f0:	20000324 	.word	0x20000324

080005f4 <send_mail>:

osSemaphoreId two_slots;
osSemaphoreDef(two_slots);


void send_mail(void const * args) {
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	while(1) {
		osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <send_mail+0x6c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f04f 31ff 	mov.w	r1, #4294967295
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fb35 	bl	8003c74 <osSemaphoreWait>

		osEvent evt = osMailGet(mail_box, osWaitForever);
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <send_mail+0x70>)
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	f04f 32ff 	mov.w	r2, #4294967295
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fd84 	bl	8004124 <osMailGet>
		if (evt.status == osEventMail) {
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b20      	cmp	r3, #32
 8000620:	d114      	bne.n	800064c <send_mail+0x58>
			mail_t *mail = (mail_t*)evt.value.p;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart2, mail->buffer, strlen(mail->buffer), 1000);
 8000626:	697c      	ldr	r4, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdd8 	bl	80001e0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	4621      	mov	r1, r4
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <send_mail+0x74>)
 800063c:	f002 fe22 	bl	8003284 <HAL_UART_Transmit>
			osMailFree(mail_box, mail);
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <send_mail+0x70>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6979      	ldr	r1, [r7, #20]
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fde0 	bl	800420c <osMailFree>
		}

		osSemaphoreRelease(myBinarySem01Handle);
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <send_mail+0x6c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fb5d 	bl	8003d10 <osSemaphoreRelease>
		osDelay(13);
 8000656:	200d      	movs	r0, #13
 8000658:	f003 fa4d 	bl	8003af6 <osDelay>
	while(1) {
 800065c:	e7ce      	b.n	80005fc <send_mail+0x8>
 800065e:	bf00      	nop
 8000660:	200008a4 	.word	0x200008a4
 8000664:	200008ac 	.word	0x200008ac
 8000668:	20000844 	.word	0x20000844

0800066c <UART_thingy1>:
	}
}

void UART_thingy1(void const *args) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	int threadID = 0; // threadID is 0 for one thread and 1 for another
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
	int idx = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
	char buffer[32];
	while(1) {
		osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <UART_thingy1+0x60>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	4618      	mov	r0, r3
 8000686:	f003 faf5 	bl	8003c74 <osSemaphoreWait>

		mail_t *mail = (mail_t*)osMailAlloc(mail_box, osWaitForever);
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <UART_thingy1+0x64>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f04f 31ff 	mov.w	r1, #4294967295
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fcf2 	bl	800407c <osMailAlloc>
 8000698:	62f8      	str	r0, [r7, #44]	; 0x2c
		sprintf(mail->buffer, "TID: %d %d\r\n", threadID, idx);
 800069a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800069e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <UART_thingy1+0x68>)
 80006a2:	f006 fdfb 	bl	800729c <siprintf>
		osMailPut(mail_box, mail);
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <UART_thingy1+0x64>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 fcfb 	bl	80040a8 <osMailPut>

		idx ++;
 80006b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b4:	3301      	adds	r3, #1
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
		//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
		osSemaphoreRelease(myBinarySem01Handle);
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <UART_thingy1+0x60>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fb27 	bl	8003d10 <osSemaphoreRelease>
		osDelay(12);
 80006c2:	200c      	movs	r0, #12
 80006c4:	f003 fa17 	bl	8003af6 <osDelay>
	while(1) {
 80006c8:	e7d8      	b.n	800067c <UART_thingy1+0x10>
 80006ca:	bf00      	nop
 80006cc:	200008a4 	.word	0x200008a4
 80006d0:	200008ac 	.word	0x200008ac
 80006d4:	08007bfc 	.word	0x08007bfc

080006d8 <UART_thingy2>:
	}

}

void UART_thingy2(void const *args) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	int threadID = 1; // threadID is 0 for one thread and 1 for another
 80006e0:	2301      	movs	r3, #1
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
	int idx = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
	char buffer[32];
	while(1) {
		osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <UART_thingy2+0x60>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fabf 	bl	8003c74 <osSemaphoreWait>

		mail_t *mail = (mail_t*)osMailAlloc(mail_box, osWaitForever);
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <UART_thingy2+0x64>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fcbc 	bl	800407c <osMailAlloc>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
		sprintf(mail->buffer, "TID: %d %d\r\n", threadID, idx);
 8000706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800070c:	490c      	ldr	r1, [pc, #48]	; (8000740 <UART_thingy2+0x68>)
 800070e:	f006 fdc5 	bl	800729c <siprintf>
		osMailPut(mail_box, mail);
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <UART_thingy2+0x64>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fcc5 	bl	80040a8 <osMailPut>
		idx ++;
 800071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000720:	3301      	adds	r3, #1
 8000722:	637b      	str	r3, [r7, #52]	; 0x34

		//HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
		osSemaphoreRelease(myBinarySem01Handle);
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <UART_thingy2+0x60>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f003 faf1 	bl	8003d10 <osSemaphoreRelease>
		osDelay(10);
 800072e:	200a      	movs	r0, #10
 8000730:	f003 f9e1 	bl	8003af6 <osDelay>
	while(1) {
 8000734:	e7d8      	b.n	80006e8 <UART_thingy2+0x10>
 8000736:	bf00      	nop
 8000738:	200008a4 	.word	0x200008a4
 800073c:	200008ac 	.word	0x200008ac
 8000740:	08007bfc 	.word	0x08007bfc

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b0ae      	sub	sp, #184	; 0xb8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fe9d 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f8f7 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 fb7f 	bl	8000e54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000756:	f000 fb53 	bl	8000e00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800075a:	f000 f9ef 	bl	8000b3c <MX_TIM2_Init>
  MX_TIM1_Init();
 800075e:	f000 f94d 	bl	80009fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000762:	f000 fa61 	bl	8000c28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000766:	f000 fad5 	bl	8000d14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  mail_box = osMailCreate(osMailQ(mail_box), NULL);
 800076a:	2100      	movs	r1, #0
 800076c:	4862      	ldr	r0, [pc, #392]	; (80008f8 <main+0x1b4>)
 800076e:	f003 fc2d 	bl	8003fcc <osMailCreate>
 8000772:	4603      	mov	r3, r0
 8000774:	4a61      	ldr	r2, [pc, #388]	; (80008fc <main+0x1b8>)
 8000776:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fa40 	bl	8003c10 <osSemaphoreCreate>
 8000790:	4603      	mov	r3, r0
 8000792:	4a5b      	ldr	r2, [pc, #364]	; (8000900 <main+0x1bc>)
 8000794:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8000796:	4b5b      	ldr	r3, [pc, #364]	; (8000904 <main+0x1c0>)
 8000798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80007a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 f9b8 	bl	8003b20 <osTimerCreate>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <main+0x1c4>)
 80007b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 80007b6:	4b55      	ldr	r3, [pc, #340]	; (800090c <main+0x1c8>)
 80007b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerPeriodic, NULL);
 80007c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 f9a8 	bl	8003b20 <osTimerCreate>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a4f      	ldr	r2, [pc, #316]	; (8000910 <main+0x1cc>)
 80007d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer03 */
  osTimerDef(myTimer03, Callback03);
 80007d6:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <main+0x1d0>)
 80007d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  myTimer03Handle = osTimerCreate(osTimer(myTimer03), osTimerPeriodic, NULL);
 80007e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 f998 	bl	8003b20 <osTimerCreate>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a49      	ldr	r2, [pc, #292]	; (8000918 <main+0x1d4>)
 80007f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer04 */
  osTimerDef(myTimer04, Callback04);
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <main+0x1d8>)
 80007f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  myTimer04Handle = osTimerCreate(osTimer(myTimer04), osTimerPeriodic, NULL);
 8000802:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f003 f988 	bl	8003b20 <osTimerCreate>
 8000810:	4603      	mov	r3, r0
 8000812:	4a43      	ldr	r2, [pc, #268]	; (8000920 <main+0x1dc>)
 8000814:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* definition and creation of myTimer01 */
  osTimerStart(myTimer01Handle, 50);
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <main+0x1c4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2132      	movs	r1, #50	; 0x32
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f9b3 	bl	8003b88 <osTimerStart>
  osTimerStart(myTimer02Handle, 18);
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <main+0x1cc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2112      	movs	r1, #18
 8000828:	4618      	mov	r0, r3
 800082a:	f003 f9ad 	bl	8003b88 <osTimerStart>
  osTimerStart(myTimer03Handle, 128);
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <main+0x1d4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	4618      	mov	r0, r3
 8000836:	f003 f9a7 	bl	8003b88 <osTimerStart>
  osTimerStart(myTimer04Handle, 64);
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <main+0x1dc>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	4618      	mov	r0, r3
 8000842:	f003 f9a1 	bl	8003b88 <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <main+0x1e0>)
 8000848:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800084c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000852:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f003 fb8f 	bl	8003f7c <osMessageCreate>
 800085e:	4603      	mov	r3, r0
 8000860:	4a31      	ldr	r2, [pc, #196]	; (8000928 <main+0x1e4>)
 8000862:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <main+0x1e8>)
 8000866:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800086a:	461d      	mov	r5, r3
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000878:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 f8ed 	bl	8003a5e <osThreadCreate>
 8000884:	4603      	mov	r3, r0
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <main+0x1ec>)
 8000888:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(defaultTask1, UART_thingy1, 0, 0, 128);
 800088a:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <main+0x1f0>)
 800088c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000890:	461d      	mov	r5, r3
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId defaultTaskHandle1 = osThreadCreate(osThread(defaultTask1), NULL);
 800089e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 f8da 	bl	8003a5e <osThreadCreate>
 80008aa:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  osThreadDef(defaultTask2, UART_thingy2, 0, 0, 128);
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <main+0x1f4>)
 80008b0:	f107 0420 	add.w	r4, r7, #32
 80008b4:	461d      	mov	r5, r3
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId defaultTaskHandle2 = osThreadCreate(osThread(defaultTask2), NULL);
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 f8c8 	bl	8003a5e <osThreadCreate>
 80008ce:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

  osThreadDef(defaultTask3, send_mail, 0, 0, 128);
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <main+0x1f8>)
 80008d4:	1d3c      	adds	r4, r7, #4
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadId defaultTaskHandle3 = osThreadCreate(osThread(defaultTask3), NULL);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f8b8 	bl	8003a5e <osThreadCreate>
 80008ee:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008f2:	f003 f8ad 	bl	8003a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <main+0x1b2>
 80008f8:	08007ce4 	.word	0x08007ce4
 80008fc:	200008ac 	.word	0x200008ac
 8000900:	200008a4 	.word	0x200008a4
 8000904:	08000f45 	.word	0x08000f45
 8000908:	20000894 	.word	0x20000894
 800090c:	08000f61 	.word	0x08000f61
 8000910:	20000898 	.word	0x20000898
 8000914:	08000f81 	.word	0x08000f81
 8000918:	2000089c 	.word	0x2000089c
 800091c:	08000fa1 	.word	0x08000fa1
 8000920:	200008a0 	.word	0x200008a0
 8000924:	08007c0c 	.word	0x08007c0c
 8000928:	20000890 	.word	0x20000890
 800092c:	08007c28 	.word	0x08007c28
 8000930:	2000088c 	.word	0x2000088c
 8000934:	08007c54 	.word	0x08007c54
 8000938:	08007c80 	.word	0x08007c80
 800093c:	08007cac 	.word	0x08007cac

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	; 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f006 fcc4 	bl	80072dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xb4>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <SystemClock_Config+0xb4>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <SystemClock_Config+0xb4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <SystemClock_Config+0xb8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <SystemClock_Config+0xb8>)
 800098a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <SystemClock_Config+0xb8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f8a6 	bl	8001b00 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009ba:	f000 fb01 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009c2:	2301      	movs	r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fb08 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009e6:	f000 faeb 	bl	8000fc0 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	; 0x58
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2220      	movs	r2, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f006 fc51 	bl	80072dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <MX_TIM1_Init+0x13c>)
 8000a3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000a40:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a42:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a4e:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a68:	4832      	ldr	r0, [pc, #200]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a6a:	f001 fce1 	bl	8002430 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 faa4 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a82:	4619      	mov	r1, r3
 8000a84:	482b      	ldr	r0, [pc, #172]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a86:	f001 ff2d 	bl	80028e4 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a90:	f000 fa96 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a94:	4827      	ldr	r0, [pc, #156]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000a96:	f001 fd1a 	bl	80024ce <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aa0:	f000 fa8e 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000ab4:	f002 fac2 	bl	800303c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000abe:	f000 fa7f 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8000ac6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000ae6:	f001 fe3b 	bl	8002760 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000af0:	f000 fa66 	bl	8000fc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000b18:	f002 fafe 	bl	8003118 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b22:	f000 fa4d 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM1_Init+0x138>)
 8000b28:	f000 fafc 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3758      	adds	r7, #88	; 0x58
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000724 	.word	0x20000724
 8000b38:	40010000 	.word	0x40010000

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 35;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b84:	2223      	movs	r2, #35	; 0x23
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4823      	ldr	r0, [pc, #140]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000b96:	f001 fc4b 	bl	8002430 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f000 fa0e 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bb2:	f001 fe97 	bl	80028e4 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f000 fa00 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000bc2:	f001 fc84 	bl	80024ce <HAL_TIM_PWM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 f9f8 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000be0:	f002 fa2c 	bl	800303c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f000 f9e9 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c06:	f001 fdab 	bl	8002760 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f000 f9d6 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM2_Init+0xe8>)
 8000c16:	f000 fa85 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	; 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000076c 	.word	0x2000076c

08000c28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c5a:	4a2d      	ldr	r2, [pc, #180]	; (8000d10 <MX_TIM3_Init+0xe8>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c60:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c7e:	4823      	ldr	r0, [pc, #140]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c80:	f001 fbd6 	bl	8002430 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c8a:	f000 f999 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481c      	ldr	r0, [pc, #112]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000c9c:	f001 fe22 	bl	80028e4 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ca6:	f000 f98b 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000caa:	4818      	ldr	r0, [pc, #96]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000cac:	f001 fc0f 	bl	80024ce <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cb6:	f000 f983 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4810      	ldr	r0, [pc, #64]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000cca:	f002 f9b7 	bl	800303c <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cd4:	f000 f974 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd8:	2360      	movs	r3, #96	; 0x60
 8000cda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 127;
 8000cdc:	237f      	movs	r3, #127	; 0x7f
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2204      	movs	r2, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4807      	ldr	r0, [pc, #28]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000cf0:	f001 fd36 	bl	8002760 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cfa:	f000 f961 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <MX_TIM3_Init+0xe4>)
 8000d00:	f000 fa10 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000d04:	bf00      	nop
 8000d06:	3738      	adds	r7, #56	; 0x38
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200007b4 	.word	0x200007b4
 8000d10:	40000400 	.word	0x40000400

08000d14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d46:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <MX_TIM4_Init+0xe8>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d4c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 127;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d5a:	227f      	movs	r2, #127	; 0x7f
 8000d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6a:	4823      	ldr	r0, [pc, #140]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d6c:	f001 fb60 	bl	8002430 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d76:	f000 f923 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d84:	4619      	mov	r1, r3
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d88:	f001 fdac 	bl	80028e4 <HAL_TIM_ConfigClockSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d92:	f000 f915 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d96:	4818      	ldr	r0, [pc, #96]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000d98:	f001 fb99 	bl	80024ce <HAL_TIM_PWM_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000da2:	f000 f90d 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	4619      	mov	r1, r3
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000db6:	f002 f941 	bl	800303c <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000dc0:	f000 f8fe 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc4:	2360      	movs	r3, #96	; 0x60
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 63;
 8000dc8:	233f      	movs	r3, #63	; 0x3f
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000ddc:	f001 fcc0 	bl	8002760 <HAL_TIM_PWM_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000de6:	f000 f8eb 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM4_Init+0xe4>)
 8000dec:	f000 f99a 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000df0:	bf00      	nop
 8000df2:	3738      	adds	r7, #56	; 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200007fc 	.word	0x200007fc
 8000dfc:	40000800 	.word	0x40000800

08000e00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_USART2_UART_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e38:	f002 f9d4 	bl	80031e4 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e42:	f000 f8bd 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000844 	.word	0x20000844
 8000e50:	40004400 	.word	0x40004400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2d      	ldr	r2, [pc, #180]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a26      	ldr	r2, [pc, #152]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_GPIO_Init+0xd4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_GPIO_Init+0xd8>)
 8000ee2:	f000 fdd9 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_GPIO_Init+0xdc>)
 8000efe:	f000 fc47 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f02:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_GPIO_Init+0xd8>)
 8000f1c:	f000 fc38 	bl	8001790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020800 	.word	0x40020800

08000f34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f002 fdda 	bl	8003af6 <osDelay>
 8000f42:	e7fb      	b.n	8000f3c <StartDefaultTask+0x8>

08000f44 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <Callback01+0x18>)
 8000f50:	f000 fdbb 	bl	8001aca <HAL_GPIO_TogglePin>
  /* USER CODE END Callback01 */
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020000 	.word	0x40020000

08000f60 <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <Callback02+0x1c>)
 8000f6e:	f000 fdac 	bl	8001aca <HAL_GPIO_TogglePin>
  /* USER CODE END Callback02 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020000 	.word	0x40020000

08000f80 <Callback03>:

/* Callback03 function */
void Callback03(void const * argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback03 */
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_10);
 8000f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <Callback03+0x1c>)
 8000f8e:	f000 fd9c 	bl	8001aca <HAL_GPIO_TogglePin>
  /* USER CODE END Callback03 */
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <Callback04>:

/* Callback04 function */
void Callback04(void const * argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback04 */
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_9);
 8000fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <Callback04+0x1c>)
 8000fae:	f000 fd8c 	bl	8001aca <HAL_GPIO_TogglePin>
  /* USER CODE END Callback04 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_MspInit+0x54>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_MspInit+0x54>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x54>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_MspInit+0x54>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_MspInit+0x54>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_MspInit+0x54>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	210f      	movs	r1, #15
 800100e:	f06f 0001 	mvn.w	r0, #1
 8001012:	f000 fb86 	bl	8001722 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a38      	ldr	r2, [pc, #224]	; (8001114 <HAL_TIM_Base_MspInit+0xf0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d116      	bne.n	8001064 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a36      	ldr	r2, [pc, #216]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2105      	movs	r1, #5
 8001056:	2019      	movs	r0, #25
 8001058:	f000 fb63 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800105c:	2019      	movs	r0, #25
 800105e:	f000 fb7c 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001062:	e052      	b.n	800110a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d116      	bne.n	800109c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	201c      	movs	r0, #28
 8001090:	f000 fb47 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001094:	201c      	movs	r0, #28
 8001096:	f000 fb60 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 800109a:	e036      	b.n	800110a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1e      	ldr	r2, [pc, #120]	; (800111c <HAL_TIM_Base_MspInit+0xf8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d116      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2105      	movs	r1, #5
 80010c6:	201d      	movs	r0, #29
 80010c8:	f000 fb2b 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010cc:	201d      	movs	r0, #29
 80010ce:	f000 fb44 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 80010d2:	e01a      	b.n	800110a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_TIM_Base_MspInit+0xfc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d115      	bne.n	800110a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_TIM_Base_MspInit+0xf4>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	201e      	movs	r0, #30
 8001100:	f000 fb0f 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001104:	201e      	movs	r0, #30
 8001106:	f000 fb28 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40010000 	.word	0x40010000
 8001118:	40023800 	.word	0x40023800
 800111c:	40000400 	.word	0x40000400
 8001120:	40000800 	.word	0x40000800

08001124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_TIM_MspPostInit+0x140>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d11f      	bne.n	8001186 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a46      	ldr	r2, [pc, #280]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	483b      	ldr	r0, [pc, #236]	; (800126c <HAL_TIM_MspPostInit+0x148>)
 8001180:	f000 fb06 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001184:	e06a      	b.n	800125c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118e:	d11e      	bne.n	80011ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a33      	ldr	r2, [pc, #204]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011bc:	2301      	movs	r3, #1
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4829      	ldr	r0, [pc, #164]	; (800126c <HAL_TIM_MspPostInit+0x148>)
 80011c8:	f000 fae2 	bl	8001790 <HAL_GPIO_Init>
}
 80011cc:	e046      	b.n	800125c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_TIM_MspPostInit+0x14c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d11e      	bne.n	8001216 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001204:	2302      	movs	r3, #2
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <HAL_TIM_MspPostInit+0x148>)
 8001210:	f000 fabe 	bl	8001790 <HAL_GPIO_Init>
}
 8001214:	e022      	b.n	800125c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_TIM_MspPostInit+0x150>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d11d      	bne.n	800125c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_TIM_MspPostInit+0x144>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123c:	2340      	movs	r3, #64	; 0x40
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800124c:	2302      	movs	r3, #2
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <HAL_TIM_MspPostInit+0x154>)
 8001258:	f000 fa9a 	bl	8001790 <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40010000 	.word	0x40010000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000
 8001270:	40000400 	.word	0x40000400
 8001274:	40000800 	.word	0x40000800
 8001278:	40020400 	.word	0x40020400

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_UART_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12b      	bne.n	80012f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d6:	230c      	movs	r3, #12
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e6:	2307      	movs	r3, #7
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_UART_MspInit+0x8c>)
 80012f2:	f000 fa4d 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004400 	.word	0x40004400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f8f6 	bl	800152c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001340:	f004 fd88 	bl	8005e54 <xTaskGetSchedulerState>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d001      	beq.n	800134e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800134a:	f005 fd2d 	bl	8006da8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800135a:	f001 f911 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000724 	.word	0x20000724

08001368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM2_IRQHandler+0x10>)
 800136e:	f001 f907 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000076c 	.word	0x2000076c

0800137c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM3_IRQHandler+0x10>)
 8001382:	f001 f8fd 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200007b4 	.word	0x200007b4

08001390 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM4_IRQHandler+0x10>)
 8001396:	f001 f8f3 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200007fc 	.word	0x200007fc

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f005 ff8a 	bl	80072ec <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20020000 	.word	0x20020000
 8001404:	00000400 	.word	0x00000400
 8001408:	200008b0 	.word	0x200008b0
 800140c:	20004890 	.word	0x20004890

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001438:	f7ff ffea 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	; (8001474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	; (8001480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f005 ff49 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff f96d 	bl	8000744 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001478:	08007d4c 	.word	0x08007d4c
  ldr r2, =_sbss
 800147c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001480:	20004890 	.word	0x20004890

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f92b 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fd86 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f943 	bl	8001776 <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f90b 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	200008b4 	.word	0x200008b4

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200008b4 	.word	0x200008b4

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff3e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff31 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e159      	b.n	8001a60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8148 	bne.w	8001a5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d005      	beq.n	80017e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d130      	bne.n	8001844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0201 	and.w	r2, r3, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b03      	cmp	r3, #3
 800184e:	d017      	beq.n	8001880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d123      	bne.n	80018d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0203 	and.w	r2, r3, #3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a2 	beq.w	8001a5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_GPIO_Init+0x2e8>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a56      	ldr	r2, [pc, #344]	; (8001a78 <HAL_GPIO_Init+0x2e8>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <HAL_GPIO_Init+0x2e8>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_GPIO_Init+0x2ec>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x202>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a48      	ldr	r2, [pc, #288]	; (8001a84 <HAL_GPIO_Init+0x2f4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x1fe>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_GPIO_Init+0x2f8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x1fa>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_GPIO_Init+0x2fc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x1f6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a45      	ldr	r2, [pc, #276]	; (8001a90 <HAL_GPIO_Init+0x300>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x1f2>
 800197e:	2304      	movs	r3, #4
 8001980:	e008      	b.n	8001994 <HAL_GPIO_Init+0x204>
 8001982:	2307      	movs	r3, #7
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x204>
 8001986:	2303      	movs	r3, #3
 8001988:	e004      	b.n	8001994 <HAL_GPIO_Init+0x204>
 800198a:	2302      	movs	r3, #2
 800198c:	e002      	b.n	8001994 <HAL_GPIO_Init+0x204>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x204>
 8001992:	2300      	movs	r3, #0
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f002 0203 	and.w	r2, r2, #3
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	4093      	lsls	r3, r2
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a4:	4935      	ldr	r1, [pc, #212]	; (8001a7c <HAL_GPIO_Init+0x2ec>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_GPIO_Init+0x304>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d6:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <HAL_GPIO_Init+0x304>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x304>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a00:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a54:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	f67f aea2 	bls.w	80017ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	400b      	ands	r3, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e267      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e242      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6c      	ldr	r2, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a68      	ldr	r2, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fccc 	bl	8001554 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fcc8 	bl	8001554 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e207      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fcb8 	bl	8001554 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fcb4 	bl	8001554 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1f3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1c7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fc6d 	bl	8001554 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fc69 	bl	8001554 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1a8      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4925      	ldr	r1, [pc, #148]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc4c 	bl	8001554 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc48 	bl	8001554 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e187      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d036      	beq.n	8001d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fc2c 	bl	8001554 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc28 	bl	8001554 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e167      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
 8001d1e:	e01b      	b.n	8001d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fc15 	bl	8001554 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e00e      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fc11 	bl	8001554 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d907      	bls.n	8001d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e150      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	42470000 	.word	0x42470000
 8001d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ea      	bne.n	8001d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8097 	beq.w	8001e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7ff fbd1 	bl	8001554 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7ff fbcd 	bl	8001554 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e10c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x2ea>
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x30c>
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 0304 	bic.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d015      	beq.n	8001e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fb92 	bl	8001554 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff fb8e 	bl	8001554 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0cb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ee      	beq.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fb7c 	bl	8001554 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff fb78 	bl	8001554 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0b5      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ee      	bne.n	8001e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a1 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d05c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d141      	bne.n	8001f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb4c 	bl	8001554 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fb48 	bl	8001554 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e087      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fb21 	bl	8001554 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff fb1d 	bl	8001554 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e05c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x416>
 8001f34:	e054      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fb0a 	bl	8001554 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fb06 	bl	8001554 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e045      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e038      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d028      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d121      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7ff fa38 	bl	8001554 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7ff fa34 	bl	8001554 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f998 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08007cf0 	.word	0x08007cf0
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b094      	sub	sp, #80	; 0x50
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
 80021c8:	2300      	movs	r3, #0
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80e1 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e0db      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021f4:	e0db      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fa:	e0d8      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
 800221c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
 800222a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4621      	mov	r1, r4
 8002248:	1a51      	subs	r1, r2, r1
 800224a:	6139      	str	r1, [r7, #16]
 800224c:	4629      	mov	r1, r5
 800224e:	eb63 0301 	sbc.w	r3, r3, r1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002260:	4659      	mov	r1, fp
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	4651      	mov	r1, sl
 8002266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226a:	4651      	mov	r1, sl
 800226c:	018a      	lsls	r2, r1, #6
 800226e:	4651      	mov	r1, sl
 8002270:	ebb2 0801 	subs.w	r8, r2, r1
 8002274:	4659      	mov	r1, fp
 8002276:	eb63 0901 	sbc.w	r9, r3, r1
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228e:	4690      	mov	r8, r2
 8002290:	4699      	mov	r9, r3
 8002292:	4623      	mov	r3, r4
 8002294:	eb18 0303 	adds.w	r3, r8, r3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	462b      	mov	r3, r5
 800229c:	eb49 0303 	adc.w	r3, r9, r3
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ae:	4629      	mov	r1, r5
 80022b0:	024b      	lsls	r3, r1, #9
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b8:	4621      	mov	r1, r4
 80022ba:	024a      	lsls	r2, r1, #9
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	2200      	movs	r2, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022cc:	f7fd ffe0 	bl	8000290 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d8:	e058      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	2200      	movs	r2, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	4611      	mov	r1, r2
 80022e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0159      	lsls	r1, r3, #5
 8002302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002306:	0150      	lsls	r0, r2, #5
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4641      	mov	r1, r8
 800230e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb63 0b01 	sbc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800232c:	ebb2 040a 	subs.w	r4, r2, sl
 8002330:	eb63 050b 	sbc.w	r5, r3, fp
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00eb      	lsls	r3, r5, #3
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	4643      	mov	r3, r8
 800234a:	18e3      	adds	r3, r4, r3
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	464b      	mov	r3, r9
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4629      	mov	r1, r5
 8002364:	028b      	lsls	r3, r1, #10
 8002366:	4621      	mov	r1, r4
 8002368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800236c:	4621      	mov	r1, r4
 800236e:	028a      	lsls	r2, r1, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002376:	2200      	movs	r2, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	61fa      	str	r2, [r7, #28]
 800237c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002380:	f7fd ff86 	bl	8000290 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800239c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3750      	adds	r7, #80	; 0x50
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08007d00 	.word	0x08007d00

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800240c:	f7ff ffdc 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08007d00 	.word	0x08007d00

08002430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e041      	b.n	80024c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fde4 	bl	8001024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 fb32 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e041      	b.n	8002564 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f839 	bl	800256c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	4619      	mov	r1, r3
 800250c:	4610      	mov	r0, r2
 800250e:	f000 fae3 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fa65 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa57 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fa68 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d020      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0204 	mvn.w	r2, #4
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa3f 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa31 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fa42 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0208 	mvn.w	r2, #8
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa19 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa0b 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fa1c 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0210 	mvn.w	r2, #16
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2208      	movs	r2, #8
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f9f3 	bl	8002a9a <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f9e5 	bl	8002a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f9f6 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9c3 	bl	8002a72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fd60 	bl	80031d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9c7 	bl	8002ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0220 	mvn.w	r2, #32
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fd32 	bl	80031bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800277a:	2302      	movs	r3, #2
 800277c:	e0ae      	b.n	80028dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	f200 809f 	bhi.w	80028cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027c9 	.word	0x080027c9
 8002798:	080028cd 	.word	0x080028cd
 800279c:	080028cd 	.word	0x080028cd
 80027a0:	080028cd 	.word	0x080028cd
 80027a4:	08002809 	.word	0x08002809
 80027a8:	080028cd 	.word	0x080028cd
 80027ac:	080028cd 	.word	0x080028cd
 80027b0:	080028cd 	.word	0x080028cd
 80027b4:	0800284b 	.word	0x0800284b
 80027b8:	080028cd 	.word	0x080028cd
 80027bc:	080028cd 	.word	0x080028cd
 80027c0:	080028cd 	.word	0x080028cd
 80027c4:	0800288b 	.word	0x0800288b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fa0e 	bl	8002bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0208 	orr.w	r2, r2, #8
 80027e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6999      	ldr	r1, [r3, #24]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	619a      	str	r2, [r3, #24]
      break;
 8002806:	e064      	b.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fa54 	bl	8002cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6999      	ldr	r1, [r3, #24]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	021a      	lsls	r2, r3, #8
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	619a      	str	r2, [r3, #24]
      break;
 8002848:	e043      	b.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fa9f 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0208 	orr.w	r2, r2, #8
 8002864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0204 	bic.w	r2, r2, #4
 8002874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69d9      	ldr	r1, [r3, #28]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	61da      	str	r2, [r3, #28]
      break;
 8002888:	e023      	b.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fae9 	bl	8002e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	61da      	str	r2, [r3, #28]
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
      break;
 80028d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_TIM_ConfigClockSource+0x1c>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e0b4      	b.n	8002a6a <HAL_TIM_ConfigClockSource+0x186>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800291e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d03e      	beq.n	80029b8 <HAL_TIM_ConfigClockSource+0xd4>
 800293a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293e:	f200 8087 	bhi.w	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002946:	f000 8086 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x172>
 800294a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294e:	d87f      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b70      	cmp	r3, #112	; 0x70
 8002952:	d01a      	beq.n	800298a <HAL_TIM_ConfigClockSource+0xa6>
 8002954:	2b70      	cmp	r3, #112	; 0x70
 8002956:	d87b      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b60      	cmp	r3, #96	; 0x60
 800295a:	d050      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x11a>
 800295c:	2b60      	cmp	r3, #96	; 0x60
 800295e:	d877      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b50      	cmp	r3, #80	; 0x50
 8002962:	d03c      	beq.n	80029de <HAL_TIM_ConfigClockSource+0xfa>
 8002964:	2b50      	cmp	r3, #80	; 0x50
 8002966:	d873      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d058      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x13a>
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d86f      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b30      	cmp	r3, #48	; 0x30
 8002972:	d064      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x15a>
 8002974:	2b30      	cmp	r3, #48	; 0x30
 8002976:	d86b      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b20      	cmp	r3, #32
 800297a:	d060      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d867      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05c      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x15a>
 8002984:	2b10      	cmp	r3, #16
 8002986:	d05a      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x15a>
 8002988:	e062      	b.n	8002a50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800299a:	f000 fb2f 	bl	8002ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	609a      	str	r2, [r3, #8]
      break;
 80029b6:	e04f      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029c8:	f000 fb18 	bl	8002ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029da:	609a      	str	r2, [r3, #8]
      break;
 80029dc:	e03c      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 fa8c 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2150      	movs	r1, #80	; 0x50
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fae5 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e02c      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 faab 	bl	8002f66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2160      	movs	r1, #96	; 0x60
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fad5 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e01c      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f000 fa6c 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2140      	movs	r1, #64	; 0x40
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fac5 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a3c:	e00c      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f000 fabc 	bl	8002fc6 <TIM_ITRx_SetConfig>
      break;
 8002a4e:	e003      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      break;
 8002a54:	e000      	b.n	8002a58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <TIM_Base_SetConfig+0xfc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00f      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d00b      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <TIM_Base_SetConfig+0x100>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d007      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <TIM_Base_SetConfig+0x104>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a35      	ldr	r2, [pc, #212]	; (8002be0 <TIM_Base_SetConfig+0x108>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d108      	bne.n	8002b22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <TIM_Base_SetConfig+0xfc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01b      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d017      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <TIM_Base_SetConfig+0x100>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <TIM_Base_SetConfig+0x104>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00f      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <TIM_Base_SetConfig+0x108>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <TIM_Base_SetConfig+0x10c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <TIM_Base_SetConfig+0x110>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a23      	ldr	r2, [pc, #140]	; (8002bec <TIM_Base_SetConfig+0x114>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <TIM_Base_SetConfig+0xfc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d103      	bne.n	8002ba8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40000c00 	.word	0x40000c00
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800

08002bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0201 	bic.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 0302 	bic.w	r3, r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0308 	bic.w	r3, r3, #8
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <TIM_OC1_SetConfig+0xc8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d111      	bne.n	8002c92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40010000 	.word	0x40010000

08002cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 0210 	bic.w	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0320 	bic.w	r3, r3, #32
 8002d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <TIM_OC2_SetConfig+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d10d      	bne.n	8002d38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <TIM_OC2_SetConfig+0xd4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d113      	bne.n	8002d68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC3_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d113      	bne.n	8002e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40010000 	.word	0x40010000

08002e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <TIM_OC4_SetConfig+0x9c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 030a 	bic.w	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0210 	bic.w	r2, r3, #16
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f043 0307 	orr.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	431a      	orrs	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003050:	2302      	movs	r3, #2
 8003052:	e050      	b.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d018      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a0:	d013      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10c      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40014000 	.word	0x40014000

08003118 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003130:	2302      	movs	r3, #2
 8003132:	e03d      	b.n	80031b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e042      	b.n	800327c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe f836 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f973 	bl	8003514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d175      	bne.n	8003390 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Transmit+0x2c>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e06e      	b.n	8003392 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c2:	f7fe f947 	bl	8001554 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Transmit+0x6c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032f8:	e02e      	b.n	8003358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f848 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e03a      	b.n	8003392 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	3302      	adds	r3, #2
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	e007      	b.n	800334a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	3301      	adds	r3, #1
 8003348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1cb      	bne.n	80032fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f814 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e006      	b.n	8003392 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	e03b      	b.n	8003424 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d037      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fe f8ce 	bl	8001554 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	6a3a      	ldr	r2, [r7, #32]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <UART_WaitOnFlagUntilTimeout+0x30>
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e03a      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d023      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d020      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d01d      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d116      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f81d 	bl	800344c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2208      	movs	r2, #8
 8003416:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e00f      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d0b4      	beq.n	80033ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b095      	sub	sp, #84	; 0x54
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003474:	643a      	str	r2, [r7, #64]	; 0x40
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800347a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e5      	bne.n	8003454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3314      	adds	r3, #20
 800348e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	61fb      	str	r3, [r7, #28]
   return(result);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d119      	bne.n	80034f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034e4:	61ba      	str	r2, [r7, #24]
 80034e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6979      	ldr	r1, [r7, #20]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	613b      	str	r3, [r7, #16]
   return(result);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003506:	bf00      	nop
 8003508:	3754      	adds	r7, #84	; 0x54
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b0c0      	sub	sp, #256	; 0x100
 800351a:	af00      	add	r7, sp, #0
 800351c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	ea40 0301 	orr.w	r3, r0, r1
 800353c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	431a      	orrs	r2, r3
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800356c:	f021 010c 	bic.w	r1, r1, #12
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800357a:	430b      	orrs	r3, r1
 800357c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	6999      	ldr	r1, [r3, #24]
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	ea40 0301 	orr.w	r3, r0, r1
 800359a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <UART_SetConfig+0x2cc>)
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d005      	beq.n	80035b4 <UART_SetConfig+0xa0>
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b8d      	ldr	r3, [pc, #564]	; (80037e4 <UART_SetConfig+0x2d0>)
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d104      	bne.n	80035be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7fe ff28 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 80035b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035bc:	e003      	b.n	80035c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035be:	f7fe ff0f 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 80035c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	f040 810c 	bne.w	80037ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	1891      	adds	r1, r2, r2
 80035ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ee:	415b      	adcs	r3, r3
 80035f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035f6:	4621      	mov	r1, r4
 80035f8:	eb12 0801 	adds.w	r8, r2, r1
 80035fc:	4629      	mov	r1, r5
 80035fe:	eb43 0901 	adc.w	r9, r3, r1
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800360e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003616:	4690      	mov	r8, r2
 8003618:	4699      	mov	r9, r3
 800361a:	4623      	mov	r3, r4
 800361c:	eb18 0303 	adds.w	r3, r8, r3
 8003620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003624:	462b      	mov	r3, r5
 8003626:	eb49 0303 	adc.w	r3, r9, r3
 800362a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800363a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800363e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003642:	460b      	mov	r3, r1
 8003644:	18db      	adds	r3, r3, r3
 8003646:	653b      	str	r3, [r7, #80]	; 0x50
 8003648:	4613      	mov	r3, r2
 800364a:	eb42 0303 	adc.w	r3, r2, r3
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
 8003650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003658:	f7fc fe1a 	bl	8000290 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <UART_SetConfig+0x2d4>)
 8003662:	fba3 2302 	umull	r2, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	011c      	lsls	r4, r3, #4
 800366a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	64b9      	str	r1, [r7, #72]	; 0x48
 8003684:	415b      	adcs	r3, r3
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800368c:	4641      	mov	r1, r8
 800368e:	eb12 0a01 	adds.w	sl, r2, r1
 8003692:	4649      	mov	r1, r9
 8003694:	eb43 0b01 	adc.w	fp, r3, r1
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ac:	4692      	mov	sl, r2
 80036ae:	469b      	mov	fp, r3
 80036b0:	4643      	mov	r3, r8
 80036b2:	eb1a 0303 	adds.w	r3, sl, r3
 80036b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ba:	464b      	mov	r3, r9
 80036bc:	eb4b 0303 	adc.w	r3, fp, r3
 80036c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036d8:	460b      	mov	r3, r1
 80036da:	18db      	adds	r3, r3, r3
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
 80036de:	4613      	mov	r3, r2
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
 80036e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ee:	f7fc fdcf 	bl	8000290 <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <UART_SetConfig+0x2d4>)
 80036fa:	fba3 2301 	umull	r2, r3, r3, r1
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2264      	movs	r2, #100	; 0x64
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	1acb      	subs	r3, r1, r3
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <UART_SetConfig+0x2d4>)
 8003710:	fba3 2302 	umull	r2, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800371c:	441c      	add	r4, r3
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003722:	2200      	movs	r2, #0
 8003724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800372c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	1891      	adds	r1, r2, r2
 8003736:	63b9      	str	r1, [r7, #56]	; 0x38
 8003738:	415b      	adcs	r3, r3
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003740:	4641      	mov	r1, r8
 8003742:	1851      	adds	r1, r2, r1
 8003744:	6339      	str	r1, [r7, #48]	; 0x30
 8003746:	4649      	mov	r1, r9
 8003748:	414b      	adcs	r3, r1
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003758:	4659      	mov	r1, fp
 800375a:	00cb      	lsls	r3, r1, #3
 800375c:	4651      	mov	r1, sl
 800375e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003762:	4651      	mov	r1, sl
 8003764:	00ca      	lsls	r2, r1, #3
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	4603      	mov	r3, r0
 800376c:	4642      	mov	r2, r8
 800376e:	189b      	adds	r3, r3, r2
 8003770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003774:	464b      	mov	r3, r9
 8003776:	460a      	mov	r2, r1
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800378c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003794:	460b      	mov	r3, r1
 8003796:	18db      	adds	r3, r3, r3
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
 800379a:	4613      	mov	r3, r2
 800379c:	eb42 0303 	adc.w	r3, r2, r3
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037aa:	f7fc fd71 	bl	8000290 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <UART_SetConfig+0x2d4>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UART_SetConfig+0x2d4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 0207 	and.w	r2, r3, #7
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4422      	add	r2, r4
 80037da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037dc:	e106      	b.n	80039ec <UART_SetConfig+0x4d8>
 80037de:	bf00      	nop
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40011400 	.word	0x40011400
 80037e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	1891      	adds	r1, r2, r2
 8003804:	6239      	str	r1, [r7, #32]
 8003806:	415b      	adcs	r3, r3
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800380e:	4641      	mov	r1, r8
 8003810:	1854      	adds	r4, r2, r1
 8003812:	4649      	mov	r1, r9
 8003814:	eb43 0501 	adc.w	r5, r3, r1
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	00eb      	lsls	r3, r5, #3
 8003822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003826:	00e2      	lsls	r2, r4, #3
 8003828:	4614      	mov	r4, r2
 800382a:	461d      	mov	r5, r3
 800382c:	4643      	mov	r3, r8
 800382e:	18e3      	adds	r3, r4, r3
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003834:	464b      	mov	r3, r9
 8003836:	eb45 0303 	adc.w	r3, r5, r3
 800383a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800384a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800385a:	4629      	mov	r1, r5
 800385c:	008b      	lsls	r3, r1, #2
 800385e:	4621      	mov	r1, r4
 8003860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003864:	4621      	mov	r1, r4
 8003866:	008a      	lsls	r2, r1, #2
 8003868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800386c:	f7fc fd10 	bl	8000290 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <UART_SetConfig+0x4e4>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	011c      	lsls	r4, r3, #4
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800388c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	61b9      	str	r1, [r7, #24]
 8003898:	415b      	adcs	r3, r3
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a0:	4641      	mov	r1, r8
 80038a2:	1851      	adds	r1, r2, r1
 80038a4:	6139      	str	r1, [r7, #16]
 80038a6:	4649      	mov	r1, r9
 80038a8:	414b      	adcs	r3, r1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b8:	4659      	mov	r1, fp
 80038ba:	00cb      	lsls	r3, r1, #3
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c2:	4651      	mov	r1, sl
 80038c4:	00ca      	lsls	r2, r1, #3
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4642      	mov	r2, r8
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038d4:	464b      	mov	r3, r9
 80038d6:	460a      	mov	r2, r1
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038f8:	4649      	mov	r1, r9
 80038fa:	008b      	lsls	r3, r1, #2
 80038fc:	4641      	mov	r1, r8
 80038fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003902:	4641      	mov	r1, r8
 8003904:	008a      	lsls	r2, r1, #2
 8003906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800390a:	f7fc fcc1 	bl	8000290 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4611      	mov	r1, r2
 8003914:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <UART_SetConfig+0x4e4>)
 8003916:	fba3 2301 	umull	r2, r3, r3, r1
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2264      	movs	r2, #100	; 0x64
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	1acb      	subs	r3, r1, r3
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	3332      	adds	r3, #50	; 0x32
 8003928:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <UART_SetConfig+0x4e4>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003934:	441c      	add	r4, r3
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	673b      	str	r3, [r7, #112]	; 0x70
 800393e:	677a      	str	r2, [r7, #116]	; 0x74
 8003940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	1891      	adds	r1, r2, r2
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	415b      	adcs	r3, r3
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003954:	4641      	mov	r1, r8
 8003956:	1851      	adds	r1, r2, r1
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	4649      	mov	r1, r9
 800395c:	414b      	adcs	r3, r1
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800396c:	4659      	mov	r1, fp
 800396e:	00cb      	lsls	r3, r1, #3
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003976:	4651      	mov	r1, sl
 8003978:	00ca      	lsls	r2, r1, #3
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	4603      	mov	r3, r0
 8003980:	4642      	mov	r2, r8
 8003982:	189b      	adds	r3, r3, r2
 8003984:	66bb      	str	r3, [r7, #104]	; 0x68
 8003986:	464b      	mov	r3, r9
 8003988:	460a      	mov	r2, r1
 800398a:	eb42 0303 	adc.w	r3, r2, r3
 800398e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	663b      	str	r3, [r7, #96]	; 0x60
 800399a:	667a      	str	r2, [r7, #100]	; 0x64
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039a8:	4649      	mov	r1, r9
 80039aa:	008b      	lsls	r3, r1, #2
 80039ac:	4641      	mov	r1, r8
 80039ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b2:	4641      	mov	r1, r8
 80039b4:	008a      	lsls	r2, r1, #2
 80039b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039ba:	f7fc fc69 	bl	8000290 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <UART_SetConfig+0x4e4>)
 80039c4:	fba3 1302 	umull	r1, r3, r3, r2
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	2164      	movs	r1, #100	; 0x64
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	3332      	adds	r3, #50	; 0x32
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <UART_SetConfig+0x4e4>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4422      	add	r2, r4
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039f2:	46bd      	mov	sp, r7
 80039f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f8:	51eb851f 	.word	0x51eb851f

080039fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0e:	2b84      	cmp	r3, #132	; 0x84
 8003a10:	d005      	beq.n	8003a1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	3303      	adds	r3, #3
 8003a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a32:	f3ef 8305 	mrs	r3, IPSR
 8003a36:	607b      	str	r3, [r7, #4]
  return(result);
 8003a38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a54:	f001 fdbe 	bl	80055d4 <vTaskStartScheduler>
  
  return osOK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a60:	b089      	sub	sp, #36	; 0x24
 8003a62:	af04      	add	r7, sp, #16
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <osThreadCreate+0x54>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01c      	beq.n	8003ab2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685c      	ldr	r4, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691e      	ldr	r6, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ffb6 	bl	80039fc <makeFreeRtosPriority>
 8003a90:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a9a:	9202      	str	r2, [sp, #8]
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	9100      	str	r1, [sp, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4632      	mov	r2, r6
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f001 fbcc 	bl	8005244 <xTaskCreateStatic>
 8003aac:	4603      	mov	r3, r0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	e01c      	b.n	8003aec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685c      	ldr	r4, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003abe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff98 	bl	80039fc <makeFreeRtosPriority>
 8003acc:	4602      	mov	r2, r0
 8003ace:	f107 030c 	add.w	r3, r7, #12
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	9200      	str	r2, [sp, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	4632      	mov	r2, r6
 8003ada:	4629      	mov	r1, r5
 8003adc:	4620      	mov	r0, r4
 8003ade:	f001 fc0e 	bl	80052fe <xTaskCreate>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003af6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <osDelay+0x16>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	e000      	b.n	8003b0e <osDelay+0x18>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fd2c 	bl	800556c <vTaskDelay>
  
  return osOK;
 8003b14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d013      	beq.n	8003b5e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003b36:	7afb      	ldrb	r3, [r7, #11]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <osTimerCreate+0x20>
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	e000      	b.n	8003b42 <osTimerCreate+0x22>
 8003b40:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003b4a:	9201      	str	r2, [sp, #4]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	460a      	mov	r2, r1
 8003b52:	2101      	movs	r1, #1
 8003b54:	480b      	ldr	r0, [pc, #44]	; (8003b84 <osTimerCreate+0x64>)
 8003b56:	f002 fc08 	bl	800636a <xTimerCreateStatic>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	e00e      	b.n	8003b7c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <osTimerCreate+0x48>
 8003b64:	2201      	movs	r2, #1
 8003b66:	e000      	b.n	8003b6a <osTimerCreate+0x4a>
 8003b68:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2101      	movs	r1, #1
 8003b74:	4803      	ldr	r0, [pc, #12]	; (8003b84 <osTimerCreate+0x64>)
 8003b76:	f002 fbd7 	bl	8006328 <xTimerCreate>
 8003b7a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	08007cc8 	.word	0x08007cc8

08003b88 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <osTimerStart+0x20>
    ticks = 1;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003ba8:	f7ff ff40 	bl	8003a2c <inHandlerMode>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01a      	beq.n	8003be8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	9200      	str	r2, [sp, #0]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	2109      	movs	r1, #9
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f002 fc4c 	bl	800645c <xTimerGenericCommand>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d002      	beq.n	8003bd0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8003bca:	23ff      	movs	r3, #255	; 0xff
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e018      	b.n	8003c02 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <osTimerStart+0x7a>
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <osTimerStart+0x84>)
 8003bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	e00c      	b.n	8003c02 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003be8:	2300      	movs	r3, #0
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f002 fc32 	bl	800645c <xTimerGenericCommand>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <osTimerStart+0x7a>
      result = osErrorOS;
 8003bfe:	23ff      	movs	r3, #255	; 0xff
 8003c00:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003c02:	697b      	ldr	r3, [r7, #20]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00f      	beq.n	8003c42 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10a      	bne.n	8003c3e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	9200      	str	r2, [sp, #0]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2100      	movs	r1, #0
 8003c34:	2001      	movs	r0, #1
 8003c36:	f000 fc1b 	bl	8004470 <xQueueGenericCreateStatic>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	e016      	b.n	8003c6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e014      	b.n	8003c6c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d110      	bne.n	8003c6a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003c48:	2203      	movs	r2, #3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f000 fc87 	bl	8004560 <xQueueGenericCreate>
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <osSemaphoreCreate+0x56>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2100      	movs	r1, #0
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fcd7 	bl	8004614 <xQueueGenericSend>
      return sema;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	e000      	b.n	8003c6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003c6a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	e03a      	b.n	8003d02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d103      	bne.n	8003ca0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e009      	b.n	8003cb4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <osSemaphoreWait+0x40>
      ticks = 1;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003cb4:	f7ff feba 	bl	8003a2c <inHandlerMode>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d017      	beq.n	8003cee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f001 f8b6 	bl	8004e38 <xQueueReceiveFromISR>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003cd2:	23ff      	movs	r3, #255	; 0xff
 8003cd4:	e015      	b.n	8003d02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <osSemaphoreWait+0x8c>
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <osSemaphoreWait+0x98>)
 8003cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	e008      	b.n	8003d00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 ff95 	bl	8004c20 <xQueueSemaphoreTake>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d001      	beq.n	8003d00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003cfc:	23ff      	movs	r3, #255	; 0xff
 8003cfe:	e000      	b.n	8003d02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003d20:	f7ff fe84 	bl	8003a2c <inHandlerMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fe08 	bl	8004946 <xQueueGiveFromISR>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d001      	beq.n	8003d40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003d3c:	23ff      	movs	r3, #255	; 0xff
 8003d3e:	e017      	b.n	8003d70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d013      	beq.n	8003d6e <osSemaphoreRelease+0x5e>
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <osSemaphoreRelease+0x68>)
 8003d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	e00a      	b.n	8003d6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fc58 	bl	8004614 <xQueueGenericSend>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003d6a:	23ff      	movs	r3, #255	; 0xff
 8003d6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	3303      	adds	r3, #3
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8003d90:	2014      	movs	r0, #20
 8003d92:	f003 f899 	bl	8006ec8 <pvPortMalloc>
 8003d96:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d046      	beq.n	8003e2c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 f886 	bl	8006ec8 <pvPortMalloc>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02b      	beq.n	8003e22 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 f877 	bl	8006ec8 <pvPortMalloc>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d011      	beq.n	8003e0c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	e008      	b.n	8003e00 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3f1      	bcc.n	8003dee <osPoolCreate+0x72>
 8003e0a:	e00f      	b.n	8003e2c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f003 f925 	bl	8007060 <vPortFree>
        vPortFree(thePool);
 8003e16:	6978      	ldr	r0, [r7, #20]
 8003e18:	f003 f922 	bl	8007060 <vPortFree>
        thePool = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e004      	b.n	8003e2c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f003 f91c 	bl	8007060 <vPortFree>
      thePool = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b08a      	sub	sp, #40	; 0x28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8003e46:	f7ff fdf1 	bl	8003a2c <inHandlerMode>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00e      	beq.n	8003e6e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e50:	f3ef 8211 	mrs	r2, BASEPRI
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	617a      	str	r2, [r7, #20]
 8003e66:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e68:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e001      	b.n	8003e72 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8003e6e:	f002 ff09 	bl	8006c84 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e029      	b.n	8003ecc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	4413      	add	r3, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6892      	ldr	r2, [r2, #8]
 8003e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e88:	fb01 f202 	mul.w	r2, r1, r2
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d113      	bne.n	8003ec6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	440b      	add	r3, r1
 8003ebc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	611a      	str	r2, [r3, #16]
      break;
 8003ec4:	e007      	b.n	8003ed6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d3d0      	bcc.n	8003e78 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003ed6:	f7ff fda9 	bl	8003a2c <inHandlerMode>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003eea:	e001      	b.n	8003ef0 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003eec:	f002 fefa 	bl	8006ce4 <vPortExitCritical>
  }
  
  return p;
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3728      	adds	r7, #40	; 0x28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <osPoolFree+0x14>
    return osErrorParameter;
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	e030      	b.n	8003f70 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <osPoolFree+0x1e>
    return osErrorParameter;
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	e02b      	b.n	8003f70 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d201      	bcs.n	8003f26 <osPoolFree+0x2c>
    return osErrorParameter;
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	e024      	b.n	8003f70 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f3a:	fb01 f202 	mul.w	r2, r1, r2
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <osPoolFree+0x4e>
    return osErrorParameter;
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	e013      	b.n	8003f70 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d301      	bcc.n	8003f62 <osPoolFree+0x68>
    return osErrorParameter;
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	e006      	b.n	8003f70 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d011      	beq.n	8003fb2 <osMessageCreate+0x36>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2400      	movs	r4, #0
 8003fa8:	9400      	str	r4, [sp, #0]
 8003faa:	f000 fa61 	bl	8004470 <xQueueGenericCreateStatic>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	e008      	b.n	8003fc4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f000 facf 	bl	8004560 <xQueueGenericCreate>
 8003fc2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689c      	ldr	r4, [r3, #8]
 8003fea:	200c      	movs	r0, #12
 8003fec:	f002 ff6c 	bl	8006ec8 <pvPortMalloc>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <osMailCreate+0x36>
    return NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e038      	b.n	8004074 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	681c      	ldr	r4, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	2104      	movs	r1, #4
 800401a:	f000 faa1 	bl	8004560 <xQueueGenericCreate>
 800401e:	4603      	mov	r3, r0
 8004020:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d107      	bne.n	800403e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f003 f813 	bl	8007060 <vPortFree>
    return NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	e01a      	b.n	8004074 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	681c      	ldr	r4, [r3, #0]
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe97 	bl	8003d7c <osPoolCreate>
 800404e:	4603      	mov	r3, r0
 8004050:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f002 fffb 	bl	8007060 <vPortFree>
    return NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	e002      	b.n	8004074 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8004074:	4618      	mov	r0, r3
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}

0800407c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <osMailAlloc+0x14>
    return NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	e006      	b.n	800409e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fece 	bl	8003e36 <osPoolAlloc>
 800409a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <osMailPut+0x14>
    return osErrorParameter;
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	e02c      	b.n	8004116 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80040c0:	f7ff fcb4 	bl	8003a2c <inHandlerMode>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6858      	ldr	r0, [r3, #4]
 80040ce:	f107 020c 	add.w	r2, r7, #12
 80040d2:	4639      	mov	r1, r7
 80040d4:	2300      	movs	r3, #0
 80040d6:	f000 fb9b 	bl	8004810 <xQueueGenericSendFromISR>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <osMailPut+0x3c>
      return osErrorOS;
 80040e0:	23ff      	movs	r3, #255	; 0xff
 80040e2:	e018      	b.n	8004116 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <osMailPut+0x6c>
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <osMailPut+0x78>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	e00b      	b.n	8004114 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6858      	ldr	r0, [r3, #4]
 8004100:	4639      	mov	r1, r7
 8004102:	2300      	movs	r3, #0
 8004104:	2200      	movs	r2, #0
 8004106:	f000 fa85 	bl	8004614 <xQueueGenericSend>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <osMailPut+0x6c>
      return osErrorOS;
 8004110:	23ff      	movs	r3, #255	; 0xff
 8004112:	e000      	b.n	8004116 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08b      	sub	sp, #44	; 0x2c
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	617b      	str	r3, [r7, #20]
    return event;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	461c      	mov	r4, r3
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800414a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800414e:	e056      	b.n	80041fe <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004150:	2300      	movs	r3, #0
 8004152:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d103      	bne.n	8004168 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
 8004166:	e009      	b.n	800417c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <osMailGet+0x58>
      ticks = 1;
 8004178:	2301      	movs	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800417c:	f7ff fc56 	bl	8003a2c <inHandlerMode>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01d      	beq.n	80041c2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6858      	ldr	r0, [r3, #4]
 800418a:	f107 0220 	add.w	r2, r7, #32
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	f000 fe4f 	bl	8004e38 <xQueueReceiveFromISR>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d102      	bne.n	80041a6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80041a0:	2320      	movs	r3, #32
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e001      	b.n	80041aa <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01e      	beq.n	80041ee <osMailGet+0xca>
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <osMailGet+0xe4>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	e015      	b.n	80041ee <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6858      	ldr	r0, [r3, #4]
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	3304      	adds	r3, #4
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	4619      	mov	r1, r3
 80041d0:	f000 fc46 	bl	8004a60 <xQueueReceive>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80041da:	2320      	movs	r3, #32
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e006      	b.n	80041ee <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <osMailGet+0xc6>
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <osMailGet+0xc8>
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	461c      	mov	r4, r3
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	372c      	adds	r7, #44	; 0x2c
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	bf00      	nop
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <osMailFree+0x14>
    return osErrorParameter;
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	e006      	b.n	800422e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fe67 	bl	8003efa <osPoolFree>
 800422c:	4603      	mov	r3, r0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f103 0208 	add.w	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f103 0208 	add.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f103 0208 	add.w	r2, r3, #8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d103      	bne.n	80042f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	e00c      	b.n	8004312 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3308      	adds	r3, #8
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e002      	b.n	8004306 <vListInsert+0x2e>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d2f6      	bcs.n	8004300 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6852      	ldr	r2, [r2, #4]
 800436a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d103      	bne.n	800437e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <xQueueGenericReset+0x2a>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	60bb      	str	r3, [r7, #8]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043ca:	f002 fc5b 	bl	8006c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	441a      	add	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	3b01      	subs	r3, #1
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	441a      	add	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01a      	beq.n	800445e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3310      	adds	r3, #16
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fb55 	bl	8005adc <xTaskRemoveFromEventList>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <xQueueGenericReset+0xcc>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	e009      	b.n	800445e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3310      	adds	r3, #16
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fef1 	bl	8004236 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3324      	adds	r3, #36	; 0x24
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff feec 	bl	8004236 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800445e:	f002 fc41 	bl	8006ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004462:	2301      	movs	r3, #1
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <xQueueGenericCreateStatic+0x52>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <xQueueGenericCreateStatic+0x56>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueGenericCreateStatic+0x58>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <xQueueGenericCreateStatic+0x7e>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <xQueueGenericCreateStatic+0x82>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <xQueueGenericCreateStatic+0x84>
 80044f2:	2300      	movs	r3, #0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	61fb      	str	r3, [r7, #28]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800450e:	2348      	movs	r3, #72	; 0x48
 8004510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b48      	cmp	r3, #72	; 0x48
 8004516:	d00a      	beq.n	800452e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	61bb      	str	r3, [r7, #24]
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800452e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004542:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f83f 	bl	80045d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004558:	4618      	mov	r0, r3
 800455a:	3730      	adds	r7, #48	; 0x30
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	613b      	str	r3, [r7, #16]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3348      	adds	r3, #72	; 0x48
 8004598:	4618      	mov	r0, r3
 800459a:	f002 fc95 	bl	8006ec8 <pvPortMalloc>
 800459e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d011      	beq.n	80045ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3348      	adds	r3, #72	; 0x48
 80045ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045b8:	79fa      	ldrb	r2, [r7, #7]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f805 	bl	80045d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045ca:	69bb      	ldr	r3, [r7, #24]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3720      	adds	r7, #32
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004602:	2101      	movs	r1, #1
 8004604:	69b8      	ldr	r0, [r7, #24]
 8004606:	f7ff fecb 	bl	80043a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004622:	2300      	movs	r3, #0
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericSend+0x32>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <xQueueGenericSend+0x40>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <xQueueGenericSend+0x44>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <xQueueGenericSend+0x46>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <xQueueGenericSend+0x60>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d103      	bne.n	8004682 <xQueueGenericSend+0x6e>
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <xQueueGenericSend+0x72>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <xQueueGenericSend+0x74>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a2:	f001 fbd7 	bl	8005e54 <xTaskGetSchedulerState>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xQueueGenericSend+0x9e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xQueueGenericSend+0xa2>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xQueueGenericSend+0xa4>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61fb      	str	r3, [r7, #28]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d2:	f002 fad7 	bl	8006c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <xQueueGenericSend+0xd4>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d129      	bne.n	800473c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ee:	f000 fc3b 	bl	8004f68 <prvCopyDataToQueue>
 80046f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d010      	beq.n	800471e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f9eb 	bl	8005adc <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d013      	beq.n	8004734 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b3f      	ldr	r3, [pc, #252]	; (800480c <xQueueGenericSend+0x1f8>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e00a      	b.n	8004734 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <xQueueGenericSend+0x1f8>)
 8004726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004734:	f002 fad6 	bl	8006ce4 <vPortExitCritical>
				return pdPASS;
 8004738:	2301      	movs	r3, #1
 800473a:	e063      	b.n	8004804 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004742:	f002 facf 	bl	8006ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004746:	2300      	movs	r3, #0
 8004748:	e05c      	b.n	8004804 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fa23 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800475e:	f002 fac1 	bl	8006ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004762:	f000 ff9d 	bl	80056a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004766:	f002 fa8d 	bl	8006c84 <vPortEnterCritical>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004770:	b25b      	sxtb	r3, r3
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d103      	bne.n	8004780 <xQueueGenericSend+0x16c>
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004786:	b25b      	sxtb	r3, r3
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d103      	bne.n	8004796 <xQueueGenericSend+0x182>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004796:	f002 faa5 	bl	8006ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800479a:	1d3a      	adds	r2, r7, #4
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fa12 	bl	8005bcc <xTaskCheckForTimeOut>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d124      	bne.n	80047f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b0:	f000 fcd2 	bl	8005158 <prvIsQueueFull>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	3310      	adds	r3, #16
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 f93a 	bl	8005a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ca:	f000 fc5d 	bl	8005088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047ce:	f000 ff75 	bl	80056bc <xTaskResumeAll>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f47f af7c 	bne.w	80046d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <xQueueGenericSend+0x1f8>)
 80047dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	e772      	b.n	80046d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ee:	f000 fc4b 	bl	8005088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047f2:	f000 ff63 	bl	80056bc <xTaskResumeAll>
 80047f6:	e76c      	b.n	80046d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fa:	f000 fc45 	bl	8005088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047fe:	f000 ff5d 	bl	80056bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004802:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004804:	4618      	mov	r0, r3
 8004806:	3738      	adds	r7, #56	; 0x38
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <xQueueGenericSendFromISR+0x3c>
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <xQueueGenericSendFromISR+0x40>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <xQueueGenericSendFromISR+0x42>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d103      	bne.n	800487a <xQueueGenericSendFromISR+0x6a>
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <xQueueGenericSendFromISR+0x6e>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <xQueueGenericSendFromISR+0x70>
 800487e:	2300      	movs	r3, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800489a:	f002 fad5 	bl	8006e48 <vPortValidateInterruptPriority>
	__asm volatile
 800489e:	f3ef 8211 	mrs	r2, BASEPRI
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fa      	str	r2, [r7, #28]
 80048b4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80048b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <xQueueGenericSendFromISR+0xbc>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d12f      	bne.n	800492c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048e2:	f000 fb41 	bl	8004f68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d112      	bne.n	8004916 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 f8ed 	bl	8005adc <xTaskRemoveFromEventList>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491a:	3301      	adds	r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b25a      	sxtb	r2, r3
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004926:	2301      	movs	r3, #1
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800492a:	e001      	b.n	8004930 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800492c:	2300      	movs	r3, #0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004932:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f383 8811 	msr	BASEPRI, r3
}
 800493a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800493c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800493e:	4618      	mov	r0, r3
 8004940:	3740      	adds	r7, #64	; 0x40
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b08e      	sub	sp, #56	; 0x38
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	623b      	str	r3, [r7, #32]
}
 800496c:	bf00      	nop
 800496e:	e7fe      	b.n	800496e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	61fb      	str	r3, [r7, #28]
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <xQueueGiveFromISR+0x58>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <xQueueGiveFromISR+0x5c>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <xQueueGiveFromISR+0x5e>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xQueueGiveFromISR+0x78>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61bb      	str	r3, [r7, #24]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049be:	f002 fa43 	bl	8006e48 <vPortValidateInterruptPriority>
	__asm volatile
 80049c2:	f3ef 8211 	mrs	r2, BASEPRI
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617a      	str	r2, [r7, #20]
 80049d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80049da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d22b      	bcs.n	8004a46 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d112      	bne.n	8004a30 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d016      	beq.n	8004a40 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	3324      	adds	r3, #36	; 0x24
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f860 	bl	8005adc <xTaskRemoveFromEventList>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00e      	beq.n	8004a40 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e007      	b.n	8004a40 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a34:	3301      	adds	r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	b25a      	sxtb	r2, r3
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a40:	2301      	movs	r3, #1
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
 8004a44:	e001      	b.n	8004a4a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f383 8811 	msr	BASEPRI, r3
}
 8004a54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3738      	adds	r7, #56	; 0x38
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	; 0x30
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <xQueueReceive+0x30>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	623b      	str	r3, [r7, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <xQueueReceive+0x3e>
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <xQueueReceive+0x42>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueReceive+0x44>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueReceive+0x5e>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	61fb      	str	r3, [r7, #28]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004abe:	f001 f9c9 	bl	8005e54 <xTaskGetSchedulerState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xQueueReceive+0x6e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueReceive+0x72>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueReceive+0x74>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <xQueueReceive+0x8e>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	61bb      	str	r3, [r7, #24]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aee:	f002 f8c9 	bl	8006c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01f      	beq.n	8004b3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b02:	f000 fa9b 	bl	800503c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00f      	beq.n	8004b36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	3310      	adds	r3, #16
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 ffde 	bl	8005adc <xTaskRemoveFromEventList>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b26:	4b3d      	ldr	r3, [pc, #244]	; (8004c1c <xQueueReceive+0x1bc>)
 8004b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b36:	f002 f8d5 	bl	8006ce4 <vPortExitCritical>
				return pdPASS;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e069      	b.n	8004c12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b44:	f002 f8ce 	bl	8006ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e062      	b.n	8004c12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b52:	f107 0310 	add.w	r3, r7, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 f822 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b60:	f002 f8c0 	bl	8006ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b64:	f000 fd9c 	bl	80056a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b68:	f002 f88c 	bl	8006c84 <vPortEnterCritical>
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d103      	bne.n	8004b82 <xQueueReceive+0x122>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d103      	bne.n	8004b98 <xQueueReceive+0x138>
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b98:	f002 f8a4 	bl	8006ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b9c:	1d3a      	adds	r2, r7, #4
 8004b9e:	f107 0310 	add.w	r3, r7, #16
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 f811 	bl	8005bcc <xTaskCheckForTimeOut>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d123      	bne.n	8004bf8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb2:	f000 fabb 	bl	800512c <prvIsQueueEmpty>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d017      	beq.n	8004bec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	3324      	adds	r3, #36	; 0x24
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 ff39 	bl	8005a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bcc:	f000 fa5c 	bl	8005088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bd0:	f000 fd74 	bl	80056bc <xTaskResumeAll>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d189      	bne.n	8004aee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <xQueueReceive+0x1bc>)
 8004bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	e780      	b.n	8004aee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bee:	f000 fa4b 	bl	8005088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf2:	f000 fd63 	bl	80056bc <xTaskResumeAll>
 8004bf6:	e77a      	b.n	8004aee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bfa:	f000 fa45 	bl	8005088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bfe:	f000 fd5d 	bl	80056bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c04:	f000 fa92 	bl	800512c <prvIsQueueEmpty>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f43f af6f 	beq.w	8004aee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3730      	adds	r7, #48	; 0x30
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08e      	sub	sp, #56	; 0x38
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	623b      	str	r3, [r7, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	61fb      	str	r3, [r7, #28]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c70:	f001 f8f0 	bl	8005e54 <xTaskGetSchedulerState>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <xQueueSemaphoreTake+0x60>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <xQueueSemaphoreTake+0x64>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <xQueueSemaphoreTake+0x66>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	61bb      	str	r3, [r7, #24]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ca0:	f001 fff0 	bl	8006c84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d024      	beq.n	8004cfa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cc0:	f001 fa70 	bl	80061a4 <pvTaskIncrementMutexHeldCount>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00f      	beq.n	8004cf2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 ff00 	bl	8005adc <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ce2:	4b54      	ldr	r3, [pc, #336]	; (8004e34 <xQueueSemaphoreTake+0x214>)
 8004ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cf2:	f001 fff7 	bl	8006ce4 <vPortExitCritical>
				return pdPASS;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e097      	b.n	8004e2a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	617b      	str	r3, [r7, #20]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d1c:	f001 ffe2 	bl	8006ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e082      	b.n	8004e2a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d2a:	f107 030c 	add.w	r3, r7, #12
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ff36 	bl	8005ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d38:	f001 ffd4 	bl	8006ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d3c:	f000 fcb0 	bl	80056a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d40:	f001 ffa0 	bl	8006c84 <vPortEnterCritical>
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d103      	bne.n	8004d5a <xQueueSemaphoreTake+0x13a>
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d103      	bne.n	8004d70 <xQueueSemaphoreTake+0x150>
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d70:	f001 ffb8 	bl	8006ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d74:	463a      	mov	r2, r7
 8004d76:	f107 030c 	add.w	r3, r7, #12
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 ff25 	bl	8005bcc <xTaskCheckForTimeOut>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d132      	bne.n	8004dee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d8a:	f000 f9cf 	bl	800512c <prvIsQueueEmpty>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d026      	beq.n	8004de2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004d9c:	f001 ff72 	bl	8006c84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 f873 	bl	8005e90 <xTaskPriorityInherit>
 8004daa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004dac:	f001 ff9a 	bl	8006ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	3324      	adds	r3, #36	; 0x24
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fe3f 	bl	8005a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dc0:	f000 f962 	bl	8005088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dc4:	f000 fc7a 	bl	80056bc <xTaskResumeAll>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f47f af68 	bne.w	8004ca0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <xQueueSemaphoreTake+0x214>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	e75e      	b.n	8004ca0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004de4:	f000 f950 	bl	8005088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004de8:	f000 fc68 	bl	80056bc <xTaskResumeAll>
 8004dec:	e758      	b.n	8004ca0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004df0:	f000 f94a 	bl	8005088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004df4:	f000 fc62 	bl	80056bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dfa:	f000 f997 	bl	800512c <prvIsQueueEmpty>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f43f af4d 	beq.w	8004ca0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e0c:	f001 ff3a 	bl	8006c84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e12:	f000 f891 	bl	8004f38 <prvGetDisinheritPriorityAfterTimeout>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f932 	bl	8006088 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e24:	f001 ff5e 	bl	8006ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3738      	adds	r7, #56	; 0x38
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08e      	sub	sp, #56	; 0x38
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	623b      	str	r3, [r7, #32]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <xQueueReceiveFromISR+0x3a>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <xQueueReceiveFromISR+0x3e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <xQueueReceiveFromISR+0x40>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	61fb      	str	r3, [r7, #28]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e92:	f001 ffd9 	bl	8006e48 <vPortValidateInterruptPriority>
	__asm volatile
 8004e96:	f3ef 8211 	mrs	r2, BASEPRI
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	61ba      	str	r2, [r7, #24]
 8004eac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004eae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d02f      	beq.n	8004f1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ecc:	f000 f8b6 	bl	800503c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	1e5a      	subs	r2, r3, #1
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d112      	bne.n	8004f08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	3310      	adds	r3, #16
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fdf4 	bl	8005adc <xTaskRemoveFromEventList>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00e      	beq.n	8004f18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00b      	beq.n	8004f18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e007      	b.n	8004f18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	b25a      	sxtb	r2, r3
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1c:	e001      	b.n	8004f22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f383 8811 	msr	BASEPRI, r3
}
 8004f2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3738      	adds	r7, #56	; 0x38
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f1c3 0307 	rsb	r3, r3, #7
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e001      	b.n	8004f5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10d      	bne.n	8004fa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d14d      	bne.n	800502a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fff2 	bl	8005f7c <xTaskPriorityDisinherit>
 8004f98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	609a      	str	r2, [r3, #8]
 8004fa0:	e043      	b.n	800502a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d119      	bne.n	8004fdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6858      	ldr	r0, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	f002 f9c6 	bl	8007344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	441a      	add	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d32b      	bcc.n	800502a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	e026      	b.n	800502a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68d8      	ldr	r0, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	f002 f9ac 	bl	8007344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	441a      	add	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d207      	bcs.n	8005018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	425b      	negs	r3, r3
 8005012:	441a      	add	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d105      	bne.n	800502a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3b01      	subs	r3, #1
 8005028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005032:	697b      	ldr	r3, [r7, #20]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d018      	beq.n	8005080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	441a      	add	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	d303      	bcc.n	8005070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68d9      	ldr	r1, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	461a      	mov	r2, r3
 800507a:	6838      	ldr	r0, [r7, #0]
 800507c:	f002 f962 	bl	8007344 <memcpy>
	}
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005090:	f001 fdf8 	bl	8006c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800509a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800509c:	e011      	b.n	80050c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3324      	adds	r3, #36	; 0x24
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fd16 	bl	8005adc <xTaskRemoveFromEventList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050b6:	f000 fdeb 	bl	8005c90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	3b01      	subs	r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dce9      	bgt.n	800509e <prvUnlockQueue+0x16>
 80050ca:	e000      	b.n	80050ce <prvUnlockQueue+0x46>
					break;
 80050cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	22ff      	movs	r2, #255	; 0xff
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050d6:	f001 fe05 	bl	8006ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050da:	f001 fdd3 	bl	8006c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050e6:	e011      	b.n	800510c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d012      	beq.n	8005116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3310      	adds	r3, #16
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fcf1 	bl	8005adc <xTaskRemoveFromEventList>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005100:	f000 fdc6 	bl	8005c90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	3b01      	subs	r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800510c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005110:	2b00      	cmp	r3, #0
 8005112:	dce9      	bgt.n	80050e8 <prvUnlockQueue+0x60>
 8005114:	e000      	b.n	8005118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	22ff      	movs	r2, #255	; 0xff
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005120:	f001 fde0 	bl	8006ce4 <vPortExitCritical>
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005134:	f001 fda6 	bl	8006c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d102      	bne.n	8005146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005140:	2301      	movs	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e001      	b.n	800514a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800514a:	f001 fdcb 	bl	8006ce4 <vPortExitCritical>

	return xReturn;
 800514e:	68fb      	ldr	r3, [r7, #12]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005160:	f001 fd90 	bl	8006c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	429a      	cmp	r2, r3
 800516e:	d102      	bne.n	8005176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e001      	b.n	800517a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800517a:	f001 fdb3 	bl	8006ce4 <vPortExitCritical>

	return xReturn;
 800517e:	68fb      	ldr	r3, [r7, #12]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e014      	b.n	80051c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005198:	4a0f      	ldr	r2, [pc, #60]	; (80051d8 <vQueueAddToRegistry+0x50>)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051a4:	490c      	ldr	r1, [pc, #48]	; (80051d8 <vQueueAddToRegistry+0x50>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <vQueueAddToRegistry+0x50>)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051ba:	e006      	b.n	80051ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3301      	adds	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b07      	cmp	r3, #7
 80051c6:	d9e7      	bls.n	8005198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	200008b8 	.word	0x200008b8

080051dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051ec:	f001 fd4a 	bl	8006c84 <vPortEnterCritical>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d103      	bne.n	8005206 <vQueueWaitForMessageRestricted+0x2a>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520c:	b25b      	sxtb	r3, r3
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d103      	bne.n	800521c <vQueueWaitForMessageRestricted+0x40>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521c:	f001 fd62 	bl	8006ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3324      	adds	r3, #36	; 0x24
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fc27 	bl	8005a84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7ff ff26 	bl	8005088 <prvUnlockQueue>
	}
 800523c:	bf00      	nop
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af04      	add	r7, sp, #16
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	623b      	str	r3, [r7, #32]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xTaskCreateStatic+0x46>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	61fb      	str	r3, [r7, #28]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800528a:	2354      	movs	r3, #84	; 0x54
 800528c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b54      	cmp	r3, #84	; 0x54
 8005292:	d00a      	beq.n	80052aa <xTaskCreateStatic+0x66>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61bb      	str	r3, [r7, #24]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01e      	beq.n	80052f0 <xTaskCreateStatic+0xac>
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ca:	2300      	movs	r3, #0
 80052cc:	9303      	str	r3, [sp, #12]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	f107 0314 	add.w	r3, r7, #20
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f850 	bl	8005388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ea:	f000 f8d5 	bl	8005498 <prvAddNewTaskToReadyList>
 80052ee:	e001      	b.n	80052f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052f4:	697b      	ldr	r3, [r7, #20]
	}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	; 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b08c      	sub	sp, #48	; 0x30
 8005302:	af04      	add	r7, sp, #16
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	603b      	str	r3, [r7, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4618      	mov	r0, r3
 8005314:	f001 fdd8 	bl	8006ec8 <pvPortMalloc>
 8005318:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005320:	2054      	movs	r0, #84	; 0x54
 8005322:	f001 fdd1 	bl	8006ec8 <pvPortMalloc>
 8005326:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
 8005334:	e005      	b.n	8005342 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f001 fe92 	bl	8007060 <vPortFree>
 800533c:	e001      	b.n	8005342 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d017      	beq.n	8005378 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	2300      	movs	r3, #0
 8005354:	9303      	str	r3, [sp, #12]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	9302      	str	r3, [sp, #8]
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f80e 	bl	8005388 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800536c:	69f8      	ldr	r0, [r7, #28]
 800536e:	f000 f893 	bl	8005498 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005372:	2301      	movs	r3, #1
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e002      	b.n	800537e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800537e:	69bb      	ldr	r3, [r7, #24]
	}
 8005380:	4618      	mov	r0, r3
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	3b01      	subs	r3, #1
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	617b      	str	r3, [r7, #20]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01f      	beq.n	8005416 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	e012      	b.n	8005402 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	7819      	ldrb	r1, [r3, #0]
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	3334      	adds	r3, #52	; 0x34
 80053ec:	460a      	mov	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2b0f      	cmp	r3, #15
 8005406:	d9e9      	bls.n	80053dc <prvInitialiseNewTask+0x54>
 8005408:	e000      	b.n	800540c <prvInitialiseNewTask+0x84>
			{
				break;
 800540a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005414:	e003      	b.n	800541e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b06      	cmp	r3, #6
 8005422:	d901      	bls.n	8005428 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005424:	2306      	movs	r3, #6
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2200      	movs	r2, #0
 8005438:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	3304      	adds	r3, #4
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe ff19 	bl	8004276 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	3318      	adds	r3, #24
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe ff14 	bl	8004276 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005452:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	f1c3 0207 	rsb	r2, r3, #7
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005462:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	2200      	movs	r2, #0
 8005468:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	68f9      	ldr	r1, [r7, #12]
 8005476:	69b8      	ldr	r0, [r7, #24]
 8005478:	f001 fada 	bl	8006a30 <pxPortInitialiseStack>
 800547c:	4602      	mov	r2, r0
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800548e:	bf00      	nop
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054a0:	f001 fbf0 	bl	8006c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054a4:	4b2a      	ldr	r3, [pc, #168]	; (8005550 <prvAddNewTaskToReadyList+0xb8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a29      	ldr	r2, [pc, #164]	; (8005550 <prvAddNewTaskToReadyList+0xb8>)
 80054ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054ae:	4b29      	ldr	r3, [pc, #164]	; (8005554 <prvAddNewTaskToReadyList+0xbc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054b6:	4a27      	ldr	r2, [pc, #156]	; (8005554 <prvAddNewTaskToReadyList+0xbc>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054bc:	4b24      	ldr	r3, [pc, #144]	; (8005550 <prvAddNewTaskToReadyList+0xb8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d110      	bne.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054c4:	f000 fc08 	bl	8005cd8 <prvInitialiseTaskLists>
 80054c8:	e00d      	b.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <prvAddNewTaskToReadyList+0xc0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054d2:	4b20      	ldr	r3, [pc, #128]	; (8005554 <prvAddNewTaskToReadyList+0xbc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d802      	bhi.n	80054e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054e0:	4a1c      	ldr	r2, [pc, #112]	; (8005554 <prvAddNewTaskToReadyList+0xbc>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054e6:	4b1d      	ldr	r3, [pc, #116]	; (800555c <prvAddNewTaskToReadyList+0xc4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <prvAddNewTaskToReadyList+0xc4>)
 80054ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	4b19      	ldr	r3, [pc, #100]	; (8005560 <prvAddNewTaskToReadyList+0xc8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	4a18      	ldr	r2, [pc, #96]	; (8005560 <prvAddNewTaskToReadyList+0xc8>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <prvAddNewTaskToReadyList+0xcc>)
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4610      	mov	r0, r2
 800551a:	f7fe feb9 	bl	8004290 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800551e:	f001 fbe1 	bl	8006ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <prvAddNewTaskToReadyList+0xc0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <prvAddNewTaskToReadyList+0xbc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	429a      	cmp	r2, r3
 8005536:	d207      	bcs.n	8005548 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <prvAddNewTaskToReadyList+0xd0>)
 800553a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005548:	bf00      	nop
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	200009f8 	.word	0x200009f8
 8005554:	200008f8 	.word	0x200008f8
 8005558:	20000a04 	.word	0x20000a04
 800555c:	20000a14 	.word	0x20000a14
 8005560:	20000a00 	.word	0x20000a00
 8005564:	200008fc 	.word	0x200008fc
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <vTaskDelay+0x60>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <vTaskDelay+0x30>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800559c:	f000 f880 	bl	80056a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055a0:	2100      	movs	r1, #0
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fe12 	bl	80061cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055a8:	f000 f888 	bl	80056bc <xTaskResumeAll>
 80055ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <vTaskDelay+0x64>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000a20 	.word	0x20000a20
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055e2:	463a      	mov	r2, r7
 80055e4:	1d39      	adds	r1, r7, #4
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fa ffce 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	9202      	str	r2, [sp, #8]
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	460a      	mov	r2, r1
 8005602:	4921      	ldr	r1, [pc, #132]	; (8005688 <vTaskStartScheduler+0xb4>)
 8005604:	4821      	ldr	r0, [pc, #132]	; (800568c <vTaskStartScheduler+0xb8>)
 8005606:	f7ff fe1d 	bl	8005244 <xTaskCreateStatic>
 800560a:	4603      	mov	r3, r0
 800560c:	4a20      	ldr	r2, [pc, #128]	; (8005690 <vTaskStartScheduler+0xbc>)
 800560e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005610:	4b1f      	ldr	r3, [pc, #124]	; (8005690 <vTaskStartScheduler+0xbc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e001      	b.n	8005622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d102      	bne.n	800562e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005628:	f000 fe36 	bl	8006298 <xTimerCreateTimerTask>
 800562c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d116      	bne.n	8005662 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
}
 8005646:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005648:	4b12      	ldr	r3, [pc, #72]	; (8005694 <vTaskStartScheduler+0xc0>)
 800564a:	f04f 32ff 	mov.w	r2, #4294967295
 800564e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005650:	4b11      	ldr	r3, [pc, #68]	; (8005698 <vTaskStartScheduler+0xc4>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <vTaskStartScheduler+0xc8>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800565c:	f001 fa70 	bl	8006b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005660:	e00e      	b.n	8005680 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d10a      	bne.n	8005680 <vTaskStartScheduler+0xac>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	60fb      	str	r3, [r7, #12]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <vTaskStartScheduler+0xaa>
}
 8005680:	bf00      	nop
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	08007ccc 	.word	0x08007ccc
 800568c:	08005ca9 	.word	0x08005ca9
 8005690:	20000a1c 	.word	0x20000a1c
 8005694:	20000a18 	.word	0x20000a18
 8005698:	20000a04 	.word	0x20000a04
 800569c:	200009fc 	.word	0x200009fc

080056a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <vTaskSuspendAll+0x18>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	4a03      	ldr	r2, [pc, #12]	; (80056b8 <vTaskSuspendAll+0x18>)
 80056ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056ae:	bf00      	nop
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	20000a20 	.word	0x20000a20

080056bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <xTaskResumeAll+0x114>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	603b      	str	r3, [r7, #0]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056e8:	f001 facc 	bl	8006c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056ec:	4b38      	ldr	r3, [pc, #224]	; (80057d0 <xTaskResumeAll+0x114>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	4a37      	ldr	r2, [pc, #220]	; (80057d0 <xTaskResumeAll+0x114>)
 80056f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f6:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <xTaskResumeAll+0x114>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d161      	bne.n	80057c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056fe:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <xTaskResumeAll+0x118>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d05d      	beq.n	80057c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005706:	e02e      	b.n	8005766 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005708:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <xTaskResumeAll+0x11c>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3318      	adds	r3, #24
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fe18 	bl	800434a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fe13 	bl	800434a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <xTaskResumeAll+0x120>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4313      	orrs	r3, r2
 8005732:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <xTaskResumeAll+0x120>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <xTaskResumeAll+0x124>)
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f7fe fd9f 	bl	8004290 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <xTaskResumeAll+0x128>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <xTaskResumeAll+0x12c>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005766:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <xTaskResumeAll+0x11c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1cc      	bne.n	8005708 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005774:	f000 fb4e 	bl	8005e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005778:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <xTaskResumeAll+0x130>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005784:	f000 f846 	bl	8005814 <xTaskIncrementTick>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800578e:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <xTaskResumeAll+0x12c>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f1      	bne.n	8005784 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <xTaskResumeAll+0x130>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <xTaskResumeAll+0x12c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <xTaskResumeAll+0x134>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057c2:	f001 fa8f 	bl	8006ce4 <vPortExitCritical>

	return xAlreadyYielded;
 80057c6:	68bb      	ldr	r3, [r7, #8]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000a20 	.word	0x20000a20
 80057d4:	200009f8 	.word	0x200009f8
 80057d8:	200009b8 	.word	0x200009b8
 80057dc:	20000a00 	.word	0x20000a00
 80057e0:	200008fc 	.word	0x200008fc
 80057e4:	200008f8 	.word	0x200008f8
 80057e8:	20000a0c 	.word	0x20000a0c
 80057ec:	20000a08 	.word	0x20000a08
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <xTaskGetTickCount+0x1c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005800:	687b      	ldr	r3, [r7, #4]
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	200009fc 	.word	0x200009fc

08005814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581e:	4b4e      	ldr	r3, [pc, #312]	; (8005958 <xTaskIncrementTick+0x144>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f040 808e 	bne.w	8005944 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005828:	4b4c      	ldr	r3, [pc, #304]	; (800595c <xTaskIncrementTick+0x148>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005830:	4a4a      	ldr	r2, [pc, #296]	; (800595c <xTaskIncrementTick+0x148>)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d120      	bne.n	800587e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800583c:	4b48      	ldr	r3, [pc, #288]	; (8005960 <xTaskIncrementTick+0x14c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <xTaskIncrementTick+0x48>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	603b      	str	r3, [r7, #0]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xTaskIncrementTick+0x46>
 800585c:	4b40      	ldr	r3, [pc, #256]	; (8005960 <xTaskIncrementTick+0x14c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	4b40      	ldr	r3, [pc, #256]	; (8005964 <xTaskIncrementTick+0x150>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3e      	ldr	r2, [pc, #248]	; (8005960 <xTaskIncrementTick+0x14c>)
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4a3e      	ldr	r2, [pc, #248]	; (8005964 <xTaskIncrementTick+0x150>)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <xTaskIncrementTick+0x154>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <xTaskIncrementTick+0x154>)
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	f000 facb 	bl	8005e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800587e:	4b3b      	ldr	r3, [pc, #236]	; (800596c <xTaskIncrementTick+0x158>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	429a      	cmp	r2, r3
 8005886:	d348      	bcc.n	800591a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005888:	4b35      	ldr	r3, [pc, #212]	; (8005960 <xTaskIncrementTick+0x14c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005892:	4b36      	ldr	r3, [pc, #216]	; (800596c <xTaskIncrementTick+0x158>)
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	601a      	str	r2, [r3, #0]
					break;
 800589a:	e03e      	b.n	800591a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800589c:	4b30      	ldr	r3, [pc, #192]	; (8005960 <xTaskIncrementTick+0x14c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d203      	bcs.n	80058bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058b4:	4a2d      	ldr	r2, [pc, #180]	; (800596c <xTaskIncrementTick+0x158>)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058ba:	e02e      	b.n	800591a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	3304      	adds	r3, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe fd42 	bl	800434a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3318      	adds	r3, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fd39 	bl	800434a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	2201      	movs	r2, #1
 80058de:	409a      	lsls	r2, r3
 80058e0:	4b23      	ldr	r3, [pc, #140]	; (8005970 <xTaskIncrementTick+0x15c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	4a22      	ldr	r2, [pc, #136]	; (8005970 <xTaskIncrementTick+0x15c>)
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <xTaskIncrementTick+0x160>)
 80058f8:	441a      	add	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f7fe fcc5 	bl	8004290 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590a:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <xTaskIncrementTick+0x164>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d3b9      	bcc.n	8005888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005918:	e7b6      	b.n	8005888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <xTaskIncrementTick+0x164>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	4914      	ldr	r1, [pc, #80]	; (8005974 <xTaskIncrementTick+0x160>)
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d901      	bls.n	8005936 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005932:	2301      	movs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <xTaskIncrementTick+0x168>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800593e:	2301      	movs	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e004      	b.n	800594e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <xTaskIncrementTick+0x16c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <xTaskIncrementTick+0x16c>)
 800594c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800594e:	697b      	ldr	r3, [r7, #20]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000a20 	.word	0x20000a20
 800595c:	200009fc 	.word	0x200009fc
 8005960:	200009b0 	.word	0x200009b0
 8005964:	200009b4 	.word	0x200009b4
 8005968:	20000a10 	.word	0x20000a10
 800596c:	20000a18 	.word	0x20000a18
 8005970:	20000a00 	.word	0x20000a00
 8005974:	200008fc 	.word	0x200008fc
 8005978:	200008f8 	.word	0x200008f8
 800597c:	20000a0c 	.word	0x20000a0c
 8005980:	20000a08 	.word	0x20000a08

08005984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800598a:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <vTaskSwitchContext+0xa4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <vTaskSwitchContext+0xa8>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005998:	e03f      	b.n	8005a1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <vTaskSwitchContext+0xa8>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a0:	4b23      	ldr	r3, [pc, #140]	; (8005a30 <vTaskSwitchContext+0xac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	fab3 f383 	clz	r3, r3
 80059ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	f1c3 031f 	rsb	r3, r3, #31
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	491f      	ldr	r1, [pc, #124]	; (8005a34 <vTaskSwitchContext+0xb0>)
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	607b      	str	r3, [r7, #4]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <vTaskSwitchContext+0x5a>
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <vTaskSwitchContext+0xb0>)
 80059ec:	4413      	add	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3308      	adds	r3, #8
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d104      	bne.n	8005a10 <vTaskSwitchContext+0x8c>
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <vTaskSwitchContext+0xb4>)
 8005a18:	6013      	str	r3, [r2, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000a20 	.word	0x20000a20
 8005a2c:	20000a0c 	.word	0x20000a0c
 8005a30:	20000a00 	.word	0x20000a00
 8005a34:	200008fc 	.word	0x200008fc
 8005a38:	200008f8 	.word	0x200008f8

08005a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <vTaskPlaceOnEventList+0x44>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3318      	adds	r3, #24
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fe fc34 	bl	80042d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a70:	2101      	movs	r1, #1
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	f000 fbaa 	bl	80061cc <prvAddCurrentTaskToDelayedList>
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	200008f8 	.word	0x200008f8

08005a84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	617b      	str	r3, [r7, #20]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3318      	adds	r3, #24
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7fe fbeb 	bl	8004290 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68b8      	ldr	r0, [r7, #8]
 8005aca:	f000 fb7f 	bl	80061cc <prvAddCurrentTaskToDelayedList>
	}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200008f8 	.word	0x200008f8

08005adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60fb      	str	r3, [r7, #12]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fc1c 	bl	800434a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b12:	4b1d      	ldr	r3, [pc, #116]	; (8005b88 <xTaskRemoveFromEventList+0xac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d11c      	bne.n	8005b54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fc13 	bl	800434a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <xTaskRemoveFromEventList+0xb0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <xTaskRemoveFromEventList+0xb0>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <xTaskRemoveFromEventList+0xb4>)
 8005b44:	441a      	add	r2, r3
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f7fe fb9f 	bl	8004290 <vListInsertEnd>
 8005b52:	e005      	b.n	8005b60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	3318      	adds	r3, #24
 8005b58:	4619      	mov	r1, r3
 8005b5a:	480e      	ldr	r0, [pc, #56]	; (8005b94 <xTaskRemoveFromEventList+0xb8>)
 8005b5c:	f7fe fb98 	bl	8004290 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <xTaskRemoveFromEventList+0xbc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d905      	bls.n	8005b7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <xTaskRemoveFromEventList+0xc0>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e001      	b.n	8005b7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000a20 	.word	0x20000a20
 8005b8c:	20000a00 	.word	0x20000a00
 8005b90:	200008fc 	.word	0x200008fc
 8005b94:	200009b8 	.word	0x200009b8
 8005b98:	200008f8 	.word	0x200008f8
 8005b9c:	20000a0c 	.word	0x20000a0c

08005ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <vTaskInternalSetTimeOutState+0x24>)
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <vTaskInternalSetTimeOutState+0x28>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000a10 	.word	0x20000a10
 8005bc8:	200009fc 	.word	0x200009fc

08005bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c0e:	f001 f839 	bl	8006c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <xTaskCheckForTimeOut+0xbc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2a:	d102      	bne.n	8005c32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e023      	b.n	8005c7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <xTaskCheckForTimeOut+0xc0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d007      	beq.n	8005c4e <xTaskCheckForTimeOut+0x82>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e015      	b.n	8005c7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d20b      	bcs.n	8005c70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ff9b 	bl	8005ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	e004      	b.n	8005c7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c7a:	f001 f833 	bl	8006ce4 <vPortExitCritical>

	return xReturn;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	200009fc 	.word	0x200009fc
 8005c8c:	20000a10 	.word	0x20000a10

08005c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <vTaskMissedYield+0x14>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
}
 8005c9a:	bf00      	nop
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	20000a0c 	.word	0x20000a0c

08005ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cb0:	f000 f852 	bl	8005d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <prvIdleTask+0x28>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d9f9      	bls.n	8005cb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <prvIdleTask+0x2c>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ccc:	e7f0      	b.n	8005cb0 <prvIdleTask+0x8>
 8005cce:	bf00      	nop
 8005cd0:	200008fc 	.word	0x200008fc
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	e00c      	b.n	8005cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <prvInitialiseTaskLists+0x60>)
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe fa9f 	bl	8004236 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	607b      	str	r3, [r7, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d9ef      	bls.n	8005ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d04:	480d      	ldr	r0, [pc, #52]	; (8005d3c <prvInitialiseTaskLists+0x64>)
 8005d06:	f7fe fa96 	bl	8004236 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d0a:	480d      	ldr	r0, [pc, #52]	; (8005d40 <prvInitialiseTaskLists+0x68>)
 8005d0c:	f7fe fa93 	bl	8004236 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <prvInitialiseTaskLists+0x6c>)
 8005d12:	f7fe fa90 	bl	8004236 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d16:	480c      	ldr	r0, [pc, #48]	; (8005d48 <prvInitialiseTaskLists+0x70>)
 8005d18:	f7fe fa8d 	bl	8004236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d1c:	480b      	ldr	r0, [pc, #44]	; (8005d4c <prvInitialiseTaskLists+0x74>)
 8005d1e:	f7fe fa8a 	bl	8004236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvInitialiseTaskLists+0x78>)
 8005d24:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <prvInitialiseTaskLists+0x64>)
 8005d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <prvInitialiseTaskLists+0x7c>)
 8005d2a:	4a05      	ldr	r2, [pc, #20]	; (8005d40 <prvInitialiseTaskLists+0x68>)
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	200008fc 	.word	0x200008fc
 8005d3c:	20000988 	.word	0x20000988
 8005d40:	2000099c 	.word	0x2000099c
 8005d44:	200009b8 	.word	0x200009b8
 8005d48:	200009cc 	.word	0x200009cc
 8005d4c:	200009e4 	.word	0x200009e4
 8005d50:	200009b0 	.word	0x200009b0
 8005d54:	200009b4 	.word	0x200009b4

08005d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d5e:	e019      	b.n	8005d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d60:	f000 ff90 	bl	8006c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d64:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <prvCheckTasksWaitingTermination+0x50>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe faea 	bl	800434a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <prvCheckTasksWaitingTermination+0x54>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	4a0b      	ldr	r2, [pc, #44]	; (8005dac <prvCheckTasksWaitingTermination+0x54>)
 8005d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <prvCheckTasksWaitingTermination+0x58>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <prvCheckTasksWaitingTermination+0x58>)
 8005d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d8a:	f000 ffab 	bl	8006ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f810 	bl	8005db4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <prvCheckTasksWaitingTermination+0x58>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e1      	bne.n	8005d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	200009cc 	.word	0x200009cc
 8005dac:	200009f8 	.word	0x200009f8
 8005db0:	200009e0 	.word	0x200009e0

08005db4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f948 	bl	8007060 <vPortFree>
				vPortFree( pxTCB );
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 f945 	bl	8007060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dd6:	e018      	b.n	8005e0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d103      	bne.n	8005dea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 f93c 	bl	8007060 <vPortFree>
	}
 8005de8:	e00f      	b.n	8005e0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d00a      	beq.n	8005e0a <prvDeleteTCB+0x56>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60fb      	str	r3, [r7, #12]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <prvDeleteTCB+0x54>
	}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvResetNextTaskUnblockTime+0x38>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <prvResetNextTaskUnblockTime+0x3c>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e2c:	e008      	b.n	8005e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <prvResetNextTaskUnblockTime+0x38>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a04      	ldr	r2, [pc, #16]	; (8005e50 <prvResetNextTaskUnblockTime+0x3c>)
 8005e3e:	6013      	str	r3, [r2, #0]
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	200009b0 	.word	0x200009b0
 8005e50:	20000a18 	.word	0x20000a18

08005e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <xTaskGetSchedulerState+0x34>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e62:	2301      	movs	r3, #1
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	e008      	b.n	8005e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <xTaskGetSchedulerState+0x38>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e70:	2302      	movs	r3, #2
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	e001      	b.n	8005e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e76:	2300      	movs	r3, #0
 8005e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e7a:	687b      	ldr	r3, [r7, #4]
	}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000a04 	.word	0x20000a04
 8005e8c:	20000a20 	.word	0x20000a20

08005e90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d05e      	beq.n	8005f64 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <xTaskPriorityInherit+0xe0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d24e      	bcs.n	8005f52 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	db06      	blt.n	8005eca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <xTaskPriorityInherit+0xe0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f1c3 0207 	rsb	r2, r3, #7
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6959      	ldr	r1, [r3, #20]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <xTaskPriorityInherit+0xe4>)
 8005edc:	4413      	add	r3, r2
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d12f      	bne.n	8005f42 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fa2f 	bl	800434a <uxListRemove>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43da      	mvns	r2, r3
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <xTaskPriorityInherit+0xe8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4013      	ands	r3, r2
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <xTaskPriorityInherit+0xe8>)
 8005f06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f08:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <xTaskPriorityInherit+0xe0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <xTaskPriorityInherit+0xe8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <xTaskPriorityInherit+0xe8>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <xTaskPriorityInherit+0xe4>)
 8005f32:	441a      	add	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fe f9a8 	bl	8004290 <vListInsertEnd>
 8005f40:	e004      	b.n	8005f4c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <xTaskPriorityInherit+0xe0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e008      	b.n	8005f64 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f56:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <xTaskPriorityInherit+0xe0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d201      	bcs.n	8005f64 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f64:	68fb      	ldr	r3, [r7, #12]
	}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200008f8 	.word	0x200008f8
 8005f74:	200008fc 	.word	0x200008fc
 8005f78:	20000a00 	.word	0x20000a00

08005f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d06e      	beq.n	8006070 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f92:	4b3a      	ldr	r3, [pc, #232]	; (800607c <xTaskPriorityDisinherit+0x100>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d00a      	beq.n	8005fb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d044      	beq.n	8006070 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d140      	bne.n	8006070 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe f9a9 	bl	800434a <uxListRemove>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d115      	bne.n	800602a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006002:	491f      	ldr	r1, [pc, #124]	; (8006080 <xTaskPriorityDisinherit+0x104>)
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xTaskPriorityDisinherit+0xae>
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	2201      	movs	r2, #1
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43da      	mvns	r2, r3
 8006020:	4b18      	ldr	r3, [pc, #96]	; (8006084 <xTaskPriorityDisinherit+0x108>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4013      	ands	r3, r2
 8006026:	4a17      	ldr	r2, [pc, #92]	; (8006084 <xTaskPriorityDisinherit+0x108>)
 8006028:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	f1c3 0207 	rsb	r2, r3, #7
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	2201      	movs	r2, #1
 8006044:	409a      	lsls	r2, r3
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <xTaskPriorityDisinherit+0x108>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4313      	orrs	r3, r2
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <xTaskPriorityDisinherit+0x108>)
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4a08      	ldr	r2, [pc, #32]	; (8006080 <xTaskPriorityDisinherit+0x104>)
 800605e:	441a      	add	r2, r3
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe f912 	bl	8004290 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006070:	697b      	ldr	r3, [r7, #20]
	}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200008f8 	.word	0x200008f8
 8006080:	200008fc 	.word	0x200008fc
 8006084:	20000a00 	.word	0x20000a00

08006088 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006096:	2301      	movs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d077      	beq.n	8006190 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	60fb      	str	r3, [r7, #12]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d902      	bls.n	80060ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e002      	b.n	80060d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d058      	beq.n	8006190 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d153      	bne.n	8006190 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80060e8:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d10a      	bne.n	8006108 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60bb      	str	r3, [r7, #8]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	db04      	blt.n	8006126 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f1c3 0207 	rsb	r2, r3, #7
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	6959      	ldr	r1, [r3, #20]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006136:	4413      	add	r3, r2
 8006138:	4299      	cmp	r1, r3
 800613a:	d129      	bne.n	8006190 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	3304      	adds	r3, #4
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe f902 	bl	800434a <uxListRemove>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	2201      	movs	r2, #1
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43da      	mvns	r2, r3
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4013      	ands	r3, r2
 800615e:	4a10      	ldr	r2, [pc, #64]	; (80061a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006160:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	2201      	movs	r2, #1
 8006168:	409a      	lsls	r2, r3
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4313      	orrs	r3, r2
 8006170:	4a0b      	ldr	r2, [pc, #44]	; (80061a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4a06      	ldr	r2, [pc, #24]	; (800619c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006182:	441a      	add	r2, r3
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3304      	adds	r3, #4
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f7fe f880 	bl	8004290 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006190:	bf00      	nop
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200008f8 	.word	0x200008f8
 800619c:	200008fc 	.word	0x200008fc
 80061a0:	20000a00 	.word	0x20000a00

080061a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061b6:	3201      	adds	r2, #1
 80061b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80061ba:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80061bc:	681b      	ldr	r3, [r3, #0]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	200008f8 	.word	0x200008f8

080061cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061d6:	4b29      	ldr	r3, [pc, #164]	; (800627c <prvAddCurrentTaskToDelayedList+0xb0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061dc:	4b28      	ldr	r3, [pc, #160]	; (8006280 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe f8b1 	bl	800434a <uxListRemove>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	2201      	movs	r2, #1
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43da      	mvns	r2, r3
 80061fc:	4b21      	ldr	r3, [pc, #132]	; (8006284 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4013      	ands	r3, r2
 8006202:	4a20      	ldr	r2, [pc, #128]	; (8006284 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006204:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620c:	d10a      	bne.n	8006224 <prvAddCurrentTaskToDelayedList+0x58>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	481a      	ldr	r0, [pc, #104]	; (8006288 <prvAddCurrentTaskToDelayedList+0xbc>)
 800621e:	f7fe f837 	bl	8004290 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006222:	e026      	b.n	8006272 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4413      	add	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800622c:	4b14      	ldr	r3, [pc, #80]	; (8006280 <prvAddCurrentTaskToDelayedList+0xb4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	429a      	cmp	r2, r3
 800623a:	d209      	bcs.n	8006250 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <prvAddCurrentTaskToDelayedList+0xc0>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fe f845 	bl	80042d8 <vListInsert>
}
 800624e:	e010      	b.n	8006272 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3304      	adds	r3, #4
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f7fe f83b 	bl	80042d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006262:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	d202      	bcs.n	8006272 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800626c:	4a09      	ldr	r2, [pc, #36]	; (8006294 <prvAddCurrentTaskToDelayedList+0xc8>)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6013      	str	r3, [r2, #0]
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200009fc 	.word	0x200009fc
 8006280:	200008f8 	.word	0x200008f8
 8006284:	20000a00 	.word	0x20000a00
 8006288:	200009e4 	.word	0x200009e4
 800628c:	200009b4 	.word	0x200009b4
 8006290:	200009b0 	.word	0x200009b0
 8006294:	20000a18 	.word	0x20000a18

08006298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062a2:	f000 fb85 	bl	80069b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062a6:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <xTimerCreateTimerTask+0x80>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d021      	beq.n	80062f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062b6:	1d3a      	adds	r2, r7, #4
 80062b8:	f107 0108 	add.w	r1, r7, #8
 80062bc:	f107 030c 	add.w	r3, r7, #12
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fa f97d 	bl	80005c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	9202      	str	r2, [sp, #8]
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	2302      	movs	r3, #2
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	2300      	movs	r3, #0
 80062d6:	460a      	mov	r2, r1
 80062d8:	4910      	ldr	r1, [pc, #64]	; (800631c <xTimerCreateTimerTask+0x84>)
 80062da:	4811      	ldr	r0, [pc, #68]	; (8006320 <xTimerCreateTimerTask+0x88>)
 80062dc:	f7fe ffb2 	bl	8005244 <xTaskCreateStatic>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <xTimerCreateTimerTask+0x8c>)
 80062e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <xTimerCreateTimerTask+0x8c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062ee:	2301      	movs	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	613b      	str	r3, [r7, #16]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800630e:	697b      	ldr	r3, [r7, #20]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000a54 	.word	0x20000a54
 800631c:	08007cd4 	.word	0x08007cd4
 8006320:	08006591 	.word	0x08006591
 8006324:	20000a58 	.word	0x20000a58

08006328 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006336:	2028      	movs	r0, #40	; 0x28
 8006338:	f000 fdc6 	bl	8006ec8 <pvPortMalloc>
 800633c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f843 	bl	80063e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006360:	697b      	ldr	r3, [r7, #20]
	}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800636a:	b580      	push	{r7, lr}
 800636c:	b08a      	sub	sp, #40	; 0x28
 800636e:	af02      	add	r7, sp, #8
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006378:	2328      	movs	r3, #40	; 0x28
 800637a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b28      	cmp	r3, #40	; 0x28
 8006380:	d00a      	beq.n	8006398 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	61bb      	str	r3, [r7, #24]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006398:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xTimerCreateStatic+0x4c>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	617b      	str	r3, [r7, #20]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00d      	beq.n	80063dc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f805 	bl	80063e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80063dc:	69fb      	ldr	r3, [r7, #28]
	}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b086      	sub	sp, #24
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	617b      	str	r3, [r7, #20]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01e      	beq.n	8006454 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006416:	f000 facb 	bl	80069b0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	3304      	adds	r3, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd ff1d 	bl	8004276 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006448:	f043 0304 	orr.w	r3, r3, #4
 800644c:	b2da      	uxtb	r2, r3
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	623b      	str	r3, [r7, #32]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <xTimerGenericCommand+0x98>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d02a      	beq.n	80064e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	dc18      	bgt.n	80064d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064a4:	f7ff fcd6 	bl	8005e54 <xTaskGetSchedulerState>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d109      	bne.n	80064c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <xTimerGenericCommand+0x98>)
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	f107 0114 	add.w	r1, r7, #20
 80064b6:	2300      	movs	r3, #0
 80064b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ba:	f7fe f8ab 	bl	8004614 <xQueueGenericSend>
 80064be:	6278      	str	r0, [r7, #36]	; 0x24
 80064c0:	e012      	b.n	80064e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80064c2:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <xTimerGenericCommand+0x98>)
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f107 0114 	add.w	r1, r7, #20
 80064ca:	2300      	movs	r3, #0
 80064cc:	2200      	movs	r2, #0
 80064ce:	f7fe f8a1 	bl	8004614 <xQueueGenericSend>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24
 80064d4:	e008      	b.n	80064e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <xTimerGenericCommand+0x98>)
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	f107 0114 	add.w	r1, r7, #20
 80064de:	2300      	movs	r3, #0
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	f7fe f995 	bl	8004810 <xQueueGenericSendFromISR>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3728      	adds	r7, #40	; 0x28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000a54 	.word	0x20000a54

080064f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006502:	4b22      	ldr	r3, [pc, #136]	; (800658c <prvProcessExpiredTimer+0x94>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	3304      	adds	r3, #4
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd ff1a 	bl	800434a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d022      	beq.n	800656a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	18d1      	adds	r1, r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	6978      	ldr	r0, [r7, #20]
 8006532:	f000 f8d1 	bl	80066d8 <prvInsertTimerInActiveList>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01f      	beq.n	800657c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800653c:	2300      	movs	r3, #0
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	2100      	movs	r1, #0
 8006546:	6978      	ldr	r0, [r7, #20]
 8006548:	f7ff ff88 	bl	800645c <xTimerGenericCommand>
 800654c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d113      	bne.n	800657c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60fb      	str	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	6978      	ldr	r0, [r7, #20]
 8006582:	4798      	blx	r3
}
 8006584:	bf00      	nop
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000a4c 	.word	0x20000a4c

08006590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006598:	f107 0308 	add.w	r3, r7, #8
 800659c:	4618      	mov	r0, r3
 800659e:	f000 f857 	bl	8006650 <prvGetNextExpireTime>
 80065a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4619      	mov	r1, r3
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f803 	bl	80065b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065ae:	f000 f8d5 	bl	800675c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065b2:	e7f1      	b.n	8006598 <prvTimerTask+0x8>

080065b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065be:	f7ff f86f 	bl	80056a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f866 	bl	8006698 <prvSampleTimeNow>
 80065cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d130      	bne.n	8006636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <prvProcessTimerOrBlockTask+0x3c>
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d806      	bhi.n	80065f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80065e2:	f7ff f86b 	bl	80056bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff85 	bl	80064f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80065ee:	e024      	b.n	800663a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <prvProcessTimerOrBlockTask+0x90>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <prvProcessTimerOrBlockTask+0x50>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <prvProcessTimerOrBlockTask+0x52>
 8006604:	2300      	movs	r3, #0
 8006606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <prvProcessTimerOrBlockTask+0x94>)
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	4619      	mov	r1, r3
 8006616:	f7fe fde1 	bl	80051dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800661a:	f7ff f84f 	bl	80056bc <xTaskResumeAll>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006624:	4b09      	ldr	r3, [pc, #36]	; (800664c <prvProcessTimerOrBlockTask+0x98>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
}
 8006634:	e001      	b.n	800663a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006636:	f7ff f841 	bl	80056bc <xTaskResumeAll>
}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000a50 	.word	0x20000a50
 8006648:	20000a54 	.word	0x20000a54
 800664c:	e000ed04 	.word	0xe000ed04

08006650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <prvGetNextExpireTime+0x44>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <prvGetNextExpireTime+0x16>
 8006662:	2201      	movs	r2, #1
 8006664:	e000      	b.n	8006668 <prvGetNextExpireTime+0x18>
 8006666:	2200      	movs	r2, #0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <prvGetNextExpireTime+0x44>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e001      	b.n	8006684 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000a4c 	.word	0x20000a4c

08006698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066a0:	f7ff f8a8 	bl	80057f4 <xTaskGetTickCount>
 80066a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <prvSampleTimeNow+0x3c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d205      	bcs.n	80066bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066b0:	f000 f91a 	bl	80068e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e002      	b.n	80066c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80066c2:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvSampleTimeNow+0x3c>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80066c8:	68fb      	ldr	r3, [r7, #12]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000a5c 	.word	0x20000a5c

080066d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d812      	bhi.n	8006724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e01b      	b.n	800674a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <prvInsertTimerInActiveList+0x7c>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7fd fddb 	bl	80042d8 <vListInsert>
 8006722:	e012      	b.n	800674a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d206      	bcs.n	800673a <prvInsertTimerInActiveList+0x62>
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d302      	bcc.n	800673a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e007      	b.n	800674a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <prvInsertTimerInActiveList+0x80>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fd fdc7 	bl	80042d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800674a:	697b      	ldr	r3, [r7, #20]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000a50 	.word	0x20000a50
 8006758:	20000a4c 	.word	0x20000a4c

0800675c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	; 0x30
 8006760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006762:	e0ae      	b.n	80068c2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f2c0 80ab 	blt.w	80068c2 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	3304      	adds	r3, #4
 800677c:	4618      	mov	r0, r3
 800677e:	f7fd fde4 	bl	800434a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006782:	1d3b      	adds	r3, r7, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff ff87 	bl	8006698 <prvSampleTimeNow>
 800678a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b09      	cmp	r3, #9
 8006790:	f200 8096 	bhi.w	80068c0 <prvProcessReceivedCommands+0x164>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <prvProcessReceivedCommands+0x40>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067c5 	.word	0x080067c5
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067c5 	.word	0x080067c5
 80067a8:	08006839 	.word	0x08006839
 80067ac:	0800684d 	.word	0x0800684d
 80067b0:	08006897 	.word	0x08006897
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067c5 	.word	0x080067c5
 80067bc:	08006839 	.word	0x08006839
 80067c0:	0800684d 	.word	0x0800684d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067ca:	f043 0301 	orr.w	r3, r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	18d1      	adds	r1, r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a3a      	ldr	r2, [r7, #32]
 80067e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067e4:	f7ff ff78 	bl	80066d8 <prvInsertTimerInActiveList>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d069      	beq.n	80068c2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d05e      	beq.n	80068c2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	441a      	add	r2, r3
 800680c:	2300      	movs	r3, #0
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	2300      	movs	r3, #0
 8006812:	2100      	movs	r1, #0
 8006814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006816:	f7ff fe21 	bl	800645c <xTimerGenericCommand>
 800681a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d14f      	bne.n	80068c2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61bb      	str	r3, [r7, #24]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800684a:	e03a      	b.n	80068c2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	617b      	str	r3, [r7, #20]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	18d1      	adds	r1, r2, r3
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	6a3a      	ldr	r2, [r7, #32]
 800688e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006890:	f7ff ff22 	bl	80066d8 <prvInsertTimerInActiveList>
					break;
 8006894:	e015      	b.n	80068c2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80068a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a6:	f000 fbdb 	bl	8007060 <vPortFree>
 80068aa:	e00a      	b.n	80068c2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068be:	e000      	b.n	80068c2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80068c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068c2:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <prvProcessReceivedCommands+0x188>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f107 0108 	add.w	r1, r7, #8
 80068ca:	2200      	movs	r2, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe f8c7 	bl	8004a60 <xQueueReceive>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f af45 	bne.w	8006764 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	3728      	adds	r7, #40	; 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000a54 	.word	0x20000a54

080068e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ee:	e048      	b.n	8006982 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068f0:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <prvSwitchTimerLists+0xc0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fa:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <prvSwitchTimerLists+0xc0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7fd fd1e 	bl	800434a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02e      	beq.n	8006982 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4413      	add	r3, r2
 800692c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	429a      	cmp	r2, r3
 8006934:	d90e      	bls.n	8006954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <prvSwitchTimerLists+0xc0>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f7fd fcc3 	bl	80042d8 <vListInsert>
 8006952:	e016      	b.n	8006982 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006954:	2300      	movs	r3, #0
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2300      	movs	r3, #0
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	2100      	movs	r1, #0
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff fd7c 	bl	800645c <xTimerGenericCommand>
 8006964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	603b      	str	r3, [r7, #0]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <prvSwitchTimerLists+0xc0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1b1      	bne.n	80068f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <prvSwitchTimerLists+0xc0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <prvSwitchTimerLists+0xc4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a04      	ldr	r2, [pc, #16]	; (80069a8 <prvSwitchTimerLists+0xc0>)
 8006998:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800699a:	4a04      	ldr	r2, [pc, #16]	; (80069ac <prvSwitchTimerLists+0xc4>)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	6013      	str	r3, [r2, #0]
}
 80069a0:	bf00      	nop
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000a4c 	.word	0x20000a4c
 80069ac:	20000a50 	.word	0x20000a50

080069b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069b6:	f000 f965 	bl	8006c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069ba:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <prvCheckForValidListAndQueue+0x60>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d120      	bne.n	8006a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069c2:	4814      	ldr	r0, [pc, #80]	; (8006a14 <prvCheckForValidListAndQueue+0x64>)
 80069c4:	f7fd fc37 	bl	8004236 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069c8:	4813      	ldr	r0, [pc, #76]	; (8006a18 <prvCheckForValidListAndQueue+0x68>)
 80069ca:	f7fd fc34 	bl	8004236 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <prvCheckForValidListAndQueue+0x6c>)
 80069d0:	4a10      	ldr	r2, [pc, #64]	; (8006a14 <prvCheckForValidListAndQueue+0x64>)
 80069d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <prvCheckForValidListAndQueue+0x70>)
 80069d6:	4a10      	ldr	r2, [pc, #64]	; (8006a18 <prvCheckForValidListAndQueue+0x68>)
 80069d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <prvCheckForValidListAndQueue+0x74>)
 80069e0:	4a11      	ldr	r2, [pc, #68]	; (8006a28 <prvCheckForValidListAndQueue+0x78>)
 80069e2:	210c      	movs	r1, #12
 80069e4:	200a      	movs	r0, #10
 80069e6:	f7fd fd43 	bl	8004470 <xQueueGenericCreateStatic>
 80069ea:	4603      	mov	r3, r0
 80069ec:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <prvCheckForValidListAndQueue+0x60>)
 80069ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <prvCheckForValidListAndQueue+0x60>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <prvCheckForValidListAndQueue+0x60>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	490b      	ldr	r1, [pc, #44]	; (8006a2c <prvCheckForValidListAndQueue+0x7c>)
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fbc2 	bl	8005188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a04:	f000 f96e 	bl	8006ce4 <vPortExitCritical>
}
 8006a08:	bf00      	nop
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000a54 	.word	0x20000a54
 8006a14:	20000a24 	.word	0x20000a24
 8006a18:	20000a38 	.word	0x20000a38
 8006a1c:	20000a4c 	.word	0x20000a4c
 8006a20:	20000a50 	.word	0x20000a50
 8006a24:	20000ad8 	.word	0x20000ad8
 8006a28:	20000a60 	.word	0x20000a60
 8006a2c:	08007cdc 	.word	0x08007cdc

08006a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3b04      	subs	r3, #4
 8006a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3b04      	subs	r3, #4
 8006a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f023 0201 	bic.w	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3b04      	subs	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a60:	4a0c      	ldr	r2, [pc, #48]	; (8006a94 <pxPortInitialiseStack+0x64>)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b14      	subs	r3, #20
 8006a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3b04      	subs	r3, #4
 8006a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f06f 0202 	mvn.w	r2, #2
 8006a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b20      	subs	r3, #32
 8006a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	08006a99 	.word	0x08006a99

08006a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <prvTaskExitError+0x54>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d00a      	beq.n	8006ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <prvTaskExitError+0x28>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60bb      	str	r3, [r7, #8]
}
 8006ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ad6:	bf00      	nop
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0fc      	beq.n	8006ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	2000000c 	.word	0x2000000c

08006af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <pxCurrentTCBConst2>)
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	f380 8809 	msr	PSP, r0
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8811 	msr	BASEPRI, r0
 8006b0a:	4770      	bx	lr
 8006b0c:	f3af 8000 	nop.w

08006b10 <pxCurrentTCBConst2>:
 8006b10:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b18:	4808      	ldr	r0, [pc, #32]	; (8006b3c <prvPortStartFirstTask+0x24>)
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	6800      	ldr	r0, [r0, #0]
 8006b1e:	f380 8808 	msr	MSP, r0
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8814 	msr	CONTROL, r0
 8006b2a:	b662      	cpsie	i
 8006b2c:	b661      	cpsie	f
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	df00      	svc	0
 8006b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b3a:	bf00      	nop
 8006b3c:	e000ed08 	.word	0xe000ed08

08006b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b46:	4b46      	ldr	r3, [pc, #280]	; (8006c60 <xPortStartScheduler+0x120>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a46      	ldr	r2, [pc, #280]	; (8006c64 <xPortStartScheduler+0x124>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10a      	bne.n	8006b66 <xPortStartScheduler+0x26>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	613b      	str	r3, [r7, #16]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b66:	4b3e      	ldr	r3, [pc, #248]	; (8006c60 <xPortStartScheduler+0x120>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <xPortStartScheduler+0x128>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10a      	bne.n	8006b86 <xPortStartScheduler+0x46>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60fb      	str	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b86:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <xPortStartScheduler+0x12c>)
 8006b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	22ff      	movs	r2, #255	; 0xff
 8006b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <xPortStartScheduler+0x130>)
 8006bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bae:	4b31      	ldr	r3, [pc, #196]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bb4:	e009      	b.n	8006bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006bb6:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	4a2d      	ldr	r2, [pc, #180]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d0ef      	beq.n	8006bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bd6:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1c3 0307 	rsb	r3, r3, #7
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d00a      	beq.n	8006bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60bb      	str	r3, [r7, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <xPortStartScheduler+0x134>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <xPortStartScheduler+0x134>)
 8006c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c02:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <xPortStartScheduler+0x134>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c0a:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <xPortStartScheduler+0x134>)
 8006c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c16:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <xPortStartScheduler+0x138>)
 8006c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c2e:	f000 f8dd 	bl	8006dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <xPortStartScheduler+0x13c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c38:	f000 f8fc 	bl	8006e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c3c:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <xPortStartScheduler+0x140>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <xPortStartScheduler+0x140>)
 8006c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c48:	f7ff ff66 	bl	8006b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c4c:	f7fe fe9a 	bl	8005984 <vTaskSwitchContext>
	prvTaskExitError();
 8006c50:	f7ff ff22 	bl	8006a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	e000ed00 	.word	0xe000ed00
 8006c64:	410fc271 	.word	0x410fc271
 8006c68:	410fc270 	.word	0x410fc270
 8006c6c:	e000e400 	.word	0xe000e400
 8006c70:	20000b20 	.word	0x20000b20
 8006c74:	20000b24 	.word	0x20000b24
 8006c78:	e000ed20 	.word	0xe000ed20
 8006c7c:	2000000c 	.word	0x2000000c
 8006c80:	e000ef34 	.word	0xe000ef34

08006c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	607b      	str	r3, [r7, #4]
}
 8006c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <vPortEnterCritical+0x58>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	4a0d      	ldr	r2, [pc, #52]	; (8006cdc <vPortEnterCritical+0x58>)
 8006ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <vPortEnterCritical+0x58>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10f      	bne.n	8006cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <vPortEnterCritical+0x5c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	603b      	str	r3, [r7, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <vPortEnterCritical+0x4a>
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	2000000c 	.word	0x2000000c
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <vPortExitCritical+0x50>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <vPortExitCritical+0x24>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <vPortExitCritical+0x50>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <vPortExitCritical+0x50>)
 8006d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <vPortExitCritical+0x50>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <vPortExitCritical+0x42>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	f383 8811 	msr	BASEPRI, r3
}
 8006d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	2000000c 	.word	0x2000000c
	...

08006d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d40:	f3ef 8009 	mrs	r0, PSP
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <pxCurrentTCBConst>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	f01e 0f10 	tst.w	lr, #16
 8006d50:	bf08      	it	eq
 8006d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	6010      	str	r0, [r2, #0]
 8006d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d64:	f380 8811 	msr	BASEPRI, r0
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f7fe fe08 	bl	8005984 <vTaskSwitchContext>
 8006d74:	f04f 0000 	mov.w	r0, #0
 8006d78:	f380 8811 	msr	BASEPRI, r0
 8006d7c:	bc09      	pop	{r0, r3}
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	6808      	ldr	r0, [r1, #0]
 8006d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d86:	f01e 0f10 	tst.w	lr, #16
 8006d8a:	bf08      	it	eq
 8006d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d90:	f380 8809 	msr	PSP, r0
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	f3af 8000 	nop.w

08006da0 <pxCurrentTCBConst>:
 8006da0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
}
 8006dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006dc2:	f7fe fd27 	bl	8005814 <xTaskIncrementTick>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <xPortSysTickHandler+0x40>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <vPortSetupTimerInterrupt+0x38>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <vPortSetupTimerInterrupt+0x3c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <vPortSetupTimerInterrupt+0x40>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	099b      	lsrs	r3, r3, #6
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <vPortSetupTimerInterrupt+0x44>)
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <vPortSetupTimerInterrupt+0x34>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	e000e010 	.word	0xe000e010
 8006e24:	e000e018 	.word	0xe000e018
 8006e28:	20000000 	.word	0x20000000
 8006e2c:	10624dd3 	.word	0x10624dd3
 8006e30:	e000e014 	.word	0xe000e014

08006e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e44 <vPortEnableVFP+0x10>
 8006e38:	6801      	ldr	r1, [r0, #0]
 8006e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e3e:	6001      	str	r1, [r0, #0]
 8006e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e42:	bf00      	nop
 8006e44:	e000ed88 	.word	0xe000ed88

08006e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e4e:	f3ef 8305 	mrs	r3, IPSR
 8006e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d914      	bls.n	8006e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e5a:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <vPortValidateInterruptPriority+0x70>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e64:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <vPortValidateInterruptPriority+0x74>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	7afa      	ldrb	r2, [r7, #11]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d20a      	bcs.n	8006e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e84:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <vPortValidateInterruptPriority+0x78>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <vPortValidateInterruptPriority+0x7c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d90a      	bls.n	8006eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	603b      	str	r3, [r7, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <vPortValidateInterruptPriority+0x60>
	}
 8006eaa:	bf00      	nop
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	e000e3f0 	.word	0xe000e3f0
 8006ebc:	20000b20 	.word	0x20000b20
 8006ec0:	e000ed0c 	.word	0xe000ed0c
 8006ec4:	20000b24 	.word	0x20000b24

08006ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ed4:	f7fe fbe4 	bl	80056a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ed8:	4b5b      	ldr	r3, [pc, #364]	; (8007048 <pvPortMalloc+0x180>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ee0:	f000 f920 	bl	8007124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ee4:	4b59      	ldr	r3, [pc, #356]	; (800704c <pvPortMalloc+0x184>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f040 8093 	bne.w	8007018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01d      	beq.n	8006f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ef8:	2208      	movs	r2, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d014      	beq.n	8006f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f023 0307 	bic.w	r3, r3, #7
 8006f10:	3308      	adds	r3, #8
 8006f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <pvPortMalloc+0x6c>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	617b      	str	r3, [r7, #20]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d06e      	beq.n	8007018 <pvPortMalloc+0x150>
 8006f3a:	4b45      	ldr	r3, [pc, #276]	; (8007050 <pvPortMalloc+0x188>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d869      	bhi.n	8007018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f44:	4b43      	ldr	r3, [pc, #268]	; (8007054 <pvPortMalloc+0x18c>)
 8006f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f48:	4b42      	ldr	r3, [pc, #264]	; (8007054 <pvPortMalloc+0x18c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f4e:	e004      	b.n	8006f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d903      	bls.n	8006f6c <pvPortMalloc+0xa4>
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f1      	bne.n	8006f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <pvPortMalloc+0x180>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d050      	beq.n	8007018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	4413      	add	r3, r2
 8006f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	2308      	movs	r3, #8
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d91f      	bls.n	8006fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	613b      	str	r3, [r7, #16]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fd2:	69b8      	ldr	r0, [r7, #24]
 8006fd4:	f000 f908 	bl	80071e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	; (8007050 <pvPortMalloc+0x188>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <pvPortMalloc+0x188>)
 8006fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <pvPortMalloc+0x188>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <pvPortMalloc+0x190>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d203      	bcs.n	8006ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <pvPortMalloc+0x188>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a18      	ldr	r2, [pc, #96]	; (8007058 <pvPortMalloc+0x190>)
 8006ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <pvPortMalloc+0x184>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	431a      	orrs	r2, r3
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <pvPortMalloc+0x194>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a11      	ldr	r2, [pc, #68]	; (800705c <pvPortMalloc+0x194>)
 8007016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007018:	f7fe fb50 	bl	80056bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <pvPortMalloc+0x174>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60fb      	str	r3, [r7, #12]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <pvPortMalloc+0x172>
	return pvReturn;
 800703c:	69fb      	ldr	r3, [r7, #28]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3728      	adds	r7, #40	; 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20004730 	.word	0x20004730
 800704c:	20004744 	.word	0x20004744
 8007050:	20004734 	.word	0x20004734
 8007054:	20004728 	.word	0x20004728
 8007058:	20004738 	.word	0x20004738
 800705c:	2000473c 	.word	0x2000473c

08007060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d04d      	beq.n	800710e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007072:	2308      	movs	r3, #8
 8007074:	425b      	negs	r3, r3
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4413      	add	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	4b24      	ldr	r3, [pc, #144]	; (8007118 <vPortFree+0xb8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <vPortFree+0x44>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	60fb      	str	r3, [r7, #12]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <vPortFree+0x62>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	60bb      	str	r3, [r7, #8]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <vPortFree+0xb8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01e      	beq.n	800710e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11a      	bne.n	800710e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	4b0e      	ldr	r3, [pc, #56]	; (8007118 <vPortFree+0xb8>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	401a      	ands	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e8:	f7fe fada 	bl	80056a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <vPortFree+0xbc>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <vPortFree+0xbc>)
 80070f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f000 f874 	bl	80071e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <vPortFree+0xc0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	4a06      	ldr	r2, [pc, #24]	; (8007120 <vPortFree+0xc0>)
 8007108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800710a:	f7fe fad7 	bl	80056bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800710e:	bf00      	nop
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20004744 	.word	0x20004744
 800711c:	20004734 	.word	0x20004734
 8007120:	20004740 	.word	0x20004740

08007124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800712a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800712e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007130:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <prvHeapInit+0xac>)
 8007132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00c      	beq.n	8007158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3307      	adds	r3, #7
 8007142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <prvHeapInit+0xac>)
 8007154:	4413      	add	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800715c:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <prvHeapInit+0xb0>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <prvHeapInit+0xb0>)
 8007164:	2200      	movs	r2, #0
 8007166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007170:	2208      	movs	r2, #8
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0307 	bic.w	r3, r3, #7
 800717e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <prvHeapInit+0xb4>)
 8007184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <prvHeapInit+0xb4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2200      	movs	r2, #0
 800718c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800718e:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <prvHeapInit+0xb4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071a4:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <prvHeapInit+0xb4>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	4a0a      	ldr	r2, [pc, #40]	; (80071dc <prvHeapInit+0xb8>)
 80071b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a09      	ldr	r2, [pc, #36]	; (80071e0 <prvHeapInit+0xbc>)
 80071ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071bc:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <prvHeapInit+0xc0>)
 80071be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000b28 	.word	0x20000b28
 80071d4:	20004728 	.word	0x20004728
 80071d8:	20004730 	.word	0x20004730
 80071dc:	20004738 	.word	0x20004738
 80071e0:	20004734 	.word	0x20004734
 80071e4:	20004744 	.word	0x20004744

080071e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071f0:	4b28      	ldr	r3, [pc, #160]	; (8007294 <prvInsertBlockIntoFreeList+0xac>)
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e002      	b.n	80071fc <prvInsertBlockIntoFreeList+0x14>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d8f7      	bhi.n	80071f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	4413      	add	r3, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d108      	bne.n	800722a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	441a      	add	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d118      	bne.n	8007270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b15      	ldr	r3, [pc, #84]	; (8007298 <prvInsertBlockIntoFreeList+0xb0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d00d      	beq.n	8007266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e008      	b.n	8007278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <prvInsertBlockIntoFreeList+0xb0>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e003      	b.n	8007278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d002      	beq.n	8007286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20004728 	.word	0x20004728
 8007298:	20004730 	.word	0x20004730

0800729c <siprintf>:
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b500      	push	{lr}
 80072a0:	b09c      	sub	sp, #112	; 0x70
 80072a2:	ab1d      	add	r3, sp, #116	; 0x74
 80072a4:	9002      	str	r0, [sp, #8]
 80072a6:	9006      	str	r0, [sp, #24]
 80072a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <siprintf+0x38>)
 80072ae:	9107      	str	r1, [sp, #28]
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	4909      	ldr	r1, [pc, #36]	; (80072d8 <siprintf+0x3c>)
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	9105      	str	r1, [sp, #20]
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	a902      	add	r1, sp, #8
 80072c0:	f000 f9a0 	bl	8007604 <_svfiprintf_r>
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	b01c      	add	sp, #112	; 0x70
 80072cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d0:	b003      	add	sp, #12
 80072d2:	4770      	bx	lr
 80072d4:	2000005c 	.word	0x2000005c
 80072d8:	ffff0208 	.word	0xffff0208

080072dc <memset>:
 80072dc:	4402      	add	r2, r0
 80072de:	4603      	mov	r3, r0
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d100      	bne.n	80072e6 <memset+0xa>
 80072e4:	4770      	bx	lr
 80072e6:	f803 1b01 	strb.w	r1, [r3], #1
 80072ea:	e7f9      	b.n	80072e0 <memset+0x4>

080072ec <__errno>:
 80072ec:	4b01      	ldr	r3, [pc, #4]	; (80072f4 <__errno+0x8>)
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	2000005c 	.word	0x2000005c

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4d0d      	ldr	r5, [pc, #52]	; (8007330 <__libc_init_array+0x38>)
 80072fc:	4c0d      	ldr	r4, [pc, #52]	; (8007334 <__libc_init_array+0x3c>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	2600      	movs	r6, #0
 8007304:	42a6      	cmp	r6, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	4d0b      	ldr	r5, [pc, #44]	; (8007338 <__libc_init_array+0x40>)
 800730a:	4c0c      	ldr	r4, [pc, #48]	; (800733c <__libc_init_array+0x44>)
 800730c:	f000 fc6a 	bl	8007be4 <_init>
 8007310:	1b64      	subs	r4, r4, r5
 8007312:	10a4      	asrs	r4, r4, #2
 8007314:	2600      	movs	r6, #0
 8007316:	42a6      	cmp	r6, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007320:	4798      	blx	r3
 8007322:	3601      	adds	r6, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f855 3b04 	ldr.w	r3, [r5], #4
 800732a:	4798      	blx	r3
 800732c:	3601      	adds	r6, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	08007d44 	.word	0x08007d44
 8007334:	08007d44 	.word	0x08007d44
 8007338:	08007d44 	.word	0x08007d44
 800733c:	08007d48 	.word	0x08007d48

08007340 <__retarget_lock_acquire_recursive>:
 8007340:	4770      	bx	lr

08007342 <__retarget_lock_release_recursive>:
 8007342:	4770      	bx	lr

08007344 <memcpy>:
 8007344:	440a      	add	r2, r1
 8007346:	4291      	cmp	r1, r2
 8007348:	f100 33ff 	add.w	r3, r0, #4294967295
 800734c:	d100      	bne.n	8007350 <memcpy+0xc>
 800734e:	4770      	bx	lr
 8007350:	b510      	push	{r4, lr}
 8007352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800735a:	4291      	cmp	r1, r2
 800735c:	d1f9      	bne.n	8007352 <memcpy+0xe>
 800735e:	bd10      	pop	{r4, pc}

08007360 <_free_r>:
 8007360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007362:	2900      	cmp	r1, #0
 8007364:	d044      	beq.n	80073f0 <_free_r+0x90>
 8007366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800736a:	9001      	str	r0, [sp, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f1a1 0404 	sub.w	r4, r1, #4
 8007372:	bfb8      	it	lt
 8007374:	18e4      	addlt	r4, r4, r3
 8007376:	f000 f8df 	bl	8007538 <__malloc_lock>
 800737a:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <_free_r+0x94>)
 800737c:	9801      	ldr	r0, [sp, #4]
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	b933      	cbnz	r3, 8007390 <_free_r+0x30>
 8007382:	6063      	str	r3, [r4, #4]
 8007384:	6014      	str	r4, [r2, #0]
 8007386:	b003      	add	sp, #12
 8007388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800738c:	f000 b8da 	b.w	8007544 <__malloc_unlock>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d908      	bls.n	80073a6 <_free_r+0x46>
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	1961      	adds	r1, r4, r5
 8007398:	428b      	cmp	r3, r1
 800739a:	bf01      	itttt	eq
 800739c:	6819      	ldreq	r1, [r3, #0]
 800739e:	685b      	ldreq	r3, [r3, #4]
 80073a0:	1949      	addeq	r1, r1, r5
 80073a2:	6021      	streq	r1, [r4, #0]
 80073a4:	e7ed      	b.n	8007382 <_free_r+0x22>
 80073a6:	461a      	mov	r2, r3
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	b10b      	cbz	r3, 80073b0 <_free_r+0x50>
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d9fa      	bls.n	80073a6 <_free_r+0x46>
 80073b0:	6811      	ldr	r1, [r2, #0]
 80073b2:	1855      	adds	r5, r2, r1
 80073b4:	42a5      	cmp	r5, r4
 80073b6:	d10b      	bne.n	80073d0 <_free_r+0x70>
 80073b8:	6824      	ldr	r4, [r4, #0]
 80073ba:	4421      	add	r1, r4
 80073bc:	1854      	adds	r4, r2, r1
 80073be:	42a3      	cmp	r3, r4
 80073c0:	6011      	str	r1, [r2, #0]
 80073c2:	d1e0      	bne.n	8007386 <_free_r+0x26>
 80073c4:	681c      	ldr	r4, [r3, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	6053      	str	r3, [r2, #4]
 80073ca:	440c      	add	r4, r1
 80073cc:	6014      	str	r4, [r2, #0]
 80073ce:	e7da      	b.n	8007386 <_free_r+0x26>
 80073d0:	d902      	bls.n	80073d8 <_free_r+0x78>
 80073d2:	230c      	movs	r3, #12
 80073d4:	6003      	str	r3, [r0, #0]
 80073d6:	e7d6      	b.n	8007386 <_free_r+0x26>
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	1961      	adds	r1, r4, r5
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf04      	itt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	6063      	str	r3, [r4, #4]
 80073e6:	bf04      	itt	eq
 80073e8:	1949      	addeq	r1, r1, r5
 80073ea:	6021      	streq	r1, [r4, #0]
 80073ec:	6054      	str	r4, [r2, #4]
 80073ee:	e7ca      	b.n	8007386 <_free_r+0x26>
 80073f0:	b003      	add	sp, #12
 80073f2:	bd30      	pop	{r4, r5, pc}
 80073f4:	20004888 	.word	0x20004888

080073f8 <sbrk_aligned>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	4e0e      	ldr	r6, [pc, #56]	; (8007434 <sbrk_aligned+0x3c>)
 80073fc:	460c      	mov	r4, r1
 80073fe:	6831      	ldr	r1, [r6, #0]
 8007400:	4605      	mov	r5, r0
 8007402:	b911      	cbnz	r1, 800740a <sbrk_aligned+0x12>
 8007404:	f000 fba6 	bl	8007b54 <_sbrk_r>
 8007408:	6030      	str	r0, [r6, #0]
 800740a:	4621      	mov	r1, r4
 800740c:	4628      	mov	r0, r5
 800740e:	f000 fba1 	bl	8007b54 <_sbrk_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d00a      	beq.n	800742c <sbrk_aligned+0x34>
 8007416:	1cc4      	adds	r4, r0, #3
 8007418:	f024 0403 	bic.w	r4, r4, #3
 800741c:	42a0      	cmp	r0, r4
 800741e:	d007      	beq.n	8007430 <sbrk_aligned+0x38>
 8007420:	1a21      	subs	r1, r4, r0
 8007422:	4628      	mov	r0, r5
 8007424:	f000 fb96 	bl	8007b54 <_sbrk_r>
 8007428:	3001      	adds	r0, #1
 800742a:	d101      	bne.n	8007430 <sbrk_aligned+0x38>
 800742c:	f04f 34ff 	mov.w	r4, #4294967295
 8007430:	4620      	mov	r0, r4
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	2000488c 	.word	0x2000488c

08007438 <_malloc_r>:
 8007438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800743c:	1ccd      	adds	r5, r1, #3
 800743e:	f025 0503 	bic.w	r5, r5, #3
 8007442:	3508      	adds	r5, #8
 8007444:	2d0c      	cmp	r5, #12
 8007446:	bf38      	it	cc
 8007448:	250c      	movcc	r5, #12
 800744a:	2d00      	cmp	r5, #0
 800744c:	4607      	mov	r7, r0
 800744e:	db01      	blt.n	8007454 <_malloc_r+0x1c>
 8007450:	42a9      	cmp	r1, r5
 8007452:	d905      	bls.n	8007460 <_malloc_r+0x28>
 8007454:	230c      	movs	r3, #12
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	2600      	movs	r6, #0
 800745a:	4630      	mov	r0, r6
 800745c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007460:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007534 <_malloc_r+0xfc>
 8007464:	f000 f868 	bl	8007538 <__malloc_lock>
 8007468:	f8d8 3000 	ldr.w	r3, [r8]
 800746c:	461c      	mov	r4, r3
 800746e:	bb5c      	cbnz	r4, 80074c8 <_malloc_r+0x90>
 8007470:	4629      	mov	r1, r5
 8007472:	4638      	mov	r0, r7
 8007474:	f7ff ffc0 	bl	80073f8 <sbrk_aligned>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	4604      	mov	r4, r0
 800747c:	d155      	bne.n	800752a <_malloc_r+0xf2>
 800747e:	f8d8 4000 	ldr.w	r4, [r8]
 8007482:	4626      	mov	r6, r4
 8007484:	2e00      	cmp	r6, #0
 8007486:	d145      	bne.n	8007514 <_malloc_r+0xdc>
 8007488:	2c00      	cmp	r4, #0
 800748a:	d048      	beq.n	800751e <_malloc_r+0xe6>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	4631      	mov	r1, r6
 8007490:	4638      	mov	r0, r7
 8007492:	eb04 0903 	add.w	r9, r4, r3
 8007496:	f000 fb5d 	bl	8007b54 <_sbrk_r>
 800749a:	4581      	cmp	r9, r0
 800749c:	d13f      	bne.n	800751e <_malloc_r+0xe6>
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	1a6d      	subs	r5, r5, r1
 80074a2:	4629      	mov	r1, r5
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ffa7 	bl	80073f8 <sbrk_aligned>
 80074aa:	3001      	adds	r0, #1
 80074ac:	d037      	beq.n	800751e <_malloc_r+0xe6>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	442b      	add	r3, r5
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	f8d8 3000 	ldr.w	r3, [r8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d038      	beq.n	800752e <_malloc_r+0xf6>
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	42a2      	cmp	r2, r4
 80074c0:	d12b      	bne.n	800751a <_malloc_r+0xe2>
 80074c2:	2200      	movs	r2, #0
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	e00f      	b.n	80074e8 <_malloc_r+0xb0>
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	1b52      	subs	r2, r2, r5
 80074cc:	d41f      	bmi.n	800750e <_malloc_r+0xd6>
 80074ce:	2a0b      	cmp	r2, #11
 80074d0:	d917      	bls.n	8007502 <_malloc_r+0xca>
 80074d2:	1961      	adds	r1, r4, r5
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	6025      	str	r5, [r4, #0]
 80074d8:	bf18      	it	ne
 80074da:	6059      	strne	r1, [r3, #4]
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	bf08      	it	eq
 80074e0:	f8c8 1000 	streq.w	r1, [r8]
 80074e4:	5162      	str	r2, [r4, r5]
 80074e6:	604b      	str	r3, [r1, #4]
 80074e8:	4638      	mov	r0, r7
 80074ea:	f104 060b 	add.w	r6, r4, #11
 80074ee:	f000 f829 	bl	8007544 <__malloc_unlock>
 80074f2:	f026 0607 	bic.w	r6, r6, #7
 80074f6:	1d23      	adds	r3, r4, #4
 80074f8:	1af2      	subs	r2, r6, r3
 80074fa:	d0ae      	beq.n	800745a <_malloc_r+0x22>
 80074fc:	1b9b      	subs	r3, r3, r6
 80074fe:	50a3      	str	r3, [r4, r2]
 8007500:	e7ab      	b.n	800745a <_malloc_r+0x22>
 8007502:	42a3      	cmp	r3, r4
 8007504:	6862      	ldr	r2, [r4, #4]
 8007506:	d1dd      	bne.n	80074c4 <_malloc_r+0x8c>
 8007508:	f8c8 2000 	str.w	r2, [r8]
 800750c:	e7ec      	b.n	80074e8 <_malloc_r+0xb0>
 800750e:	4623      	mov	r3, r4
 8007510:	6864      	ldr	r4, [r4, #4]
 8007512:	e7ac      	b.n	800746e <_malloc_r+0x36>
 8007514:	4634      	mov	r4, r6
 8007516:	6876      	ldr	r6, [r6, #4]
 8007518:	e7b4      	b.n	8007484 <_malloc_r+0x4c>
 800751a:	4613      	mov	r3, r2
 800751c:	e7cc      	b.n	80074b8 <_malloc_r+0x80>
 800751e:	230c      	movs	r3, #12
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4638      	mov	r0, r7
 8007524:	f000 f80e 	bl	8007544 <__malloc_unlock>
 8007528:	e797      	b.n	800745a <_malloc_r+0x22>
 800752a:	6025      	str	r5, [r4, #0]
 800752c:	e7dc      	b.n	80074e8 <_malloc_r+0xb0>
 800752e:	605b      	str	r3, [r3, #4]
 8007530:	deff      	udf	#255	; 0xff
 8007532:	bf00      	nop
 8007534:	20004888 	.word	0x20004888

08007538 <__malloc_lock>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__malloc_lock+0x8>)
 800753a:	f7ff bf01 	b.w	8007340 <__retarget_lock_acquire_recursive>
 800753e:	bf00      	nop
 8007540:	20004884 	.word	0x20004884

08007544 <__malloc_unlock>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__malloc_unlock+0x8>)
 8007546:	f7ff befc 	b.w	8007342 <__retarget_lock_release_recursive>
 800754a:	bf00      	nop
 800754c:	20004884 	.word	0x20004884

08007550 <__ssputs_r>:
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	688e      	ldr	r6, [r1, #8]
 8007556:	461f      	mov	r7, r3
 8007558:	42be      	cmp	r6, r7
 800755a:	680b      	ldr	r3, [r1, #0]
 800755c:	4682      	mov	sl, r0
 800755e:	460c      	mov	r4, r1
 8007560:	4690      	mov	r8, r2
 8007562:	d82c      	bhi.n	80075be <__ssputs_r+0x6e>
 8007564:	898a      	ldrh	r2, [r1, #12]
 8007566:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800756a:	d026      	beq.n	80075ba <__ssputs_r+0x6a>
 800756c:	6965      	ldr	r5, [r4, #20]
 800756e:	6909      	ldr	r1, [r1, #16]
 8007570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007574:	eba3 0901 	sub.w	r9, r3, r1
 8007578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800757c:	1c7b      	adds	r3, r7, #1
 800757e:	444b      	add	r3, r9
 8007580:	106d      	asrs	r5, r5, #1
 8007582:	429d      	cmp	r5, r3
 8007584:	bf38      	it	cc
 8007586:	461d      	movcc	r5, r3
 8007588:	0553      	lsls	r3, r2, #21
 800758a:	d527      	bpl.n	80075dc <__ssputs_r+0x8c>
 800758c:	4629      	mov	r1, r5
 800758e:	f7ff ff53 	bl	8007438 <_malloc_r>
 8007592:	4606      	mov	r6, r0
 8007594:	b360      	cbz	r0, 80075f0 <__ssputs_r+0xa0>
 8007596:	6921      	ldr	r1, [r4, #16]
 8007598:	464a      	mov	r2, r9
 800759a:	f7ff fed3 	bl	8007344 <memcpy>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a8:	81a3      	strh	r3, [r4, #12]
 80075aa:	6126      	str	r6, [r4, #16]
 80075ac:	6165      	str	r5, [r4, #20]
 80075ae:	444e      	add	r6, r9
 80075b0:	eba5 0509 	sub.w	r5, r5, r9
 80075b4:	6026      	str	r6, [r4, #0]
 80075b6:	60a5      	str	r5, [r4, #8]
 80075b8:	463e      	mov	r6, r7
 80075ba:	42be      	cmp	r6, r7
 80075bc:	d900      	bls.n	80075c0 <__ssputs_r+0x70>
 80075be:	463e      	mov	r6, r7
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	4632      	mov	r2, r6
 80075c4:	4641      	mov	r1, r8
 80075c6:	f000 faab 	bl	8007b20 <memmove>
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	1b9b      	subs	r3, r3, r6
 80075ce:	60a3      	str	r3, [r4, #8]
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	4433      	add	r3, r6
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	2000      	movs	r0, #0
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	462a      	mov	r2, r5
 80075de:	f000 fac9 	bl	8007b74 <_realloc_r>
 80075e2:	4606      	mov	r6, r0
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d1e0      	bne.n	80075aa <__ssputs_r+0x5a>
 80075e8:	6921      	ldr	r1, [r4, #16]
 80075ea:	4650      	mov	r0, sl
 80075ec:	f7ff feb8 	bl	8007360 <_free_r>
 80075f0:	230c      	movs	r3, #12
 80075f2:	f8ca 3000 	str.w	r3, [sl]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e7e9      	b.n	80075d8 <__ssputs_r+0x88>

08007604 <_svfiprintf_r>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	4698      	mov	r8, r3
 800760a:	898b      	ldrh	r3, [r1, #12]
 800760c:	061b      	lsls	r3, r3, #24
 800760e:	b09d      	sub	sp, #116	; 0x74
 8007610:	4607      	mov	r7, r0
 8007612:	460d      	mov	r5, r1
 8007614:	4614      	mov	r4, r2
 8007616:	d50e      	bpl.n	8007636 <_svfiprintf_r+0x32>
 8007618:	690b      	ldr	r3, [r1, #16]
 800761a:	b963      	cbnz	r3, 8007636 <_svfiprintf_r+0x32>
 800761c:	2140      	movs	r1, #64	; 0x40
 800761e:	f7ff ff0b 	bl	8007438 <_malloc_r>
 8007622:	6028      	str	r0, [r5, #0]
 8007624:	6128      	str	r0, [r5, #16]
 8007626:	b920      	cbnz	r0, 8007632 <_svfiprintf_r+0x2e>
 8007628:	230c      	movs	r3, #12
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	e0d0      	b.n	80077d4 <_svfiprintf_r+0x1d0>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	616b      	str	r3, [r5, #20]
 8007636:	2300      	movs	r3, #0
 8007638:	9309      	str	r3, [sp, #36]	; 0x24
 800763a:	2320      	movs	r3, #32
 800763c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007640:	f8cd 800c 	str.w	r8, [sp, #12]
 8007644:	2330      	movs	r3, #48	; 0x30
 8007646:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80077ec <_svfiprintf_r+0x1e8>
 800764a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800764e:	f04f 0901 	mov.w	r9, #1
 8007652:	4623      	mov	r3, r4
 8007654:	469a      	mov	sl, r3
 8007656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800765a:	b10a      	cbz	r2, 8007660 <_svfiprintf_r+0x5c>
 800765c:	2a25      	cmp	r2, #37	; 0x25
 800765e:	d1f9      	bne.n	8007654 <_svfiprintf_r+0x50>
 8007660:	ebba 0b04 	subs.w	fp, sl, r4
 8007664:	d00b      	beq.n	800767e <_svfiprintf_r+0x7a>
 8007666:	465b      	mov	r3, fp
 8007668:	4622      	mov	r2, r4
 800766a:	4629      	mov	r1, r5
 800766c:	4638      	mov	r0, r7
 800766e:	f7ff ff6f 	bl	8007550 <__ssputs_r>
 8007672:	3001      	adds	r0, #1
 8007674:	f000 80a9 	beq.w	80077ca <_svfiprintf_r+0x1c6>
 8007678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767a:	445a      	add	r2, fp
 800767c:	9209      	str	r2, [sp, #36]	; 0x24
 800767e:	f89a 3000 	ldrb.w	r3, [sl]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 80a1 	beq.w	80077ca <_svfiprintf_r+0x1c6>
 8007688:	2300      	movs	r3, #0
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007692:	f10a 0a01 	add.w	sl, sl, #1
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	9307      	str	r3, [sp, #28]
 800769a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800769e:	931a      	str	r3, [sp, #104]	; 0x68
 80076a0:	4654      	mov	r4, sl
 80076a2:	2205      	movs	r2, #5
 80076a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a8:	4850      	ldr	r0, [pc, #320]	; (80077ec <_svfiprintf_r+0x1e8>)
 80076aa:	f7f8 fda1 	bl	80001f0 <memchr>
 80076ae:	9a04      	ldr	r2, [sp, #16]
 80076b0:	b9d8      	cbnz	r0, 80076ea <_svfiprintf_r+0xe6>
 80076b2:	06d0      	lsls	r0, r2, #27
 80076b4:	bf44      	itt	mi
 80076b6:	2320      	movmi	r3, #32
 80076b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076bc:	0711      	lsls	r1, r2, #28
 80076be:	bf44      	itt	mi
 80076c0:	232b      	movmi	r3, #43	; 0x2b
 80076c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c6:	f89a 3000 	ldrb.w	r3, [sl]
 80076ca:	2b2a      	cmp	r3, #42	; 0x2a
 80076cc:	d015      	beq.n	80076fa <_svfiprintf_r+0xf6>
 80076ce:	9a07      	ldr	r2, [sp, #28]
 80076d0:	4654      	mov	r4, sl
 80076d2:	2000      	movs	r0, #0
 80076d4:	f04f 0c0a 	mov.w	ip, #10
 80076d8:	4621      	mov	r1, r4
 80076da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076de:	3b30      	subs	r3, #48	; 0x30
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	d94d      	bls.n	8007780 <_svfiprintf_r+0x17c>
 80076e4:	b1b0      	cbz	r0, 8007714 <_svfiprintf_r+0x110>
 80076e6:	9207      	str	r2, [sp, #28]
 80076e8:	e014      	b.n	8007714 <_svfiprintf_r+0x110>
 80076ea:	eba0 0308 	sub.w	r3, r0, r8
 80076ee:	fa09 f303 	lsl.w	r3, r9, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	46a2      	mov	sl, r4
 80076f8:	e7d2      	b.n	80076a0 <_svfiprintf_r+0x9c>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	1d19      	adds	r1, r3, #4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	9103      	str	r1, [sp, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	bfbb      	ittet	lt
 8007706:	425b      	neglt	r3, r3
 8007708:	f042 0202 	orrlt.w	r2, r2, #2
 800770c:	9307      	strge	r3, [sp, #28]
 800770e:	9307      	strlt	r3, [sp, #28]
 8007710:	bfb8      	it	lt
 8007712:	9204      	strlt	r2, [sp, #16]
 8007714:	7823      	ldrb	r3, [r4, #0]
 8007716:	2b2e      	cmp	r3, #46	; 0x2e
 8007718:	d10c      	bne.n	8007734 <_svfiprintf_r+0x130>
 800771a:	7863      	ldrb	r3, [r4, #1]
 800771c:	2b2a      	cmp	r3, #42	; 0x2a
 800771e:	d134      	bne.n	800778a <_svfiprintf_r+0x186>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1d1a      	adds	r2, r3, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	9203      	str	r2, [sp, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfb8      	it	lt
 800772c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007730:	3402      	adds	r4, #2
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80077fc <_svfiprintf_r+0x1f8>
 8007738:	7821      	ldrb	r1, [r4, #0]
 800773a:	2203      	movs	r2, #3
 800773c:	4650      	mov	r0, sl
 800773e:	f7f8 fd57 	bl	80001f0 <memchr>
 8007742:	b138      	cbz	r0, 8007754 <_svfiprintf_r+0x150>
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	eba0 000a 	sub.w	r0, r0, sl
 800774a:	2240      	movs	r2, #64	; 0x40
 800774c:	4082      	lsls	r2, r0
 800774e:	4313      	orrs	r3, r2
 8007750:	3401      	adds	r4, #1
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007758:	4825      	ldr	r0, [pc, #148]	; (80077f0 <_svfiprintf_r+0x1ec>)
 800775a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775e:	2206      	movs	r2, #6
 8007760:	f7f8 fd46 	bl	80001f0 <memchr>
 8007764:	2800      	cmp	r0, #0
 8007766:	d038      	beq.n	80077da <_svfiprintf_r+0x1d6>
 8007768:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <_svfiprintf_r+0x1f0>)
 800776a:	bb1b      	cbnz	r3, 80077b4 <_svfiprintf_r+0x1b0>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	3308      	adds	r3, #8
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777a:	4433      	add	r3, r6
 800777c:	9309      	str	r3, [sp, #36]	; 0x24
 800777e:	e768      	b.n	8007652 <_svfiprintf_r+0x4e>
 8007780:	fb0c 3202 	mla	r2, ip, r2, r3
 8007784:	460c      	mov	r4, r1
 8007786:	2001      	movs	r0, #1
 8007788:	e7a6      	b.n	80076d8 <_svfiprintf_r+0xd4>
 800778a:	2300      	movs	r3, #0
 800778c:	3401      	adds	r4, #1
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	4619      	mov	r1, r3
 8007792:	f04f 0c0a 	mov.w	ip, #10
 8007796:	4620      	mov	r0, r4
 8007798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779c:	3a30      	subs	r2, #48	; 0x30
 800779e:	2a09      	cmp	r2, #9
 80077a0:	d903      	bls.n	80077aa <_svfiprintf_r+0x1a6>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0c6      	beq.n	8007734 <_svfiprintf_r+0x130>
 80077a6:	9105      	str	r1, [sp, #20]
 80077a8:	e7c4      	b.n	8007734 <_svfiprintf_r+0x130>
 80077aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ae:	4604      	mov	r4, r0
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7f0      	b.n	8007796 <_svfiprintf_r+0x192>
 80077b4:	ab03      	add	r3, sp, #12
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	462a      	mov	r2, r5
 80077ba:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <_svfiprintf_r+0x1f4>)
 80077bc:	a904      	add	r1, sp, #16
 80077be:	4638      	mov	r0, r7
 80077c0:	f3af 8000 	nop.w
 80077c4:	1c42      	adds	r2, r0, #1
 80077c6:	4606      	mov	r6, r0
 80077c8:	d1d6      	bne.n	8007778 <_svfiprintf_r+0x174>
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	065b      	lsls	r3, r3, #25
 80077ce:	f53f af2d 	bmi.w	800762c <_svfiprintf_r+0x28>
 80077d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d4:	b01d      	add	sp, #116	; 0x74
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	462a      	mov	r2, r5
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <_svfiprintf_r+0x1f4>)
 80077e2:	a904      	add	r1, sp, #16
 80077e4:	4638      	mov	r0, r7
 80077e6:	f000 f879 	bl	80078dc <_printf_i>
 80077ea:	e7eb      	b.n	80077c4 <_svfiprintf_r+0x1c0>
 80077ec:	08007d08 	.word	0x08007d08
 80077f0:	08007d12 	.word	0x08007d12
 80077f4:	00000000 	.word	0x00000000
 80077f8:	08007551 	.word	0x08007551
 80077fc:	08007d0e 	.word	0x08007d0e

08007800 <_printf_common>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	4699      	mov	r9, r3
 8007808:	688a      	ldr	r2, [r1, #8]
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007810:	4293      	cmp	r3, r2
 8007812:	bfb8      	it	lt
 8007814:	4613      	movlt	r3, r2
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800781c:	4607      	mov	r7, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b10a      	cbz	r2, 8007826 <_printf_common+0x26>
 8007822:	3301      	adds	r3, #1
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	6833      	ldrmi	r3, [r6, #0]
 800782e:	3302      	addmi	r3, #2
 8007830:	6033      	strmi	r3, [r6, #0]
 8007832:	6825      	ldr	r5, [r4, #0]
 8007834:	f015 0506 	ands.w	r5, r5, #6
 8007838:	d106      	bne.n	8007848 <_printf_common+0x48>
 800783a:	f104 0a19 	add.w	sl, r4, #25
 800783e:	68e3      	ldr	r3, [r4, #12]
 8007840:	6832      	ldr	r2, [r6, #0]
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	42ab      	cmp	r3, r5
 8007846:	dc26      	bgt.n	8007896 <_printf_common+0x96>
 8007848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800784c:	1e13      	subs	r3, r2, #0
 800784e:	6822      	ldr	r2, [r4, #0]
 8007850:	bf18      	it	ne
 8007852:	2301      	movne	r3, #1
 8007854:	0692      	lsls	r2, r2, #26
 8007856:	d42b      	bmi.n	80078b0 <_printf_common+0xb0>
 8007858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800785c:	4649      	mov	r1, r9
 800785e:	4638      	mov	r0, r7
 8007860:	47c0      	blx	r8
 8007862:	3001      	adds	r0, #1
 8007864:	d01e      	beq.n	80078a4 <_printf_common+0xa4>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	6922      	ldr	r2, [r4, #16]
 800786a:	f003 0306 	and.w	r3, r3, #6
 800786e:	2b04      	cmp	r3, #4
 8007870:	bf02      	ittt	eq
 8007872:	68e5      	ldreq	r5, [r4, #12]
 8007874:	6833      	ldreq	r3, [r6, #0]
 8007876:	1aed      	subeq	r5, r5, r3
 8007878:	68a3      	ldr	r3, [r4, #8]
 800787a:	bf0c      	ite	eq
 800787c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007880:	2500      	movne	r5, #0
 8007882:	4293      	cmp	r3, r2
 8007884:	bfc4      	itt	gt
 8007886:	1a9b      	subgt	r3, r3, r2
 8007888:	18ed      	addgt	r5, r5, r3
 800788a:	2600      	movs	r6, #0
 800788c:	341a      	adds	r4, #26
 800788e:	42b5      	cmp	r5, r6
 8007890:	d11a      	bne.n	80078c8 <_printf_common+0xc8>
 8007892:	2000      	movs	r0, #0
 8007894:	e008      	b.n	80078a8 <_printf_common+0xa8>
 8007896:	2301      	movs	r3, #1
 8007898:	4652      	mov	r2, sl
 800789a:	4649      	mov	r1, r9
 800789c:	4638      	mov	r0, r7
 800789e:	47c0      	blx	r8
 80078a0:	3001      	adds	r0, #1
 80078a2:	d103      	bne.n	80078ac <_printf_common+0xac>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ac:	3501      	adds	r5, #1
 80078ae:	e7c6      	b.n	800783e <_printf_common+0x3e>
 80078b0:	18e1      	adds	r1, r4, r3
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	2030      	movs	r0, #48	; 0x30
 80078b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078ba:	4422      	add	r2, r4
 80078bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078c4:	3302      	adds	r3, #2
 80078c6:	e7c7      	b.n	8007858 <_printf_common+0x58>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4622      	mov	r2, r4
 80078cc:	4649      	mov	r1, r9
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	3001      	adds	r0, #1
 80078d4:	d0e6      	beq.n	80078a4 <_printf_common+0xa4>
 80078d6:	3601      	adds	r6, #1
 80078d8:	e7d9      	b.n	800788e <_printf_common+0x8e>
	...

080078dc <_printf_i>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	7e0f      	ldrb	r7, [r1, #24]
 80078e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078e4:	2f78      	cmp	r7, #120	; 0x78
 80078e6:	4691      	mov	r9, r2
 80078e8:	4680      	mov	r8, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	469a      	mov	sl, r3
 80078ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078f2:	d807      	bhi.n	8007904 <_printf_i+0x28>
 80078f4:	2f62      	cmp	r7, #98	; 0x62
 80078f6:	d80a      	bhi.n	800790e <_printf_i+0x32>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	f000 80d4 	beq.w	8007aa6 <_printf_i+0x1ca>
 80078fe:	2f58      	cmp	r7, #88	; 0x58
 8007900:	f000 80c0 	beq.w	8007a84 <_printf_i+0x1a8>
 8007904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800790c:	e03a      	b.n	8007984 <_printf_i+0xa8>
 800790e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007912:	2b15      	cmp	r3, #21
 8007914:	d8f6      	bhi.n	8007904 <_printf_i+0x28>
 8007916:	a101      	add	r1, pc, #4	; (adr r1, 800791c <_printf_i+0x40>)
 8007918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800791c:	08007975 	.word	0x08007975
 8007920:	08007989 	.word	0x08007989
 8007924:	08007905 	.word	0x08007905
 8007928:	08007905 	.word	0x08007905
 800792c:	08007905 	.word	0x08007905
 8007930:	08007905 	.word	0x08007905
 8007934:	08007989 	.word	0x08007989
 8007938:	08007905 	.word	0x08007905
 800793c:	08007905 	.word	0x08007905
 8007940:	08007905 	.word	0x08007905
 8007944:	08007905 	.word	0x08007905
 8007948:	08007a8d 	.word	0x08007a8d
 800794c:	080079b5 	.word	0x080079b5
 8007950:	08007a47 	.word	0x08007a47
 8007954:	08007905 	.word	0x08007905
 8007958:	08007905 	.word	0x08007905
 800795c:	08007aaf 	.word	0x08007aaf
 8007960:	08007905 	.word	0x08007905
 8007964:	080079b5 	.word	0x080079b5
 8007968:	08007905 	.word	0x08007905
 800796c:	08007905 	.word	0x08007905
 8007970:	08007a4f 	.word	0x08007a4f
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	602a      	str	r2, [r5, #0]
 800797c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007984:	2301      	movs	r3, #1
 8007986:	e09f      	b.n	8007ac8 <_printf_i+0x1ec>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	0607      	lsls	r7, r0, #24
 800798e:	f103 0104 	add.w	r1, r3, #4
 8007992:	6029      	str	r1, [r5, #0]
 8007994:	d501      	bpl.n	800799a <_printf_i+0xbe>
 8007996:	681e      	ldr	r6, [r3, #0]
 8007998:	e003      	b.n	80079a2 <_printf_i+0xc6>
 800799a:	0646      	lsls	r6, r0, #25
 800799c:	d5fb      	bpl.n	8007996 <_printf_i+0xba>
 800799e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	da03      	bge.n	80079ae <_printf_i+0xd2>
 80079a6:	232d      	movs	r3, #45	; 0x2d
 80079a8:	4276      	negs	r6, r6
 80079aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ae:	485a      	ldr	r0, [pc, #360]	; (8007b18 <_printf_i+0x23c>)
 80079b0:	230a      	movs	r3, #10
 80079b2:	e012      	b.n	80079da <_printf_i+0xfe>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	6820      	ldr	r0, [r4, #0]
 80079b8:	1d19      	adds	r1, r3, #4
 80079ba:	6029      	str	r1, [r5, #0]
 80079bc:	0605      	lsls	r5, r0, #24
 80079be:	d501      	bpl.n	80079c4 <_printf_i+0xe8>
 80079c0:	681e      	ldr	r6, [r3, #0]
 80079c2:	e002      	b.n	80079ca <_printf_i+0xee>
 80079c4:	0641      	lsls	r1, r0, #25
 80079c6:	d5fb      	bpl.n	80079c0 <_printf_i+0xe4>
 80079c8:	881e      	ldrh	r6, [r3, #0]
 80079ca:	4853      	ldr	r0, [pc, #332]	; (8007b18 <_printf_i+0x23c>)
 80079cc:	2f6f      	cmp	r7, #111	; 0x6f
 80079ce:	bf0c      	ite	eq
 80079d0:	2308      	moveq	r3, #8
 80079d2:	230a      	movne	r3, #10
 80079d4:	2100      	movs	r1, #0
 80079d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079da:	6865      	ldr	r5, [r4, #4]
 80079dc:	60a5      	str	r5, [r4, #8]
 80079de:	2d00      	cmp	r5, #0
 80079e0:	bfa2      	ittt	ge
 80079e2:	6821      	ldrge	r1, [r4, #0]
 80079e4:	f021 0104 	bicge.w	r1, r1, #4
 80079e8:	6021      	strge	r1, [r4, #0]
 80079ea:	b90e      	cbnz	r6, 80079f0 <_printf_i+0x114>
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	d04b      	beq.n	8007a88 <_printf_i+0x1ac>
 80079f0:	4615      	mov	r5, r2
 80079f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80079f6:	fb03 6711 	mls	r7, r3, r1, r6
 80079fa:	5dc7      	ldrb	r7, [r0, r7]
 80079fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a00:	4637      	mov	r7, r6
 8007a02:	42bb      	cmp	r3, r7
 8007a04:	460e      	mov	r6, r1
 8007a06:	d9f4      	bls.n	80079f2 <_printf_i+0x116>
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d10b      	bne.n	8007a24 <_printf_i+0x148>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	07de      	lsls	r6, r3, #31
 8007a10:	d508      	bpl.n	8007a24 <_printf_i+0x148>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6861      	ldr	r1, [r4, #4]
 8007a16:	4299      	cmp	r1, r3
 8007a18:	bfde      	ittt	le
 8007a1a:	2330      	movle	r3, #48	; 0x30
 8007a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a24:	1b52      	subs	r2, r2, r5
 8007a26:	6122      	str	r2, [r4, #16]
 8007a28:	f8cd a000 	str.w	sl, [sp]
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	aa03      	add	r2, sp, #12
 8007a30:	4621      	mov	r1, r4
 8007a32:	4640      	mov	r0, r8
 8007a34:	f7ff fee4 	bl	8007800 <_printf_common>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d14a      	bne.n	8007ad2 <_printf_i+0x1f6>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	b004      	add	sp, #16
 8007a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	f043 0320 	orr.w	r3, r3, #32
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	4833      	ldr	r0, [pc, #204]	; (8007b1c <_printf_i+0x240>)
 8007a50:	2778      	movs	r7, #120	; 0x78
 8007a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	6829      	ldr	r1, [r5, #0]
 8007a5a:	061f      	lsls	r7, r3, #24
 8007a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a60:	d402      	bmi.n	8007a68 <_printf_i+0x18c>
 8007a62:	065f      	lsls	r7, r3, #25
 8007a64:	bf48      	it	mi
 8007a66:	b2b6      	uxthmi	r6, r6
 8007a68:	07df      	lsls	r7, r3, #31
 8007a6a:	bf48      	it	mi
 8007a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8007a70:	6029      	str	r1, [r5, #0]
 8007a72:	bf48      	it	mi
 8007a74:	6023      	strmi	r3, [r4, #0]
 8007a76:	b91e      	cbnz	r6, 8007a80 <_printf_i+0x1a4>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	f023 0320 	bic.w	r3, r3, #32
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	2310      	movs	r3, #16
 8007a82:	e7a7      	b.n	80079d4 <_printf_i+0xf8>
 8007a84:	4824      	ldr	r0, [pc, #144]	; (8007b18 <_printf_i+0x23c>)
 8007a86:	e7e4      	b.n	8007a52 <_printf_i+0x176>
 8007a88:	4615      	mov	r5, r2
 8007a8a:	e7bd      	b.n	8007a08 <_printf_i+0x12c>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	6826      	ldr	r6, [r4, #0]
 8007a90:	6961      	ldr	r1, [r4, #20]
 8007a92:	1d18      	adds	r0, r3, #4
 8007a94:	6028      	str	r0, [r5, #0]
 8007a96:	0635      	lsls	r5, r6, #24
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	d501      	bpl.n	8007aa0 <_printf_i+0x1c4>
 8007a9c:	6019      	str	r1, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <_printf_i+0x1ca>
 8007aa0:	0670      	lsls	r0, r6, #25
 8007aa2:	d5fb      	bpl.n	8007a9c <_printf_i+0x1c0>
 8007aa4:	8019      	strh	r1, [r3, #0]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	4615      	mov	r5, r2
 8007aac:	e7bc      	b.n	8007a28 <_printf_i+0x14c>
 8007aae:	682b      	ldr	r3, [r5, #0]
 8007ab0:	1d1a      	adds	r2, r3, #4
 8007ab2:	602a      	str	r2, [r5, #0]
 8007ab4:	681d      	ldr	r5, [r3, #0]
 8007ab6:	6862      	ldr	r2, [r4, #4]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7f8 fb98 	bl	80001f0 <memchr>
 8007ac0:	b108      	cbz	r0, 8007ac6 <_printf_i+0x1ea>
 8007ac2:	1b40      	subs	r0, r0, r5
 8007ac4:	6060      	str	r0, [r4, #4]
 8007ac6:	6863      	ldr	r3, [r4, #4]
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	2300      	movs	r3, #0
 8007acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad0:	e7aa      	b.n	8007a28 <_printf_i+0x14c>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	462a      	mov	r2, r5
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4640      	mov	r0, r8
 8007ada:	47d0      	blx	sl
 8007adc:	3001      	adds	r0, #1
 8007ade:	d0ad      	beq.n	8007a3c <_printf_i+0x160>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	079b      	lsls	r3, r3, #30
 8007ae4:	d413      	bmi.n	8007b0e <_printf_i+0x232>
 8007ae6:	68e0      	ldr	r0, [r4, #12]
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	4298      	cmp	r0, r3
 8007aec:	bfb8      	it	lt
 8007aee:	4618      	movlt	r0, r3
 8007af0:	e7a6      	b.n	8007a40 <_printf_i+0x164>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4632      	mov	r2, r6
 8007af6:	4649      	mov	r1, r9
 8007af8:	4640      	mov	r0, r8
 8007afa:	47d0      	blx	sl
 8007afc:	3001      	adds	r0, #1
 8007afe:	d09d      	beq.n	8007a3c <_printf_i+0x160>
 8007b00:	3501      	adds	r5, #1
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	9903      	ldr	r1, [sp, #12]
 8007b06:	1a5b      	subs	r3, r3, r1
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dcf2      	bgt.n	8007af2 <_printf_i+0x216>
 8007b0c:	e7eb      	b.n	8007ae6 <_printf_i+0x20a>
 8007b0e:	2500      	movs	r5, #0
 8007b10:	f104 0619 	add.w	r6, r4, #25
 8007b14:	e7f5      	b.n	8007b02 <_printf_i+0x226>
 8007b16:	bf00      	nop
 8007b18:	08007d19 	.word	0x08007d19
 8007b1c:	08007d2a 	.word	0x08007d2a

08007b20 <memmove>:
 8007b20:	4288      	cmp	r0, r1
 8007b22:	b510      	push	{r4, lr}
 8007b24:	eb01 0402 	add.w	r4, r1, r2
 8007b28:	d902      	bls.n	8007b30 <memmove+0x10>
 8007b2a:	4284      	cmp	r4, r0
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	d807      	bhi.n	8007b40 <memmove+0x20>
 8007b30:	1e43      	subs	r3, r0, #1
 8007b32:	42a1      	cmp	r1, r4
 8007b34:	d008      	beq.n	8007b48 <memmove+0x28>
 8007b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b3e:	e7f8      	b.n	8007b32 <memmove+0x12>
 8007b40:	4402      	add	r2, r0
 8007b42:	4601      	mov	r1, r0
 8007b44:	428a      	cmp	r2, r1
 8007b46:	d100      	bne.n	8007b4a <memmove+0x2a>
 8007b48:	bd10      	pop	{r4, pc}
 8007b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b52:	e7f7      	b.n	8007b44 <memmove+0x24>

08007b54 <_sbrk_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d06      	ldr	r5, [pc, #24]	; (8007b70 <_sbrk_r+0x1c>)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	f7f9 fc20 	bl	80013a4 <_sbrk>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_sbrk_r+0x1a>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_sbrk_r+0x1a>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	20004880 	.word	0x20004880

08007b74 <_realloc_r>:
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	4680      	mov	r8, r0
 8007b7a:	4614      	mov	r4, r2
 8007b7c:	460e      	mov	r6, r1
 8007b7e:	b921      	cbnz	r1, 8007b8a <_realloc_r+0x16>
 8007b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	4611      	mov	r1, r2
 8007b86:	f7ff bc57 	b.w	8007438 <_malloc_r>
 8007b8a:	b92a      	cbnz	r2, 8007b98 <_realloc_r+0x24>
 8007b8c:	f7ff fbe8 	bl	8007360 <_free_r>
 8007b90:	4625      	mov	r5, r4
 8007b92:	4628      	mov	r0, r5
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	f000 f81b 	bl	8007bd2 <_malloc_usable_size_r>
 8007b9c:	4284      	cmp	r4, r0
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	d802      	bhi.n	8007ba8 <_realloc_r+0x34>
 8007ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ba6:	d812      	bhi.n	8007bce <_realloc_r+0x5a>
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4640      	mov	r0, r8
 8007bac:	f7ff fc44 	bl	8007438 <_malloc_r>
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0ed      	beq.n	8007b92 <_realloc_r+0x1e>
 8007bb6:	42bc      	cmp	r4, r7
 8007bb8:	4622      	mov	r2, r4
 8007bba:	4631      	mov	r1, r6
 8007bbc:	bf28      	it	cs
 8007bbe:	463a      	movcs	r2, r7
 8007bc0:	f7ff fbc0 	bl	8007344 <memcpy>
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f7ff fbca 	bl	8007360 <_free_r>
 8007bcc:	e7e1      	b.n	8007b92 <_realloc_r+0x1e>
 8007bce:	4635      	mov	r5, r6
 8007bd0:	e7df      	b.n	8007b92 <_realloc_r+0x1e>

08007bd2 <_malloc_usable_size_r>:
 8007bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd6:	1f18      	subs	r0, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bfbc      	itt	lt
 8007bdc:	580b      	ldrlt	r3, [r1, r0]
 8007bde:	18c0      	addlt	r0, r0, r3
 8007be0:	4770      	bx	lr
	...

08007be4 <_init>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr

08007bf0 <_fini>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr
