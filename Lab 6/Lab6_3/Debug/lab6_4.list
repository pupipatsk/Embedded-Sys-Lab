
lab6_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f6c  08005f6c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f74  08005f74  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f78  08005f78  00015f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  20000060  08005fdc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004780  08005fdc  00024780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f32e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ea  00000000  00000000  0002f401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00031cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a16  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bea  00000000  00000000  0003343e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb8f  00000000  00000000  0004a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb91  00000000  00000000  00058bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a40  00000000  00000000  000e7748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b4  00000000  00000000  000eb188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005db4 	.word	0x08005db4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005db4 	.word	0x08005db4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	200000d0 	.word	0x200000d0

080005c0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetTimerTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetTimerTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005de:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200002d0 	.word	0x200002d0
 80005f0:	20000324 	.word	0x20000324

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b0c0      	sub	sp, #256	; 0x100
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc0d 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f919 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f9a9 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f97d 	bl	8000904 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000616:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f876 	bl	800270c <osMutexCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a6b      	ldr	r2, [pc, #428]	; (80007d0 <main+0x1dc>)
 8000624:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8000626:	4b6b      	ldr	r3, [pc, #428]	; (80007d4 <main+0x1e0>)
 8000628:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000632:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f832 	bl	80026a4 <osTimerCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a65      	ldr	r2, [pc, #404]	; (80007d8 <main+0x1e4>)
 8000644:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 8000646:	4b65      	ldr	r3, [pc, #404]	; (80007dc <main+0x1e8>)
 8000648:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerPeriodic, NULL);
 8000652:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000656:	2200      	movs	r2, #0
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f822 	bl	80026a4 <osTimerCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a5f      	ldr	r2, [pc, #380]	; (80007e0 <main+0x1ec>)
 8000664:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer03 */
  osTimerDef(myTimer03, Callback03);
 8000666:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <main+0x1f0>)
 8000668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  myTimer03Handle = osTimerCreate(osTimer(myTimer03), osTimerPeriodic, NULL);
 8000672:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000676:	2200      	movs	r2, #0
 8000678:	2101      	movs	r1, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f812 	bl	80026a4 <osTimerCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a59      	ldr	r2, [pc, #356]	; (80007e8 <main+0x1f4>)
 8000684:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer04 */
  osTimerDef(myTimer04, Callback04);
 8000686:	4b59      	ldr	r3, [pc, #356]	; (80007ec <main+0x1f8>)
 8000688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  myTimer04Handle = osTimerCreate(osTimer(myTimer04), osTimerPeriodic, NULL);
 8000692:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000696:	2200      	movs	r2, #0
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f802 	bl	80026a4 <osTimerCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a53      	ldr	r2, [pc, #332]	; (80007f0 <main+0x1fc>)
 80006a4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint32_t);
 80006a6:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <main+0x200>)
 80006a8:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80006ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80006b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f83f 	bl	800273c <osMessageCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a4d      	ldr	r2, [pc, #308]	; (80007f8 <main+0x204>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006c4:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <main+0x208>)
 80006c6:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 ff7f 	bl	80025e2 <osThreadCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a46      	ldr	r2, [pc, #280]	; (8000800 <main+0x20c>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <main+0x210>)
 80006ec:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80006fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff6c 	bl	80025e2 <osThreadCreate>
 800070a:	4603      	mov	r3, r0
 800070c:	4a3e      	ldr	r2, [pc, #248]	; (8000808 <main+0x214>)
 800070e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000710:	4b3e      	ldr	r3, [pc, #248]	; (800080c <main+0x218>)
 8000712:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000716:	461d      	mov	r5, r3
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000724:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f001 ff59 	bl	80025e2 <osThreadCreate>
 8000730:	4603      	mov	r3, r0
 8000732:	4a37      	ldr	r2, [pc, #220]	; (8000810 <main+0x21c>)
 8000734:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000736:	4b37      	ldr	r3, [pc, #220]	; (8000814 <main+0x220>)
 8000738:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800073c:	461d      	mov	r5, r3
 800073e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800074a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f001 ff46 	bl	80025e2 <osThreadCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <main+0x224>)
 800075a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 800075c:	4b2f      	ldr	r3, [pc, #188]	; (800081c <main+0x228>)
 800075e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000770:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 ff33 	bl	80025e2 <osThreadCreate>
 800077c:	4603      	mov	r3, r0
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <main+0x22c>)
 8000780:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityIdle, 0, 128);
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <main+0x230>)
 8000784:	f107 0420 	add.w	r4, r7, #32
 8000788:	461d      	mov	r5, r3
 800078a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f001 ff20 	bl	80025e2 <osThreadCreate>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a20      	ldr	r2, [pc, #128]	; (8000828 <main+0x234>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityIdle, 0, 128);
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <main+0x238>)
 80007aa:	1d3c      	adds	r4, r7, #4
 80007ac:	461d      	mov	r5, r3
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ff0f 	bl	80025e2 <osThreadCreate>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <main+0x23c>)
 80007c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ca:	f001 ff03 	bl	80025d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x1da>
 80007d0:	2000079c 	.word	0x2000079c
 80007d4:	08000ba9 	.word	0x08000ba9
 80007d8:	2000078c 	.word	0x2000078c
 80007dc:	08000bbd 	.word	0x08000bbd
 80007e0:	20000790 	.word	0x20000790
 80007e4:	08000bd1 	.word	0x08000bd1
 80007e8:	20000794 	.word	0x20000794
 80007ec:	08000be5 	.word	0x08000be5
 80007f0:	20000798 	.word	0x20000798
 80007f4:	08005dcc 	.word	0x08005dcc
 80007f8:	20000788 	.word	0x20000788
 80007fc:	08005de8 	.word	0x08005de8
 8000800:	2000076c 	.word	0x2000076c
 8000804:	08005e10 	.word	0x08005e10
 8000808:	20000770 	.word	0x20000770
 800080c:	08005e38 	.word	0x08005e38
 8000810:	20000774 	.word	0x20000774
 8000814:	08005e60 	.word	0x08005e60
 8000818:	20000778 	.word	0x20000778
 800081c:	08005e88 	.word	0x08005e88
 8000820:	2000077c 	.word	0x2000077c
 8000824:	08005eb0 	.word	0x08005eb0
 8000828:	20000780 	.word	0x20000780
 800082c:	08005ed8 	.word	0x08005ed8
 8000830:	20000784 	.word	0x20000784

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	; 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fe32 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <SystemClock_Config+0xc8>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a26      	ldr	r2, [pc, #152]	; (80008fc <SystemClock_Config+0xc8>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <SystemClock_Config+0xc8>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <SystemClock_Config+0xcc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <SystemClock_Config+0xcc>)
 800087e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <SystemClock_Config+0xcc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fdbd 	bl	8001438 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c4:	f000 f998 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f81f 	bl	8001928 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008f0:	f000 f982 	bl	8000bf8 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f001 fa14 	bl	8001d68 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f957 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000724 	.word	0x20000724
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <MX_GPIO_Init+0xfc>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_GPIO_Init+0xfc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <MX_GPIO_Init+0xfc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <MX_GPIO_Init+0x100>)
 80009e6:	f000 fcf3 	bl	80013d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_GPIO_Init+0x104>)
 80009f0:	f000 fcee 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <MX_GPIO_Init+0x108>)
 8000a0c:	f000 fb5c 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a10:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8000a14:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <MX_GPIO_Init+0x100>)
 8000a2a:	f000 fb4d 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0x104>)
 8000a46:	f000 fb3f 	bl	80010c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800

08000a64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
//	osThreadDef(led, led_thread, osPriorityNormal, 0, 128);
//	osThreadId ledTaskHandle = osThreadCreate(osThread(led), NULL);
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <StartDefaultTask+0x18>)
 8000a70:	f000 fcc7 	bl	8001402 <HAL_GPIO_TogglePin>
    osDelay(50);
 8000a74:	2032      	movs	r0, #50	; 0x32
 8000a76:	f001 fe00 	bl	800267a <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a7a:	e7f7      	b.n	8000a6c <StartDefaultTask+0x8>
 8000a7c:	40020000 	.word	0x40020000

08000a80 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <StartTask02+0x18>)
 8000a8c:	f000 fcb9 	bl	8001402 <HAL_GPIO_TogglePin>
	      osDelay(18);
 8000a90:	2012      	movs	r0, #18
 8000a92:	f001 fdf2 	bl	800267a <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000a96:	e7f7      	b.n	8000a88 <StartTask02+0x8>
 8000a98:	40020000 	.word	0x40020000

08000a9c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <StartTask03+0x18>)
 8000aa8:	f000 fcab 	bl	8001402 <HAL_GPIO_TogglePin>
	  	      osDelay(128);
 8000aac:	2080      	movs	r0, #128	; 0x80
 8000aae:	f001 fde4 	bl	800267a <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000ab2:	e7f7      	b.n	8000aa4 <StartTask03+0x8>
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
 for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <StartTask04+0x18>)
 8000ac4:	f000 fc9d 	bl	8001402 <HAL_GPIO_TogglePin>
	  	      osDelay(64);
 8000ac8:	2040      	movs	r0, #64	; 0x40
 8000aca:	f001 fdd6 	bl	800267a <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000ace:	e7f7      	b.n	8000ac0 <StartTask04+0x8>
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
	int threadID = 0; // threadID is 0 for one thread and 1 for another
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
	    int idx = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	    uint8_t buffer[32];
	    while(1) {
	    sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000ae4:	f107 0008 	add.w	r0, r7, #8
 8000ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aec:	4909      	ldr	r1, [pc, #36]	; (8000b14 <StartTask05+0x40>)
 8000aee:	f004 fcbd 	bl	800546c <siprintf>
	    osMessagePut(myQueue01Handle, buffer, osWaitForever);
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <StartTask05+0x44>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f107 0108 	add.w	r1, r7, #8
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fe44 	bl	800278c <osMessagePut>
	    idx ++;
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	3301      	adds	r3, #1
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c

	    osDelay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 fdb5 	bl	800267a <osDelay>
	    while(1) {
 8000b10:	e7e8      	b.n	8000ae4 <StartTask05+0x10>
 8000b12:	bf00      	nop
 8000b14:	08005ef4 	.word	0x08005ef4
 8000b18:	20000788 	.word	0x20000788

08000b1c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
	int threadID = 1; // threadID is 0 for one thread and 1 for another
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
		    int idx = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		    uint8_t buffer[32];
		    while(1) {
		    sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000b2c:	f107 0008 	add.w	r0, r7, #8
 8000b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b34:	4909      	ldr	r1, [pc, #36]	; (8000b5c <StartTask06+0x40>)
 8000b36:	f004 fc99 	bl	800546c <siprintf>
		    osMessagePut(myQueue01Handle, buffer, osWaitForever);
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <StartTask06+0x44>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f107 0108 	add.w	r1, r7, #8
 8000b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fe20 	bl	800278c <osMessagePut>
		    idx ++;
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	3301      	adds	r3, #1
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c

		    osDelay(10);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f001 fd91 	bl	800267a <osDelay>
		    while(1) {
 8000b58:	e7e8      	b.n	8000b2c <StartTask06+0x10>
 8000b5a:	bf00      	nop
 8000b5c:	08005ef4 	.word	0x08005ef4
 8000b60:	20000788 	.word	0x20000788

08000b64 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
    {
        while(1){
            osEvent evt=osMessageGet(myQueue01Handle, osWaitForever);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <StartTask07+0x3c>)
 8000b6e:	6819      	ldr	r1, [r3, #0]
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fe47 	bl	800280c <osMessageGet>
            if(evt.status == osEventMessage){
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b10      	cmp	r3, #16
 8000b82:	d1f3      	bne.n	8000b6c <StartTask07+0x8>
                HAL_UART_Transmit(&huart2, evt.value.p, strlen(evt.value.p), 1000);
 8000b84:	693c      	ldr	r4, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fb29 	bl	80001e0 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	4621      	mov	r1, r4
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <StartTask07+0x40>)
 8000b9a:	f001 f935 	bl	8001e08 <HAL_UART_Transmit>
        while(1){
 8000b9e:	e7e5      	b.n	8000b6c <StartTask07+0x8>
 8000ba0:	20000788 	.word	0x20000788
 8000ba4:	20000724 	.word	0x20000724

08000ba8 <Callback01>:
  /* USER CODE END StartTask07 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */

  /* USER CODE END Callback02 */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <Callback03>:

/* Callback03 function */
void Callback03(void const * argument)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback03 */

  /* USER CODE END Callback03 */
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <Callback04>:

/* Callback04 function */
void Callback04(void const * argument)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback04 */

  /* USER CODE END Callback04 */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_MspInit+0x54>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_MspInit+0x54>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x54>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_MspInit+0x54>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_MspInit+0x54>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_MspInit+0x54>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f000 fa14 	bl	8001076 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_MspInit+0x8c>)
 8000cd2:	f000 f9f9 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8ce 	bl	8000ebc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d20:	f003 fa92 	bl	8004248 <xTaskGetSchedulerState>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d2a:	f004 f925 	bl	8004f78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f004 fbaa 	bl	80054bc <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20020000 	.word	0x20020000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	200007a0 	.word	0x200007a0
 8000d9c:	20004780 	.word	0x20004780

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f004 fb69 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fbfd 	bl	80005f4 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e08:	08005f7c 	.word	0x08005f7c
  ldr r2, =_sbss
 8000e0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e10:	20004780 	.word	0x20004780

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f90d 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff feda 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f917 	bl	80010ae <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e98:	f000 f8ed 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	200007a4 	.word	0x200007a4

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200007a4 	.word	0x200007a4

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff47 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff5c 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff8e 	bl	8000fb4 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffb0 	bl	800101c <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e159      	b.n	8001398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8148 	bne.w	8001392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	2b02      	cmp	r3, #2
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b03      	cmp	r3, #3
 8001186:	d017      	beq.n	80011b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d123      	bne.n	800120c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	69b9      	ldr	r1, [r7, #24]
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a2 	beq.w	8001392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a56      	ldr	r2, [pc, #344]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a49      	ldr	r2, [pc, #292]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x202>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a48      	ldr	r2, [pc, #288]	; (80013bc <HAL_GPIO_Init+0x2f4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x1fe>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <HAL_GPIO_Init+0x2f8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x1fa>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <HAL_GPIO_Init+0x2fc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x1f6>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a45      	ldr	r2, [pc, #276]	; (80013c8 <HAL_GPIO_Init+0x300>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x1f2>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x304>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_GPIO_Init+0x304>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x304>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_GPIO_Init+0x304>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f aea2 	bls.w	80010e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	041a      	lsls	r2, r3, #16
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43d9      	mvns	r1, r3
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	400b      	ands	r3, r1
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e267      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d075      	beq.n	8001542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d00c      	beq.n	800147c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d112      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b82      	ldr	r3, [pc, #520]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b7e      	ldr	r3, [pc, #504]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05b      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d157      	bne.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e242      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x74>
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a75      	ldr	r2, [pc, #468]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b70      	ldr	r3, [pc, #448]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6f      	ldr	r2, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6c      	ldr	r2, [pc, #432]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014d0:	4b69      	ldr	r3, [pc, #420]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a68      	ldr	r2, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fcf8 	bl	8000ee4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fcf4 	bl	8000ee4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e207      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fce4 	bl	8000ee4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fce0 	bl	8000ee4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1f3      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0xe8>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b44      	ldr	r3, [pc, #272]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1c7      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4937      	ldr	r1, [pc, #220]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_RCC_OscConfig+0x244>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc99 	bl	8000ee4 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc95 	bl	8000ee4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1a8      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4925      	ldr	r1, [pc, #148]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_RCC_OscConfig+0x244>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc78 	bl	8000ee4 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc74 	bl	8000ee4 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e187      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d036      	beq.n	8001690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_RCC_OscConfig+0x248>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fc58 	bl	8000ee4 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc54 	bl	8000ee4 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e167      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_OscConfig+0x240>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x200>
 8001656:	e01b      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_OscConfig+0x248>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fc41 	bl	8000ee4 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	e00e      	b.n	8001684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fc3d 	bl	8000ee4 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d907      	bls.n	8001684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e150      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
 8001678:	40023800 	.word	0x40023800
 800167c:	42470000 	.word	0x42470000
 8001680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001684:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ea      	bne.n	8001666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8097 	beq.w	80017cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b77      	ldr	r3, [pc, #476]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b74      	ldr	r3, [pc, #464]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a73      	ldr	r2, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbfd 	bl	8000ee4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff fbf9 	bl	8000ee4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e10c      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x474>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x2ea>
 8001714:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a63      	ldr	r2, [pc, #396]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	e01c      	b.n	800175c <HAL_RCC_OscConfig+0x324>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x30c>
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a5e      	ldr	r2, [pc, #376]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a5b      	ldr	r2, [pc, #364]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0x324>
 8001744:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a54      	ldr	r2, [pc, #336]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001756:	f023 0304 	bic.w	r3, r3, #4
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d015      	beq.n	8001790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fbbe 	bl	8000ee4 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fbba 	bl	8000ee4 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0cb      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0ee      	beq.n	800176c <HAL_RCC_OscConfig+0x334>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fba8 	bl	8000ee4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	e00a      	b.n	80017ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7ff fba4 	bl	8000ee4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e0b5      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ee      	bne.n	8001798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a38      	ldr	r2, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80a1 	beq.w	8001918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d05c      	beq.n	800189c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d141      	bne.n	800186e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb78 	bl	8000ee4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fb74 	bl	8000ee4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e087      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	3b01      	subs	r3, #1
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	491b      	ldr	r1, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x478>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb4d 	bl	8000ee4 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fb49 	bl	8000ee4 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e05c      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x416>
 800186c:	e054      	b.n	8001918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_RCC_OscConfig+0x478>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb36 	bl	8000ee4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb32 	bl	8000ee4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e045      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_OscConfig+0x470>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x444>
 800189a:	e03d      	b.n	8001918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e038      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000
 80018b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x4ec>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d028      	beq.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d121      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d11a      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0cc      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90c      	bls.n	8001964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0b8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	494d      	ldr	r1, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d044      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d119      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e067      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4934      	ldr	r1, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff fa64 	bl	8000ee4 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff fa60 	bl	8000ee4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e04f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 020c 	and.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1eb      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d20c      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e032      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aae:	f000 f821 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f9c4 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	08005f20 	.word	0x08005f20
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af8:	b094      	sub	sp, #80	; 0x50
 8001afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
 8001b00:	2300      	movs	r3, #0
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b04:	2300      	movs	r3, #0
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0c:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d00d      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x40>
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	f200 80e1 	bhi.w	8001ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x34>
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b26:	e0db      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b2c:	e0db      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b32:	e0d8      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b34:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3e:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d063      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	2200      	movs	r2, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
 8001b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b66:	4622      	mov	r2, r4
 8001b68:	462b      	mov	r3, r5
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	0159      	lsls	r1, r3, #5
 8001b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b78:	0150      	lsls	r0, r2, #5
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4621      	mov	r1, r4
 8001b80:	1a51      	subs	r1, r2, r1
 8001b82:	6139      	str	r1, [r7, #16]
 8001b84:	4629      	mov	r1, r5
 8001b86:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b98:	4659      	mov	r1, fp
 8001b9a:	018b      	lsls	r3, r1, #6
 8001b9c:	4651      	mov	r1, sl
 8001b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	018a      	lsls	r2, r1, #6
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8001bac:	4659      	mov	r1, fp
 8001bae:	eb63 0901 	sbc.w	r9, r3, r1
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc6:	4690      	mov	r8, r2
 8001bc8:	4699      	mov	r9, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	eb18 0303 	adds.w	r3, r8, r3
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	462b      	mov	r3, r5
 8001bd4:	eb49 0303 	adc.w	r3, r9, r3
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be6:	4629      	mov	r1, r5
 8001be8:	024b      	lsls	r3, r1, #9
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	024a      	lsls	r2, r1, #9
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c04:	f7fe fb44 	bl	8000290 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c10:	e058      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c22:	623b      	str	r3, [r7, #32]
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c2c:	4642      	mov	r2, r8
 8001c2e:	464b      	mov	r3, r9
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	0159      	lsls	r1, r3, #5
 8001c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3e:	0150      	lsls	r0, r2, #5
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4641      	mov	r1, r8
 8001c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c64:	ebb2 040a 	subs.w	r4, r2, sl
 8001c68:	eb63 050b 	sbc.w	r5, r3, fp
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	00eb      	lsls	r3, r5, #3
 8001c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7a:	00e2      	lsls	r2, r4, #3
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	461d      	mov	r5, r3
 8001c80:	4643      	mov	r3, r8
 8001c82:	18e3      	adds	r3, r4, r3
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	464b      	mov	r3, r9
 8001c88:	eb45 0303 	adc.w	r3, r5, r3
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	028b      	lsls	r3, r1, #10
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	028a      	lsls	r2, r1, #10
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	61fa      	str	r2, [r7, #28]
 8001cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb8:	f7fe faea 	bl	8000290 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cde:	e002      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3750      	adds	r7, #80	; 0x50
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a9b      	lsrs	r3, r3, #10
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08005f30 	.word	0x08005f30

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d44:	f7ff ffdc 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0b5b      	lsrs	r3, r3, #13
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08005f30 	.word	0x08005f30

08001d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e042      	b.n	8001e00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe ff64 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2224      	movs	r2, #36	; 0x24
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f973 	bl	8002098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d175      	bne.n	8001f14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_UART_Transmit+0x2c>
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e06e      	b.n	8001f16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2221      	movs	r2, #33	; 0x21
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e46:	f7ff f84d 	bl	8000ee4 <HAL_GetTick>
 8001e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	88fa      	ldrh	r2, [r7, #6]
 8001e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e60:	d108      	bne.n	8001e74 <HAL_UART_Transmit+0x6c>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	e003      	b.n	8001e7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e7c:	e02e      	b.n	8001edc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2200      	movs	r2, #0
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f848 	bl	8001f1e <UART_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e03a      	b.n	8001f16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	e007      	b.n	8001ece <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1cb      	bne.n	8001e7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2200      	movs	r2, #0
 8001eee:	2140      	movs	r1, #64	; 0x40
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f814 	bl	8001f1e <UART_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e006      	b.n	8001f16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2e:	e03b      	b.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f36:	d037      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f38:	f7fe ffd4 	bl	8000ee4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	6a3a      	ldr	r2, [r7, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d302      	bcc.n	8001f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e03a      	b.n	8001fc8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d023      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	d020      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d01d      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d116      	bne.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f81d 	bl	8001fd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2208      	movs	r2, #8
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e00f      	b.n	8001fc8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d0b4      	beq.n	8001f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b095      	sub	sp, #84	; 0x54
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	e853 3f00 	ldrex	r3, [r3]
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ff8:	643a      	str	r2, [r7, #64]	; 0x40
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002000:	e841 2300 	strex	r3, r2, [r1]
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e5      	bne.n	8001fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3314      	adds	r3, #20
 8002012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	e853 3f00 	ldrex	r3, [r3]
 800201a:	61fb      	str	r3, [r7, #28]
   return(result);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3314      	adds	r3, #20
 800202a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800202c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002034:	e841 2300 	strex	r3, r2, [r1]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e5      	bne.n	800200c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	2b01      	cmp	r3, #1
 8002046:	d119      	bne.n	800207c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	e853 3f00 	ldrex	r3, [r3]
 8002056:	60bb      	str	r3, [r7, #8]
   return(result);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f023 0310 	bic.w	r3, r3, #16
 800205e:	647b      	str	r3, [r7, #68]	; 0x44
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	330c      	adds	r3, #12
 8002066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002068:	61ba      	str	r2, [r7, #24]
 800206a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206c:	6979      	ldr	r1, [r7, #20]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	e841 2300 	strex	r3, r2, [r1]
 8002074:	613b      	str	r3, [r7, #16]
   return(result);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e5      	bne.n	8002048 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800208a:	bf00      	nop
 800208c:	3754      	adds	r7, #84	; 0x54
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800209c:	b0c0      	sub	sp, #256	; 0x100
 800209e:	af00      	add	r7, sp, #0
 80020a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	ea40 0301 	orr.w	r3, r0, r1
 80020c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020f0:	f021 010c 	bic.w	r1, r1, #12
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020fe:	430b      	orrs	r3, r1
 8002100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	6999      	ldr	r1, [r3, #24]
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	ea40 0301 	orr.w	r3, r0, r1
 800211e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b8f      	ldr	r3, [pc, #572]	; (8002364 <UART_SetConfig+0x2cc>)
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <UART_SetConfig+0xa0>
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b8d      	ldr	r3, [pc, #564]	; (8002368 <UART_SetConfig+0x2d0>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d104      	bne.n	8002142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002138:	f7ff fe02 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 800213c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002140:	e003      	b.n	800214a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002142:	f7ff fde9 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8002146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002154:	f040 810c 	bne.w	8002370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215c:	2200      	movs	r2, #0
 800215e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800216a:	4622      	mov	r2, r4
 800216c:	462b      	mov	r3, r5
 800216e:	1891      	adds	r1, r2, r2
 8002170:	65b9      	str	r1, [r7, #88]	; 0x58
 8002172:	415b      	adcs	r3, r3
 8002174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800217a:	4621      	mov	r1, r4
 800217c:	eb12 0801 	adds.w	r8, r2, r1
 8002180:	4629      	mov	r1, r5
 8002182:	eb43 0901 	adc.w	r9, r3, r1
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	eb18 0303 	adds.w	r3, r8, r3
 80021a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021a8:	462b      	mov	r3, r5
 80021aa:	eb49 0303 	adc.w	r3, r9, r3
 80021ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021c6:	460b      	mov	r3, r1
 80021c8:	18db      	adds	r3, r3, r3
 80021ca:	653b      	str	r3, [r7, #80]	; 0x50
 80021cc:	4613      	mov	r3, r2
 80021ce:	eb42 0303 	adc.w	r3, r2, r3
 80021d2:	657b      	str	r3, [r7, #84]	; 0x54
 80021d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021dc:	f7fe f858 	bl	8000290 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4b61      	ldr	r3, [pc, #388]	; (800236c <UART_SetConfig+0x2d4>)
 80021e6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	011c      	lsls	r4, r3, #4
 80021ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	1891      	adds	r1, r2, r2
 8002206:	64b9      	str	r1, [r7, #72]	; 0x48
 8002208:	415b      	adcs	r3, r3
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800220c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002210:	4641      	mov	r1, r8
 8002212:	eb12 0a01 	adds.w	sl, r2, r1
 8002216:	4649      	mov	r1, r9
 8002218:	eb43 0b01 	adc.w	fp, r3, r1
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800222c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002230:	4692      	mov	sl, r2
 8002232:	469b      	mov	fp, r3
 8002234:	4643      	mov	r3, r8
 8002236:	eb1a 0303 	adds.w	r3, sl, r3
 800223a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800223e:	464b      	mov	r3, r9
 8002240:	eb4b 0303 	adc.w	r3, fp, r3
 8002244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800225c:	460b      	mov	r3, r1
 800225e:	18db      	adds	r3, r3, r3
 8002260:	643b      	str	r3, [r7, #64]	; 0x40
 8002262:	4613      	mov	r3, r2
 8002264:	eb42 0303 	adc.w	r3, r2, r3
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
 800226a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800226e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002272:	f7fe f80d 	bl	8000290 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4611      	mov	r1, r2
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <UART_SetConfig+0x2d4>)
 800227e:	fba3 2301 	umull	r2, r3, r3, r1
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2264      	movs	r2, #100	; 0x64
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	1acb      	subs	r3, r1, r3
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <UART_SetConfig+0x2d4>)
 8002294:	fba3 2302 	umull	r2, r3, r3, r2
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a0:	441c      	add	r4, r3
 80022a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a6:	2200      	movs	r2, #0
 80022a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	1891      	adds	r1, r2, r2
 80022ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80022bc:	415b      	adcs	r3, r3
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022c4:	4641      	mov	r1, r8
 80022c6:	1851      	adds	r1, r2, r1
 80022c8:	6339      	str	r1, [r7, #48]	; 0x30
 80022ca:	4649      	mov	r1, r9
 80022cc:	414b      	adcs	r3, r1
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022dc:	4659      	mov	r1, fp
 80022de:	00cb      	lsls	r3, r1, #3
 80022e0:	4651      	mov	r1, sl
 80022e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e6:	4651      	mov	r1, sl
 80022e8:	00ca      	lsls	r2, r1, #3
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	4642      	mov	r2, r8
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022f8:	464b      	mov	r3, r9
 80022fa:	460a      	mov	r2, r1
 80022fc:	eb42 0303 	adc.w	r3, r2, r3
 8002300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002318:	460b      	mov	r3, r1
 800231a:	18db      	adds	r3, r3, r3
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 800231e:	4613      	mov	r3, r2
 8002320:	eb42 0303 	adc.w	r3, r2, r3
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800232a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800232e:	f7fd ffaf 	bl	8000290 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <UART_SetConfig+0x2d4>)
 8002338:	fba3 1302 	umull	r1, r3, r3, r2
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	2164      	movs	r1, #100	; 0x64
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	3332      	adds	r3, #50	; 0x32
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <UART_SetConfig+0x2d4>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	f003 0207 	and.w	r2, r3, #7
 8002356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4422      	add	r2, r4
 800235e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002360:	e106      	b.n	8002570 <UART_SetConfig+0x4d8>
 8002362:	bf00      	nop
 8002364:	40011000 	.word	0x40011000
 8002368:	40011400 	.word	0x40011400
 800236c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002374:	2200      	movs	r2, #0
 8002376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800237a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800237e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002382:	4642      	mov	r2, r8
 8002384:	464b      	mov	r3, r9
 8002386:	1891      	adds	r1, r2, r2
 8002388:	6239      	str	r1, [r7, #32]
 800238a:	415b      	adcs	r3, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002392:	4641      	mov	r1, r8
 8002394:	1854      	adds	r4, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb43 0501 	adc.w	r5, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	00eb      	lsls	r3, r5, #3
 80023a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023aa:	00e2      	lsls	r2, r4, #3
 80023ac:	4614      	mov	r4, r2
 80023ae:	461d      	mov	r5, r3
 80023b0:	4643      	mov	r3, r8
 80023b2:	18e3      	adds	r3, r4, r3
 80023b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023b8:	464b      	mov	r3, r9
 80023ba:	eb45 0303 	adc.w	r3, r5, r3
 80023be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023de:	4629      	mov	r1, r5
 80023e0:	008b      	lsls	r3, r1, #2
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e8:	4621      	mov	r1, r4
 80023ea:	008a      	lsls	r2, r1, #2
 80023ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023f0:	f7fd ff4e 	bl	8000290 <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4b60      	ldr	r3, [pc, #384]	; (800257c <UART_SetConfig+0x4e4>)
 80023fa:	fba3 2302 	umull	r2, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	011c      	lsls	r4, r3, #4
 8002402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002406:	2200      	movs	r2, #0
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800240c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002414:	4642      	mov	r2, r8
 8002416:	464b      	mov	r3, r9
 8002418:	1891      	adds	r1, r2, r2
 800241a:	61b9      	str	r1, [r7, #24]
 800241c:	415b      	adcs	r3, r3
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002424:	4641      	mov	r1, r8
 8002426:	1851      	adds	r1, r2, r1
 8002428:	6139      	str	r1, [r7, #16]
 800242a:	4649      	mov	r1, r9
 800242c:	414b      	adcs	r3, r1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800243c:	4659      	mov	r1, fp
 800243e:	00cb      	lsls	r3, r1, #3
 8002440:	4651      	mov	r1, sl
 8002442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002446:	4651      	mov	r1, sl
 8002448:	00ca      	lsls	r2, r1, #3
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4603      	mov	r3, r0
 8002450:	4642      	mov	r2, r8
 8002452:	189b      	adds	r3, r3, r2
 8002454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002458:	464b      	mov	r3, r9
 800245a:	460a      	mov	r2, r1
 800245c:	eb42 0303 	adc.w	r3, r2, r3
 8002460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	67bb      	str	r3, [r7, #120]	; 0x78
 800246e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800247c:	4649      	mov	r1, r9
 800247e:	008b      	lsls	r3, r1, #2
 8002480:	4641      	mov	r1, r8
 8002482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002486:	4641      	mov	r1, r8
 8002488:	008a      	lsls	r2, r1, #2
 800248a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800248e:	f7fd feff 	bl	8000290 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4611      	mov	r1, r2
 8002498:	4b38      	ldr	r3, [pc, #224]	; (800257c <UART_SetConfig+0x4e4>)
 800249a:	fba3 2301 	umull	r2, r3, r3, r1
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2264      	movs	r2, #100	; 0x64
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	1acb      	subs	r3, r1, r3
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	3332      	adds	r3, #50	; 0x32
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <UART_SetConfig+0x4e4>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	441c      	add	r4, r3
 80024ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024be:	2200      	movs	r2, #0
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
 80024c2:	677a      	str	r2, [r7, #116]	; 0x74
 80024c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024c8:	4642      	mov	r2, r8
 80024ca:	464b      	mov	r3, r9
 80024cc:	1891      	adds	r1, r2, r2
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	415b      	adcs	r3, r3
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d8:	4641      	mov	r1, r8
 80024da:	1851      	adds	r1, r2, r1
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	4649      	mov	r1, r9
 80024e0:	414b      	adcs	r3, r1
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024f0:	4659      	mov	r1, fp
 80024f2:	00cb      	lsls	r3, r1, #3
 80024f4:	4651      	mov	r1, sl
 80024f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fa:	4651      	mov	r1, sl
 80024fc:	00ca      	lsls	r2, r1, #3
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	4603      	mov	r3, r0
 8002504:	4642      	mov	r2, r8
 8002506:	189b      	adds	r3, r3, r2
 8002508:	66bb      	str	r3, [r7, #104]	; 0x68
 800250a:	464b      	mov	r3, r9
 800250c:	460a      	mov	r2, r1
 800250e:	eb42 0303 	adc.w	r3, r2, r3
 8002512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
 800251e:	667a      	str	r2, [r7, #100]	; 0x64
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800252c:	4649      	mov	r1, r9
 800252e:	008b      	lsls	r3, r1, #2
 8002530:	4641      	mov	r1, r8
 8002532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002536:	4641      	mov	r1, r8
 8002538:	008a      	lsls	r2, r1, #2
 800253a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800253e:	f7fd fea7 	bl	8000290 <__aeabi_uldivmod>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <UART_SetConfig+0x4e4>)
 8002548:	fba3 1302 	umull	r1, r3, r3, r2
 800254c:	095b      	lsrs	r3, r3, #5
 800254e:	2164      	movs	r1, #100	; 0x64
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	3332      	adds	r3, #50	; 0x32
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <UART_SetConfig+0x4e4>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	f003 020f 	and.w	r2, r3, #15
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4422      	add	r2, r4
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002576:	46bd      	mov	sp, r7
 8002578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257c:	51eb851f 	.word	0x51eb851f

08002580 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800258e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002592:	2b84      	cmp	r3, #132	; 0x84
 8002594:	d005      	beq.n	80025a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4413      	add	r3, r2
 800259e:	3303      	adds	r3, #3
 80025a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b6:	f3ef 8305 	mrs	r3, IPSR
 80025ba:	607b      	str	r3, [r7, #4]
  return(result);
 80025bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025d8:	f001 f9f6 	bl	80039c8 <vTaskStartScheduler>
  
  return osOK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e4:	b089      	sub	sp, #36	; 0x24
 80025e6:	af04      	add	r7, sp, #16
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <osThreadCreate+0x54>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01c      	beq.n	8002636 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685c      	ldr	r4, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691e      	ldr	r6, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ffb6 	bl	8002580 <makeFreeRtosPriority>
 8002614:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	9100      	str	r1, [sp, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4632      	mov	r2, r6
 8002628:	4629      	mov	r1, r5
 800262a:	4620      	mov	r0, r4
 800262c:	f001 f804 	bl	8003638 <xTaskCreateStatic>
 8002630:	4603      	mov	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e01c      	b.n	8002670 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685c      	ldr	r4, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002642:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff98 	bl	8002580 <makeFreeRtosPriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	9200      	str	r2, [sp, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	4632      	mov	r2, r6
 800265e:	4629      	mov	r1, r5
 8002660:	4620      	mov	r0, r4
 8002662:	f001 f846 	bl	80036f2 <xTaskCreate>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d001      	beq.n	8002670 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	e000      	b.n	8002672 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800267a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <osDelay+0x16>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	e000      	b.n	8002692 <osDelay+0x18>
 8002690:	2301      	movs	r3, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f001 f964 	bl	8003960 <vTaskDelay>
  
  return osOK;
 8002698:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	460b      	mov	r3, r1
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d013      	beq.n	80026e2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <osTimerCreate+0x20>
 80026c0:	2101      	movs	r1, #1
 80026c2:	e000      	b.n	80026c6 <osTimerCreate+0x22>
 80026c4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80026ce:	9201      	str	r2, [sp, #4]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	460a      	mov	r2, r1
 80026d6:	2101      	movs	r1, #1
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <osTimerCreate+0x64>)
 80026da:	f001 ff28 	bl	800452e <xTimerCreateStatic>
 80026de:	4603      	mov	r3, r0
 80026e0:	e00e      	b.n	8002700 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <osTimerCreate+0x48>
 80026e8:	2201      	movs	r2, #1
 80026ea:	e000      	b.n	80026ee <osTimerCreate+0x4a>
 80026ec:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2101      	movs	r1, #1
 80026f8:	4803      	ldr	r0, [pc, #12]	; (8002708 <osTimerCreate+0x64>)
 80026fa:	f001 fef7 	bl	80044ec <xTimerCreate>
 80026fe:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	08005f04 	.word	0x08005f04

0800270c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4619      	mov	r1, r3
 8002722:	2001      	movs	r0, #1
 8002724:	f000 fb05 	bl	8002d32 <xQueueCreateMutexStatic>
 8002728:	4603      	mov	r3, r0
 800272a:	e003      	b.n	8002734 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800272c:	2001      	movs	r0, #1
 800272e:	f000 fae8 	bl	8002d02 <xQueueCreateMutex>
 8002732:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af02      	add	r7, sp, #8
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d011      	beq.n	8002772 <osMessageCreate+0x36>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2400      	movs	r4, #0
 8002768:	9400      	str	r4, [sp, #0]
 800276a:	f000 f9df 	bl	8002b2c <xQueueGenericCreateStatic>
 800276e:	4603      	mov	r3, r0
 8002770:	e008      	b.n	8002784 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	4619      	mov	r1, r3
 800277e:	f000 fa4d 	bl	8002c1c <xQueueGenericCreate>
 8002782:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}

0800278c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <osMessagePut+0x1e>
    ticks = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80027aa:	f7ff ff01 	bl	80025b0 <inHandlerMode>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80027b4:	f107 0210 	add.w	r2, r7, #16
 80027b8:	f107 0108 	add.w	r1, r7, #8
 80027bc:	2300      	movs	r3, #0
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fbd0 	bl	8002f64 <xQueueGenericSendFromISR>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <osMessagePut+0x42>
      return osErrorOS;
 80027ca:	23ff      	movs	r3, #255	; 0xff
 80027cc:	e018      	b.n	8002800 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d014      	beq.n	80027fe <osMessagePut+0x72>
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <osMessagePut+0x7c>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	e00b      	b.n	80027fe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80027e6:	f107 0108 	add.w	r1, r7, #8
 80027ea:	2300      	movs	r3, #0
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 faba 	bl	8002d68 <xQueueGenericSend>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d001      	beq.n	80027fe <osMessagePut+0x72>
      return osErrorOS;
 80027fa:	23ff      	movs	r3, #255	; 0xff
 80027fc:	e000      	b.n	8002800 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b08b      	sub	sp, #44	; 0x2c
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	617b      	str	r3, [r7, #20]
    return event;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	461c      	mov	r4, r3
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800283a:	e054      	b.n	80028e6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800284a:	d103      	bne.n	8002854 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e009      	b.n	8002868 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <osMessageGet+0x5c>
      ticks = 1;
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002868:	f7ff fea2 	bl	80025b0 <inHandlerMode>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01c      	beq.n	80028ac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002872:	f107 0220 	add.w	r2, r7, #32
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	f000 fcec 	bl	800325c <xQueueReceiveFromISR>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800288a:	2310      	movs	r3, #16
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e001      	b.n	8002894 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01d      	beq.n	80028d6 <osMessageGet+0xca>
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <osMessageGet+0xe4>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	e014      	b.n	80028d6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	3304      	adds	r3, #4
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	4619      	mov	r1, r3
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f000 fbf0 	bl	800309c <xQueueReceive>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80028c2:	2310      	movs	r3, #16
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e006      	b.n	80028d6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <osMessageGet+0xc6>
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <osMessageGet+0xc8>
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	461c      	mov	r4, r3
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	372c      	adds	r7, #44	; 0x2c
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd90      	pop	{r4, r7, pc}
 80028ee:	bf00      	nop
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0208 	add.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0208 	add.w	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f103 0208 	add.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ac:	d103      	bne.n	80029b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e00c      	b.n	80029d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3308      	adds	r3, #8
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e002      	b.n	80029c4 <vListInsert+0x2e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d2f6      	bcs.n	80029be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6852      	ldr	r2, [r2, #4]
 8002a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d103      	bne.n	8002a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a86:	f002 f9e5 	bl	8004e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d114      	bne.n	8002b06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01a      	beq.n	8002b1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f9f1 	bl	8003ed0 <xTaskRemoveFromEventList>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <xQueueGenericReset+0xcc>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	e009      	b.n	8002b1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3310      	adds	r3, #16
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fef2 	bl	80028f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff feed 	bl	80028f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b1a:	f002 f9cb 	bl	8004eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	; 0x38
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <xQueueGenericCreateStatic+0x52>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <xQueueGenericCreateStatic+0x56>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericCreateStatic+0x58>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	623b      	str	r3, [r7, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <xQueueGenericCreateStatic+0x7e>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xQueueGenericCreateStatic+0x82>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueGenericCreateStatic+0x84>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61fb      	str	r3, [r7, #28]
}
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bca:	2348      	movs	r3, #72	; 0x48
 8002bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b48      	cmp	r3, #72	; 0x48
 8002bd2:	d00a      	beq.n	8002bea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	61bb      	str	r3, [r7, #24]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f83f 	bl	8002c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3730      	adds	r7, #48	; 0x30
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	613b      	str	r3, [r7, #16]
}
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3348      	adds	r3, #72	; 0x48
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fa1f 	bl	8005098 <pvPortMalloc>
 8002c5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d011      	beq.n	8002c86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3348      	adds	r3, #72	; 0x48
 8002c6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f805 	bl	8002c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c86:	69bb      	ldr	r3, [r7, #24]
	}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e002      	b.n	8002cb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	69b8      	ldr	r0, [r7, #24]
 8002cc2:	f7ff fecb 	bl	8002a5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f837 	bl	8002d68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	461a      	mov	r2, r3
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	6978      	ldr	r0, [r7, #20]
 8002d1c:	f7ff ff7e 	bl	8002c1c <xQueueGenericCreate>
 8002d20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff ffd3 	bl	8002cce <prvInitialiseMutex>

		return xNewQueue;
 8002d28:	68fb      	ldr	r3, [r7, #12]
	}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	4603      	mov	r3, r0
 8002d3a:	6039      	str	r1, [r7, #0]
 8002d3c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7ff feeb 	bl	8002b2c <xQueueGenericCreateStatic>
 8002d56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ffb8 	bl	8002cce <prvInitialiseMutex>

		return xNewQueue;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
	}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xQueueGenericSend+0x32>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <xQueueGenericSend+0x40>
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <xQueueGenericSend+0x44>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <xQueueGenericSend+0x46>
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <xQueueGenericSend+0x60>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d103      	bne.n	8002dd6 <xQueueGenericSend+0x6e>
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <xQueueGenericSend+0x72>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueGenericSend+0x74>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	623b      	str	r3, [r7, #32]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002df6:	f001 fa27 	bl	8004248 <xTaskGetSchedulerState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueGenericSend+0x9e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericSend+0xa2>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericSend+0xa4>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <xQueueGenericSend+0xbe>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	61fb      	str	r3, [r7, #28]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e26:	f002 f815 	bl	8004e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <xQueueGenericSend+0xd4>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d129      	bne.n	8002e90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e42:	f000 fa8b 	bl	800335c <prvCopyDataToQueue>
 8002e46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	3324      	adds	r3, #36	; 0x24
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f83b 	bl	8003ed0 <xTaskRemoveFromEventList>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e60:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <xQueueGenericSend+0x1f8>)
 8002e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	e00a      	b.n	8002e88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e78:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <xQueueGenericSend+0x1f8>)
 8002e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e88:	f002 f814 	bl	8004eb4 <vPortExitCritical>
				return pdPASS;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e063      	b.n	8002f58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e96:	f002 f80d 	bl	8004eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e05c      	b.n	8002f58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d106      	bne.n	8002eb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f873 	bl	8003f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eb2:	f001 ffff 	bl	8004eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eb6:	f000 fded 	bl	8003a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eba:	f001 ffcb 	bl	8004e54 <vPortEnterCritical>
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eca:	d103      	bne.n	8002ed4 <xQueueGenericSend+0x16c>
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee0:	d103      	bne.n	8002eea <xQueueGenericSend+0x182>
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eea:	f001 ffe3 	bl	8004eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eee:	1d3a      	adds	r2, r7, #4
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f862 	bl	8003fc0 <xTaskCheckForTimeOut>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d124      	bne.n	8002f4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f04:	f000 fb22 	bl	800354c <prvIsQueueFull>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	3310      	adds	r3, #16
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ff8a 	bl	8003e30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f1e:	f000 faad 	bl	800347c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f22:	f000 fdc5 	bl	8003ab0 <xTaskResumeAll>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f47f af7c 	bne.w	8002e26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <xQueueGenericSend+0x1f8>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	e772      	b.n	8002e26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f42:	f000 fa9b 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f46:	f000 fdb3 	bl	8003ab0 <xTaskResumeAll>
 8002f4a:	e76c      	b.n	8002e26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f4e:	f000 fa95 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f52:	f000 fdad 	bl	8003ab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3738      	adds	r7, #56	; 0x38
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b090      	sub	sp, #64	; 0x40
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <xQueueGenericSendFromISR+0x3c>
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <xQueueGenericSendFromISR+0x40>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <xQueueGenericSendFromISR+0x42>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d103      	bne.n	8002fce <xQueueGenericSendFromISR+0x6a>
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <xQueueGenericSendFromISR+0x6e>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <xQueueGenericSendFromISR+0x70>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	623b      	str	r3, [r7, #32]
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fee:	f002 f813 	bl	8005018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	61fa      	str	r2, [r7, #28]
 8003008:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800300a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	429a      	cmp	r2, r3
 8003018:	d302      	bcc.n	8003020 <xQueueGenericSendFromISR+0xbc>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d12f      	bne.n	8003080 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003036:	f000 f991 	bl	800335c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800303a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003042:	d112      	bne.n	800306a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	4618      	mov	r0, r3
 8003052:	f000 ff3d 	bl	8003ed0 <xTaskRemoveFromEventList>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e007      	b.n	800307a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800306a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800306e:	3301      	adds	r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	b25a      	sxtb	r2, r3
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800307a:	2301      	movs	r3, #1
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800307e:	e001      	b.n	8003084 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003080:	2300      	movs	r3, #0
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800308e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003092:	4618      	mov	r0, r3
 8003094:	3740      	adds	r7, #64	; 0x40
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08c      	sub	sp, #48	; 0x30
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <xQueueReceive+0x30>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	623b      	str	r3, [r7, #32]
}
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <xQueueReceive+0x3e>
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <xQueueReceive+0x42>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <xQueueReceive+0x44>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xQueueReceive+0x5e>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61fb      	str	r3, [r7, #28]
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030fa:	f001 f8a5 	bl	8004248 <xTaskGetSchedulerState>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <xQueueReceive+0x6e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <xQueueReceive+0x72>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <xQueueReceive+0x74>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <xQueueReceive+0x8e>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	61bb      	str	r3, [r7, #24]
}
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800312a:	f001 fe93 	bl	8004e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01f      	beq.n	800317a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313e:	f000 f977 	bl	8003430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00f      	beq.n	8003172 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	3310      	adds	r3, #16
 8003156:	4618      	mov	r0, r3
 8003158:	f000 feba 	bl	8003ed0 <xTaskRemoveFromEventList>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003162:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <xQueueReceive+0x1bc>)
 8003164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003172:	f001 fe9f 	bl	8004eb4 <vPortExitCritical>
				return pdPASS;
 8003176:	2301      	movs	r3, #1
 8003178:	e069      	b.n	800324e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003180:	f001 fe98 	bl	8004eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003184:	2300      	movs	r3, #0
 8003186:	e062      	b.n	800324e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fefe 	bl	8003f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800319c:	f001 fe8a 	bl	8004eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031a0:	f000 fc78 	bl	8003a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031a4:	f001 fe56 	bl	8004e54 <vPortEnterCritical>
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b4:	d103      	bne.n	80031be <xQueueReceive+0x122>
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ca:	d103      	bne.n	80031d4 <xQueueReceive+0x138>
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d4:	f001 fe6e 	bl	8004eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031d8:	1d3a      	adds	r2, r7, #4
 80031da:	f107 0310 	add.w	r3, r7, #16
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 feed 	bl	8003fc0 <xTaskCheckForTimeOut>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d123      	bne.n	8003234 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ee:	f000 f997 	bl	8003520 <prvIsQueueEmpty>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	3324      	adds	r3, #36	; 0x24
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe15 	bl	8003e30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003208:	f000 f938 	bl	800347c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800320c:	f000 fc50 	bl	8003ab0 <xTaskResumeAll>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d189      	bne.n	800312a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <xQueueReceive+0x1bc>)
 8003218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	e780      	b.n	800312a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322a:	f000 f927 	bl	800347c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800322e:	f000 fc3f 	bl	8003ab0 <xTaskResumeAll>
 8003232:	e77a      	b.n	800312a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003236:	f000 f921 	bl	800347c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800323a:	f000 fc39 	bl	8003ab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800323e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003240:	f000 f96e 	bl	8003520 <prvIsQueueEmpty>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	f43f af6f 	beq.w	800312a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800324c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800324e:	4618      	mov	r0, r3
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000ed04 	.word	0xe000ed04

0800325c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	; 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	623b      	str	r3, [r7, #32]
}
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <xQueueReceiveFromISR+0x3a>
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <xQueueReceiveFromISR+0x3e>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <xQueueReceiveFromISR+0x40>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	61fb      	str	r3, [r7, #28]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032b6:	f001 feaf 	bl	8005018 <vPortValidateInterruptPriority>
	__asm volatile
 80032ba:	f3ef 8211 	mrs	r2, BASEPRI
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	61ba      	str	r2, [r7, #24]
 80032d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80032d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02f      	beq.n	8003342 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f0:	f000 f89e 	bl	8003430 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	1e5a      	subs	r2, r3, #1
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80032fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003304:	d112      	bne.n	800332c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	3310      	adds	r3, #16
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fddc 	bl	8003ed0 <xTaskRemoveFromEventList>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800332c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003330:	3301      	adds	r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	b25a      	sxtb	r2, r3
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	e001      	b.n	8003346 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	613b      	str	r3, [r7, #16]
	__asm volatile
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f383 8811 	msr	BASEPRI, r3
}
 8003350:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003354:	4618      	mov	r0, r3
 8003356:	3738      	adds	r7, #56	; 0x38
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d14d      	bne.n	800341e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff7c 	bl	8004284 <xTaskPriorityDisinherit>
 800338c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	e043      	b.n	800341e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d119      	bne.n	80033d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6858      	ldr	r0, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	461a      	mov	r2, r3
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	f002 f8b4 	bl	8005514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	441a      	add	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d32b      	bcc.n	800341e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e026      	b.n	800341e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68d8      	ldr	r0, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	461a      	mov	r2, r3
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	f002 f89a 	bl	8005514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	425b      	negs	r3, r3
 80033ea:	441a      	add	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d207      	bcs.n	800340c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	425b      	negs	r3, r3
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d105      	bne.n	800341e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	3b01      	subs	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003426:	697b      	ldr	r3, [r7, #20]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d303      	bcc.n	8003464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68d9      	ldr	r1, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	461a      	mov	r2, r3
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	f002 f850 	bl	8005514 <memcpy>
	}
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003484:	f001 fce6 	bl	8004e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003490:	e011      	b.n	80034b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3324      	adds	r3, #36	; 0x24
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fd16 	bl	8003ed0 <xTaskRemoveFromEventList>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034aa:	f000 fdeb 	bl	8004084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dce9      	bgt.n	8003492 <prvUnlockQueue+0x16>
 80034be:	e000      	b.n	80034c2 <prvUnlockQueue+0x46>
					break;
 80034c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 fcf3 	bl	8004eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ce:	f001 fcc1 	bl	8004e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034da:	e011      	b.n	8003500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3310      	adds	r3, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fcf1 	bl	8003ed0 <xTaskRemoveFromEventList>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034f4:	f000 fdc6 	bl	8004084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003504:	2b00      	cmp	r3, #0
 8003506:	dce9      	bgt.n	80034dc <prvUnlockQueue+0x60>
 8003508:	e000      	b.n	800350c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800350a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	22ff      	movs	r2, #255	; 0xff
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003514:	f001 fcce 	bl	8004eb4 <vPortExitCritical>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003528:	f001 fc94 	bl	8004e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e001      	b.n	800353e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800353e:	f001 fcb9 	bl	8004eb4 <vPortExitCritical>

	return xReturn;
 8003542:	68fb      	ldr	r3, [r7, #12]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003554:	f001 fc7e 	bl	8004e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	429a      	cmp	r2, r3
 8003562:	d102      	bne.n	800356a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e001      	b.n	800356e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800356e:	f001 fca1 	bl	8004eb4 <vPortExitCritical>

	return xReturn;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e014      	b.n	80035b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800358c:	4a0f      	ldr	r2, [pc, #60]	; (80035cc <vQueueAddToRegistry+0x50>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003598:	490c      	ldr	r1, [pc, #48]	; (80035cc <vQueueAddToRegistry+0x50>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <vQueueAddToRegistry+0x50>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035ae:	e006      	b.n	80035be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	d9e7      	bls.n	800358c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	200007a8 	.word	0x200007a8

080035d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035e0:	f001 fc38 	bl	8004e54 <vPortEnterCritical>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f0:	d103      	bne.n	80035fa <vQueueWaitForMessageRestricted+0x2a>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003600:	b25b      	sxtb	r3, r3
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003606:	d103      	bne.n	8003610 <vQueueWaitForMessageRestricted+0x40>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003610:	f001 fc50 	bl	8004eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3324      	adds	r3, #36	; 0x24
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fc27 	bl	8003e78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff26 	bl	800347c <prvUnlockQueue>
	}
 8003630:	bf00      	nop
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08e      	sub	sp, #56	; 0x38
 800363c:	af04      	add	r7, sp, #16
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <xTaskCreateStatic+0x2a>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	623b      	str	r3, [r7, #32]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xTaskCreateStatic+0x46>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61fb      	str	r3, [r7, #28]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800367e:	2354      	movs	r3, #84	; 0x54
 8003680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b54      	cmp	r3, #84	; 0x54
 8003686:	d00a      	beq.n	800369e <xTaskCreateStatic+0x66>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	61bb      	str	r3, [r7, #24]
}
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800369e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01e      	beq.n	80036e4 <xTaskCreateStatic+0xac>
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01b      	beq.n	80036e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036be:	2300      	movs	r3, #0
 80036c0:	9303      	str	r3, [sp, #12]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	9302      	str	r3, [sp, #8]
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f850 	bl	800377c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036de:	f000 f8d5 	bl	800388c <prvAddNewTaskToReadyList>
 80036e2:	e001      	b.n	80036e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036e8:	697b      	ldr	r3, [r7, #20]
	}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08c      	sub	sp, #48	; 0x30
 80036f6:	af04      	add	r7, sp, #16
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fcc6 	bl	8005098 <pvPortMalloc>
 800370c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00e      	beq.n	8003732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003714:	2054      	movs	r0, #84	; 0x54
 8003716:	f001 fcbf 	bl	8005098 <pvPortMalloc>
 800371a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
 8003728:	e005      	b.n	8003736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800372a:	6978      	ldr	r0, [r7, #20]
 800372c:	f001 fd80 	bl	8005230 <vPortFree>
 8003730:	e001      	b.n	8003736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	2300      	movs	r3, #0
 8003748:	9303      	str	r3, [sp, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	9302      	str	r3, [sp, #8]
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f80e 	bl	800377c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003760:	69f8      	ldr	r0, [r7, #28]
 8003762:	f000 f893 	bl	800388c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e002      	b.n	8003772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800376c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003772:	69bb      	ldr	r3, [r7, #24]
	}
 8003774:	4618      	mov	r0, r3
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003794:	3b01      	subs	r3, #1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	617b      	str	r3, [r7, #20]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01f      	beq.n	800380a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e012      	b.n	80037f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	7819      	ldrb	r1, [r3, #0]
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	3334      	adds	r3, #52	; 0x34
 80037e0:	460a      	mov	r2, r1
 80037e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d9e9      	bls.n	80037d0 <prvInitialiseNewTask+0x54>
 80037fc:	e000      	b.n	8003800 <prvInitialiseNewTask+0x84>
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003808:	e003      	b.n	8003812 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	2b06      	cmp	r3, #6
 8003816:	d901      	bls.n	800381c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003818:	2306      	movs	r3, #6
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f87e 	bl	8002934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff f879 	bl	8002934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	f1c3 0207 	rsb	r2, r3, #7
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2200      	movs	r2, #0
 800385c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	f001 f9c2 	bl	8004bf4 <pxPortInitialiseStack>
 8003870:	4602      	mov	r2, r0
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003894:	f001 fade 	bl	8004e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003898:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <prvAddNewTaskToReadyList+0xb8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <prvAddNewTaskToReadyList+0xb8>)
 80038a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038a2:	4b29      	ldr	r3, [pc, #164]	; (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038aa:	4a27      	ldr	r2, [pc, #156]	; (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <prvAddNewTaskToReadyList+0xb8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d110      	bne.n	80038da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038b8:	f000 fc08 	bl	80040cc <prvInitialiseTaskLists>
 80038bc:	e00d      	b.n	80038da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <prvAddNewTaskToReadyList+0xc0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d802      	bhi.n	80038da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <prvAddNewTaskToReadyList+0xbc>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <prvAddNewTaskToReadyList+0xc4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <prvAddNewTaskToReadyList+0xc4>)
 80038e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	2201      	movs	r2, #1
 80038ea:	409a      	lsls	r2, r3
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <prvAddNewTaskToReadyList+0xc8>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <prvAddNewTaskToReadyList+0xcc>)
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7ff f81e 	bl	800294e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003912:	f001 facf 	bl	8004eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <prvAddNewTaskToReadyList+0xc0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00e      	beq.n	800393c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <prvAddNewTaskToReadyList+0xbc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	429a      	cmp	r2, r3
 800392a:	d207      	bcs.n	800393c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <prvAddNewTaskToReadyList+0xd0>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	200008e8 	.word	0x200008e8
 8003948:	200007e8 	.word	0x200007e8
 800394c:	200008f4 	.word	0x200008f4
 8003950:	20000904 	.word	0x20000904
 8003954:	200008f0 	.word	0x200008f0
 8003958:	200007ec 	.word	0x200007ec
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <vTaskDelay+0x60>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <vTaskDelay+0x30>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60bb      	str	r3, [r7, #8]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003990:	f000 f880 	bl	8003a94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003994:	2100      	movs	r1, #0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fcfa 	bl	8004390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800399c:	f000 f888 	bl	8003ab0 <xTaskResumeAll>
 80039a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d107      	bne.n	80039b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <vTaskDelay+0x64>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000910 	.word	0x20000910
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039d6:	463a      	mov	r2, r7
 80039d8:	1d39      	adds	r1, r7, #4
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fdd4 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039e4:	6839      	ldr	r1, [r7, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	460a      	mov	r2, r1
 80039f6:	4921      	ldr	r1, [pc, #132]	; (8003a7c <vTaskStartScheduler+0xb4>)
 80039f8:	4821      	ldr	r0, [pc, #132]	; (8003a80 <vTaskStartScheduler+0xb8>)
 80039fa:	f7ff fe1d 	bl	8003638 <xTaskCreateStatic>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <vTaskStartScheduler+0xbc>)
 8003a02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a04:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <vTaskStartScheduler+0xbc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e001      	b.n	8003a16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d102      	bne.n	8003a22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a1c:	f000 fd1e 	bl	800445c <xTimerCreateTimerTask>
 8003a20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d116      	bne.n	8003a56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	613b      	str	r3, [r7, #16]
}
 8003a3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <vTaskStartScheduler+0xc0>)
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <vTaskStartScheduler+0xc4>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <vTaskStartScheduler+0xc8>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a50:	f001 f95e 	bl	8004d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a54:	e00e      	b.n	8003a74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5c:	d10a      	bne.n	8003a74 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60fb      	str	r3, [r7, #12]
}
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <vTaskStartScheduler+0xaa>
}
 8003a74:	bf00      	nop
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08005f08 	.word	0x08005f08
 8003a80:	0800409d 	.word	0x0800409d
 8003a84:	2000090c 	.word	0x2000090c
 8003a88:	20000908 	.word	0x20000908
 8003a8c:	200008f4 	.word	0x200008f4
 8003a90:	200008ec 	.word	0x200008ec

08003a94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <vTaskSuspendAll+0x18>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4a03      	ldr	r2, [pc, #12]	; (8003aac <vTaskSuspendAll+0x18>)
 8003aa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	20000910 	.word	0x20000910

08003ab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <xTaskResumeAll+0x114>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <xTaskResumeAll+0x2c>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	603b      	str	r3, [r7, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003adc:	f001 f9ba 	bl	8004e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ae0:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <xTaskResumeAll+0x114>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <xTaskResumeAll+0x114>)
 8003ae8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <xTaskResumeAll+0x114>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d161      	bne.n	8003bb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003af2:	4b35      	ldr	r3, [pc, #212]	; (8003bc8 <xTaskResumeAll+0x118>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d05d      	beq.n	8003bb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003afa:	e02e      	b.n	8003b5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <xTaskResumeAll+0x11c>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3318      	adds	r3, #24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe ff7d 	bl	8002a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3304      	adds	r3, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe ff78 	bl	8002a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <xTaskResumeAll+0x120>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <xTaskResumeAll+0x120>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <xTaskResumeAll+0x124>)
 8003b38:	441a      	add	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7fe ff04 	bl	800294e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <xTaskResumeAll+0x128>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <xTaskResumeAll+0x12c>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <xTaskResumeAll+0x11c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1cc      	bne.n	8003afc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b68:	f000 fb4e 	bl	8004208 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <xTaskResumeAll+0x130>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d010      	beq.n	8003b9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b78:	f000 f846 	bl	8003c08 <xTaskIncrementTick>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <xTaskResumeAll+0x12c>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f1      	bne.n	8003b78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <xTaskResumeAll+0x130>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <xTaskResumeAll+0x12c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <xTaskResumeAll+0x134>)
 8003ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bb6:	f001 f97d 	bl	8004eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003bba:	68bb      	ldr	r3, [r7, #8]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000910 	.word	0x20000910
 8003bc8:	200008e8 	.word	0x200008e8
 8003bcc:	200008a8 	.word	0x200008a8
 8003bd0:	200008f0 	.word	0x200008f0
 8003bd4:	200007ec 	.word	0x200007ec
 8003bd8:	200007e8 	.word	0x200007e8
 8003bdc:	200008fc 	.word	0x200008fc
 8003be0:	200008f8 	.word	0x200008f8
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <xTaskGetTickCount+0x1c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200008ec 	.word	0x200008ec

08003c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c12:	4b4e      	ldr	r3, [pc, #312]	; (8003d4c <xTaskIncrementTick+0x144>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 808e 	bne.w	8003d38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c1c:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <xTaskIncrementTick+0x148>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c24:	4a4a      	ldr	r2, [pc, #296]	; (8003d50 <xTaskIncrementTick+0x148>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d120      	bne.n	8003c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	603b      	str	r3, [r7, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskIncrementTick+0x46>
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3e      	ldr	r2, [pc, #248]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4a3e      	ldr	r2, [pc, #248]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <xTaskIncrementTick+0x154>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	4a3c      	ldr	r2, [pc, #240]	; (8003d5c <xTaskIncrementTick+0x154>)
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	f000 facb 	bl	8004208 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <xTaskIncrementTick+0x158>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d348      	bcc.n	8003d0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c7c:	4b35      	ldr	r3, [pc, #212]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <xTaskIncrementTick+0x158>)
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c8c:	601a      	str	r2, [r3, #0]
					break;
 8003c8e:	e03e      	b.n	8003d0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d203      	bcs.n	8003cb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <xTaskIncrementTick+0x158>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cae:	e02e      	b.n	8003d0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fea7 	bl	8002a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3318      	adds	r3, #24
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fe9e 	bl	8002a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <xTaskIncrementTick+0x15c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <xTaskIncrementTick+0x15c>)
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <xTaskIncrementTick+0x160>)
 8003cec:	441a      	add	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f7fe fe2a 	bl	800294e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <xTaskIncrementTick+0x164>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d3b9      	bcc.n	8003c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0c:	e7b6      	b.n	8003c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <xTaskIncrementTick+0x164>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4914      	ldr	r1, [pc, #80]	; (8003d68 <xTaskIncrementTick+0x160>)
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d901      	bls.n	8003d2a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <xTaskIncrementTick+0x168>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e004      	b.n	8003d42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d38:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <xTaskIncrementTick+0x16c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <xTaskIncrementTick+0x16c>)
 8003d40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d42:	697b      	ldr	r3, [r7, #20]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000910 	.word	0x20000910
 8003d50:	200008ec 	.word	0x200008ec
 8003d54:	200008a0 	.word	0x200008a0
 8003d58:	200008a4 	.word	0x200008a4
 8003d5c:	20000900 	.word	0x20000900
 8003d60:	20000908 	.word	0x20000908
 8003d64:	200008f0 	.word	0x200008f0
 8003d68:	200007ec 	.word	0x200007ec
 8003d6c:	200007e8 	.word	0x200007e8
 8003d70:	200008fc 	.word	0x200008fc
 8003d74:	200008f8 	.word	0x200008f8

08003d78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d7e:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <vTaskSwitchContext+0xa4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <vTaskSwitchContext+0xa8>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d8c:	e03f      	b.n	8003e0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <vTaskSwitchContext+0xa8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <vTaskSwitchContext+0xac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	f1c3 031f 	rsb	r3, r3, #31
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	491f      	ldr	r1, [pc, #124]	; (8003e28 <vTaskSwitchContext+0xb0>)
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	607b      	str	r3, [r7, #4]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <vTaskSwitchContext+0x5a>
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <vTaskSwitchContext+0xb0>)
 8003de0:	4413      	add	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3308      	adds	r3, #8
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d104      	bne.n	8003e04 <vTaskSwitchContext+0x8c>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <vTaskSwitchContext+0xb4>)
 8003e0c:	6013      	str	r3, [r2, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000910 	.word	0x20000910
 8003e20:	200008fc 	.word	0x200008fc
 8003e24:	200008f0 	.word	0x200008f0
 8003e28:	200007ec 	.word	0x200007ec
 8003e2c:	200007e8 	.word	0x200007e8

08003e30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <vTaskPlaceOnEventList+0x44>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fd99 	bl	8002996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e64:	2101      	movs	r1, #1
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f000 fa92 	bl	8004390 <prvAddCurrentTaskToDelayedList>
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200007e8 	.word	0x200007e8

08003e78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	617b      	str	r3, [r7, #20]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <vTaskPlaceOnEventListRestricted+0x54>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7fe fd50 	bl	800294e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	68b8      	ldr	r0, [r7, #8]
 8003ebe:	f000 fa67 	bl	8004390 <prvAddCurrentTaskToDelayedList>
	}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200007e8 	.word	0x200007e8

08003ed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	60fb      	str	r3, [r7, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3318      	adds	r3, #24
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fd81 	bl	8002a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <xTaskRemoveFromEventList+0xac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11c      	bne.n	8003f48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fd78 	bl	8002a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <xTaskRemoveFromEventList+0xb0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <xTaskRemoveFromEventList+0xb0>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <xTaskRemoveFromEventList+0xb4>)
 8003f38:	441a      	add	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fe fd04 	bl	800294e <vListInsertEnd>
 8003f46:	e005      	b.n	8003f54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	480e      	ldr	r0, [pc, #56]	; (8003f88 <xTaskRemoveFromEventList+0xb8>)
 8003f50:	f7fe fcfd 	bl	800294e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <xTaskRemoveFromEventList+0xbc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d905      	bls.n	8003f6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <xTaskRemoveFromEventList+0xc0>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e001      	b.n	8003f72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f72:	697b      	ldr	r3, [r7, #20]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000910 	.word	0x20000910
 8003f80:	200008f0 	.word	0x200008f0
 8003f84:	200007ec 	.word	0x200007ec
 8003f88:	200008a8 	.word	0x200008a8
 8003f8c:	200007e8 	.word	0x200007e8
 8003f90:	200008fc 	.word	0x200008fc

08003f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <vTaskInternalSetTimeOutState+0x24>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <vTaskInternalSetTimeOutState+0x28>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	20000900 	.word	0x20000900
 8003fbc:	200008ec 	.word	0x200008ec

08003fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	613b      	str	r3, [r7, #16]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60fb      	str	r3, [r7, #12]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004002:	f000 ff27 	bl	8004e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <xTaskCheckForTimeOut+0xbc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401e:	d102      	bne.n	8004026 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e023      	b.n	800406e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <xTaskCheckForTimeOut+0xc0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d007      	beq.n	8004042 <xTaskCheckForTimeOut+0x82>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e015      	b.n	800406e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	d20b      	bcs.n	8004064 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff9b 	bl	8003f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e004      	b.n	800406e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800406e:	f000 ff21 	bl	8004eb4 <vPortExitCritical>

	return xReturn;
 8004072:	69fb      	ldr	r3, [r7, #28]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200008ec 	.word	0x200008ec
 8004080:	20000900 	.word	0x20000900

08004084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <vTaskMissedYield+0x14>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	200008fc 	.word	0x200008fc

0800409c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040a4:	f000 f852 	bl	800414c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <prvIdleTask+0x28>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d9f9      	bls.n	80040a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <prvIdleTask+0x2c>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040c0:	e7f0      	b.n	80040a4 <prvIdleTask+0x8>
 80040c2:	bf00      	nop
 80040c4:	200007ec 	.word	0x200007ec
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	e00c      	b.n	80040f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <prvInitialiseTaskLists+0x60>)
 80040e4:	4413      	add	r3, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fc04 	bl	80028f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3301      	adds	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d9ef      	bls.n	80040d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <prvInitialiseTaskLists+0x64>)
 80040fa:	f7fe fbfb 	bl	80028f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040fe:	480d      	ldr	r0, [pc, #52]	; (8004134 <prvInitialiseTaskLists+0x68>)
 8004100:	f7fe fbf8 	bl	80028f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004104:	480c      	ldr	r0, [pc, #48]	; (8004138 <prvInitialiseTaskLists+0x6c>)
 8004106:	f7fe fbf5 	bl	80028f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800410a:	480c      	ldr	r0, [pc, #48]	; (800413c <prvInitialiseTaskLists+0x70>)
 800410c:	f7fe fbf2 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <prvInitialiseTaskLists+0x74>)
 8004112:	f7fe fbef 	bl	80028f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <prvInitialiseTaskLists+0x78>)
 8004118:	4a05      	ldr	r2, [pc, #20]	; (8004130 <prvInitialiseTaskLists+0x64>)
 800411a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <prvInitialiseTaskLists+0x7c>)
 800411e:	4a05      	ldr	r2, [pc, #20]	; (8004134 <prvInitialiseTaskLists+0x68>)
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200007ec 	.word	0x200007ec
 8004130:	20000878 	.word	0x20000878
 8004134:	2000088c 	.word	0x2000088c
 8004138:	200008a8 	.word	0x200008a8
 800413c:	200008bc 	.word	0x200008bc
 8004140:	200008d4 	.word	0x200008d4
 8004144:	200008a0 	.word	0x200008a0
 8004148:	200008a4 	.word	0x200008a4

0800414c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004152:	e019      	b.n	8004188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004154:	f000 fe7e 	bl	8004e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <prvCheckTasksWaitingTermination+0x50>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fc4f 	bl	8002a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <prvCheckTasksWaitingTermination+0x54>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3b01      	subs	r3, #1
 8004170:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <prvCheckTasksWaitingTermination+0x54>)
 8004172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <prvCheckTasksWaitingTermination+0x58>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <prvCheckTasksWaitingTermination+0x58>)
 800417c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800417e:	f000 fe99 	bl	8004eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f810 	bl	80041a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <prvCheckTasksWaitingTermination+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e1      	bne.n	8004154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200008bc 	.word	0x200008bc
 80041a0:	200008e8 	.word	0x200008e8
 80041a4:	200008d0 	.word	0x200008d0

080041a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f836 	bl	8005230 <vPortFree>
				vPortFree( pxTCB );
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f001 f833 	bl	8005230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041ca:	e018      	b.n	80041fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d103      	bne.n	80041de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f001 f82a 	bl	8005230 <vPortFree>
	}
 80041dc:	e00f      	b.n	80041fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d00a      	beq.n	80041fe <prvDeleteTCB+0x56>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <prvDeleteTCB+0x54>
	}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <prvResetNextTaskUnblockTime+0x38>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <prvResetNextTaskUnblockTime+0x3c>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800421e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004220:	e008      	b.n	8004234 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <prvResetNextTaskUnblockTime+0x38>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <prvResetNextTaskUnblockTime+0x3c>)
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	200008a0 	.word	0x200008a0
 8004244:	20000908 	.word	0x20000908

08004248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <xTaskGetSchedulerState+0x34>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004256:	2301      	movs	r3, #1
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	e008      	b.n	800426e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <xTaskGetSchedulerState+0x38>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004264:	2302      	movs	r3, #2
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	e001      	b.n	800426e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800426e:	687b      	ldr	r3, [r7, #4]
	}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	200008f4 	.word	0x200008f4
 8004280:	20000910 	.word	0x20000910

08004284 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d06e      	beq.n	8004378 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800429a:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <xTaskPriorityDisinherit+0x100>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d00a      	beq.n	80042ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	60fb      	str	r3, [r7, #12]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60bb      	str	r3, [r7, #8]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d044      	beq.n	8004378 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d140      	bne.n	8004378 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fb84 	bl	8002a08 <uxListRemove>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d115      	bne.n	8004332 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430a:	491f      	ldr	r1, [pc, #124]	; (8004388 <xTaskPriorityDisinherit+0x104>)
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xTaskPriorityDisinherit+0xae>
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	2201      	movs	r2, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43da      	mvns	r2, r3
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <xTaskPriorityDisinherit+0x108>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4013      	ands	r3, r2
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <xTaskPriorityDisinherit+0x108>)
 8004330:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f1c3 0207 	rsb	r2, r3, #7
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	2201      	movs	r2, #1
 800434c:	409a      	lsls	r2, r3
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <xTaskPriorityDisinherit+0x108>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	4a0d      	ldr	r2, [pc, #52]	; (800438c <xTaskPriorityDisinherit+0x108>)
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <xTaskPriorityDisinherit+0x104>)
 8004366:	441a      	add	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f7fe faed 	bl	800294e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004378:	697b      	ldr	r3, [r7, #20]
	}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200007e8 	.word	0x200007e8
 8004388:	200007ec 	.word	0x200007ec
 800438c:	200008f0 	.word	0x200008f0

08004390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <prvAddCurrentTaskToDelayedList+0xb0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fb2e 	bl	8002a08 <uxListRemove>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	2201      	movs	r2, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4013      	ands	r3, r2
 80043c6:	4a20      	ldr	r2, [pc, #128]	; (8004448 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d0:	d10a      	bne.n	80043e8 <prvAddCurrentTaskToDelayedList+0x58>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	481a      	ldr	r0, [pc, #104]	; (800444c <prvAddCurrentTaskToDelayedList+0xbc>)
 80043e2:	f7fe fab4 	bl	800294e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043e6:	e026      	b.n	8004436 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d209      	bcs.n	8004414 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3304      	adds	r3, #4
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f7fe fac2 	bl	8002996 <vListInsert>
}
 8004412:	e010      	b.n	8004436 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3304      	adds	r3, #4
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f7fe fab8 	bl	8002996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d202      	bcs.n	8004436 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6013      	str	r3, [r2, #0]
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200008ec 	.word	0x200008ec
 8004444:	200007e8 	.word	0x200007e8
 8004448:	200008f0 	.word	0x200008f0
 800444c:	200008d4 	.word	0x200008d4
 8004450:	200008a4 	.word	0x200008a4
 8004454:	200008a0 	.word	0x200008a0
 8004458:	20000908 	.word	0x20000908

0800445c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004466:	f000 fb85 	bl	8004b74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <xTimerCreateTimerTask+0x80>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d021      	beq.n	80044b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800447a:	1d3a      	adds	r2, r7, #4
 800447c:	f107 0108 	add.w	r1, r7, #8
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc f89b 	bl	80005c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	9202      	str	r2, [sp, #8]
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	2306      	movs	r3, #6
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2300      	movs	r3, #0
 800449a:	460a      	mov	r2, r1
 800449c:	4910      	ldr	r1, [pc, #64]	; (80044e0 <xTimerCreateTimerTask+0x84>)
 800449e:	4811      	ldr	r0, [pc, #68]	; (80044e4 <xTimerCreateTimerTask+0x88>)
 80044a0:	f7ff f8ca 	bl	8003638 <xTaskCreateStatic>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <xTimerCreateTimerTask+0x8c>)
 80044a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <xTimerCreateTimerTask+0x8c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044b2:	2301      	movs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	613b      	str	r3, [r7, #16]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000944 	.word	0x20000944
 80044e0:	08005f10 	.word	0x08005f10
 80044e4:	08004755 	.word	0x08004755
 80044e8:	20000948 	.word	0x20000948

080044ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80044fa:	2028      	movs	r0, #40	; 0x28
 80044fc:	f000 fdcc 	bl	8005098 <pvPortMalloc>
 8004500:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f843 	bl	80045aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004524:	697b      	ldr	r3, [r7, #20]
	}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800453c:	2328      	movs	r3, #40	; 0x28
 800453e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b28      	cmp	r3, #40	; 0x28
 8004544:	d00a      	beq.n	800455c <xTimerCreateStatic+0x2e>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	61bb      	str	r3, [r7, #24]
}
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800455c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xTimerCreateStatic+0x4c>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	617b      	str	r3, [r7, #20]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f805 	bl	80045aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80045a0:	69fb      	ldr	r3, [r7, #28]
	}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	617b      	str	r3, [r7, #20]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01e      	beq.n	8004618 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80045da:	f000 facb 	bl	8004b74 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	6a3a      	ldr	r2, [r7, #32]
 80045f4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe f99a 	bl	8002934 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	b2da      	uxtb	r2, r3
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <xTimerGenericCommand+0x98>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02a      	beq.n	80046ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	dc18      	bgt.n	800469a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004668:	f7ff fdee 	bl	8004248 <xTaskGetSchedulerState>
 800466c:	4603      	mov	r3, r0
 800466e:	2b02      	cmp	r3, #2
 8004670:	d109      	bne.n	8004686 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004672:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <xTimerGenericCommand+0x98>)
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f107 0114 	add.w	r1, r7, #20
 800467a:	2300      	movs	r3, #0
 800467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467e:	f7fe fb73 	bl	8002d68 <xQueueGenericSend>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24
 8004684:	e012      	b.n	80046ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <xTimerGenericCommand+0x98>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f107 0114 	add.w	r1, r7, #20
 800468e:	2300      	movs	r3, #0
 8004690:	2200      	movs	r2, #0
 8004692:	f7fe fb69 	bl	8002d68 <xQueueGenericSend>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24
 8004698:	e008      	b.n	80046ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <xTimerGenericCommand+0x98>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f107 0114 	add.w	r1, r7, #20
 80046a2:	2300      	movs	r3, #0
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	f7fe fc5d 	bl	8002f64 <xQueueGenericSendFromISR>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3728      	adds	r7, #40	; 0x28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000944 	.word	0x20000944

080046bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c6:	4b22      	ldr	r3, [pc, #136]	; (8004750 <prvProcessExpiredTimer+0x94>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe f997 	bl	8002a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	18d1      	adds	r1, r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f000 f8d1 	bl	800489c <prvInsertTimerInActiveList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01f      	beq.n	8004740 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	2100      	movs	r1, #0
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff ff88 	bl	8004620 <xTimerGenericCommand>
 8004710:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d113      	bne.n	8004740 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	6978      	ldr	r0, [r7, #20]
 8004746:	4798      	blx	r3
}
 8004748:	bf00      	nop
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000093c 	.word	0x2000093c

08004754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f857 	bl	8004814 <prvGetNextExpireTime>
 8004766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4619      	mov	r1, r3
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f803 	bl	8004778 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004772:	f000 f8d5 	bl	8004920 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004776:	e7f1      	b.n	800475c <prvTimerTask+0x8>

08004778 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004782:	f7ff f987 	bl	8003a94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f866 	bl	800485c <prvSampleTimeNow>
 8004790:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d130      	bne.n	80047fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <prvProcessTimerOrBlockTask+0x3c>
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d806      	bhi.n	80047b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047a6:	f7ff f983 	bl	8003ab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff85 	bl	80046bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047b2:	e024      	b.n	80047fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <prvProcessTimerOrBlockTask+0x90>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <prvProcessTimerOrBlockTask+0x50>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <prvProcessTimerOrBlockTask+0x52>
 80047c8:	2300      	movs	r3, #0
 80047ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <prvProcessTimerOrBlockTask+0x94>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	f7fe fef9 	bl	80035d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047de:	f7ff f967 	bl	8003ab0 <xTaskResumeAll>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <prvProcessTimerOrBlockTask+0x98>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
}
 80047f8:	e001      	b.n	80047fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047fa:	f7ff f959 	bl	8003ab0 <xTaskResumeAll>
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000940 	.word	0x20000940
 800480c:	20000944 	.word	0x20000944
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <prvGetNextExpireTime+0x44>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <prvGetNextExpireTime+0x16>
 8004826:	2201      	movs	r2, #1
 8004828:	e000      	b.n	800482c <prvGetNextExpireTime+0x18>
 800482a:	2200      	movs	r2, #0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <prvGetNextExpireTime+0x44>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e001      	b.n	8004848 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	2000093c 	.word	0x2000093c

0800485c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004864:	f7ff f9c0 	bl	8003be8 <xTaskGetTickCount>
 8004868:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvSampleTimeNow+0x3c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d205      	bcs.n	8004880 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004874:	f000 f91a 	bl	8004aac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e002      	b.n	8004886 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <prvSampleTimeNow+0x3c>)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800488c:	68fb      	ldr	r3, [r7, #12]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	2000094c 	.word	0x2000094c

0800489c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d812      	bhi.n	80048e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e01b      	b.n	800490e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <prvInsertTimerInActiveList+0x7c>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe f858 	bl	8002996 <vListInsert>
 80048e6:	e012      	b.n	800490e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d206      	bcs.n	80048fe <prvInsertTimerInActiveList+0x62>
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e007      	b.n	800490e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <prvInsertTimerInActiveList+0x80>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7fe f844 	bl	8002996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800490e:	697b      	ldr	r3, [r7, #20]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000940 	.word	0x20000940
 800491c:	2000093c 	.word	0x2000093c

08004920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004926:	e0ae      	b.n	8004a86 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f2c0 80ab 	blt.w	8004a86 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	3304      	adds	r3, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f861 	bl	8002a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff87 	bl	800485c <prvSampleTimeNow>
 800494e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b09      	cmp	r3, #9
 8004954:	f200 8096 	bhi.w	8004a84 <prvProcessReceivedCommands+0x164>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <prvProcessReceivedCommands+0x40>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004989 	.word	0x08004989
 8004964:	08004989 	.word	0x08004989
 8004968:	08004989 	.word	0x08004989
 800496c:	080049fd 	.word	0x080049fd
 8004970:	08004a11 	.word	0x08004a11
 8004974:	08004a5b 	.word	0x08004a5b
 8004978:	08004989 	.word	0x08004989
 800497c:	08004989 	.word	0x08004989
 8004980:	080049fd 	.word	0x080049fd
 8004984:	08004a11 	.word	0x08004a11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	b2da      	uxtb	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	18d1      	adds	r1, r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a8:	f7ff ff78 	bl	800489c <prvInsertTimerInActiveList>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d069      	beq.n	8004a86 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05e      	beq.n	8004a86 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	441a      	add	r2, r3
 80049d0:	2300      	movs	r3, #0
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	2100      	movs	r1, #0
 80049d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049da:	f7ff fe21 	bl	8004620 <xTimerGenericCommand>
 80049de:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d14f      	bne.n	8004a86 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61bb      	str	r3, [r7, #24]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004a0e:	e03a      	b.n	8004a86 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	617b      	str	r3, [r7, #20]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	18d1      	adds	r1, r2, r3
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	6a3a      	ldr	r2, [r7, #32]
 8004a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a54:	f7ff ff22 	bl	800489c <prvInsertTimerInActiveList>
					break;
 8004a58:	e015      	b.n	8004a86 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a6a:	f000 fbe1 	bl	8005230 <vPortFree>
 8004a6e:	e00a      	b.n	8004a86 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a82:	e000      	b.n	8004a86 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8004a84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <prvProcessReceivedCommands+0x188>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f107 0108 	add.w	r1, r7, #8
 8004a8e:	2200      	movs	r2, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fb03 	bl	800309c <xQueueReceive>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f af45 	bne.w	8004928 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3728      	adds	r7, #40	; 0x28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000944 	.word	0x20000944

08004aac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ab2:	e048      	b.n	8004b46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <prvSwitchTimerLists+0xc0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <prvSwitchTimerLists+0xc0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fd ff9b 	bl	8002a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02e      	beq.n	8004b46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d90e      	bls.n	8004b18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b06:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <prvSwitchTimerLists+0xc0>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7fd ff40 	bl	8002996 <vListInsert>
 8004b16:	e016      	b.n	8004b46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	2100      	movs	r1, #0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff fd7c 	bl	8004620 <xTimerGenericCommand>
 8004b28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	603b      	str	r3, [r7, #0]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <prvSwitchTimerLists+0xc0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1b1      	bne.n	8004ab4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <prvSwitchTimerLists+0xc0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <prvSwitchTimerLists+0xc4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <prvSwitchTimerLists+0xc0>)
 8004b5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b5e:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <prvSwitchTimerLists+0xc4>)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	2000093c 	.word	0x2000093c
 8004b70:	20000940 	.word	0x20000940

08004b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b7a:	f000 f96b 	bl	8004e54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b86:	4814      	ldr	r0, [pc, #80]	; (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b88:	f7fd feb4 	bl	80028f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b8c:	4813      	ldr	r0, [pc, #76]	; (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004b8e:	f7fd feb1 	bl	80028f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <prvCheckForValidListAndQueue+0x6c>)
 8004b94:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <prvCheckForValidListAndQueue+0x70>)
 8004b9a:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004b9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <prvCheckForValidListAndQueue+0x74>)
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <prvCheckForValidListAndQueue+0x78>)
 8004ba6:	210c      	movs	r1, #12
 8004ba8:	200a      	movs	r0, #10
 8004baa:	f7fd ffbf 	bl	8002b2c <xQueueGenericCreateStatic>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	490b      	ldr	r1, [pc, #44]	; (8004bf0 <prvCheckForValidListAndQueue+0x7c>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fcda 	bl	800357c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc8:	f000 f974 	bl	8004eb4 <vPortExitCritical>
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000944 	.word	0x20000944
 8004bd8:	20000914 	.word	0x20000914
 8004bdc:	20000928 	.word	0x20000928
 8004be0:	2000093c 	.word	0x2000093c
 8004be4:	20000940 	.word	0x20000940
 8004be8:	200009c8 	.word	0x200009c8
 8004bec:	20000950 	.word	0x20000950
 8004bf0:	08005f18 	.word	0x08005f18

08004bf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b04      	subs	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b04      	subs	r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c24:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <pxPortInitialiseStack+0x64>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3b14      	subs	r3, #20
 8004c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b04      	subs	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f06f 0202 	mvn.w	r2, #2
 8004c42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3b20      	subs	r3, #32
 8004c48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	08004c5d 	.word	0x08004c5d

08004c5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <prvTaskExitError+0x54>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6e:	d00a      	beq.n	8004c86 <prvTaskExitError+0x2a>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <prvTaskExitError+0x28>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	60bb      	str	r3, [r7, #8]
}
 8004c98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c9a:	bf00      	nop
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0fc      	beq.n	8004c9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	2000000c 	.word	0x2000000c
	...

08004cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cc0:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <pxCurrentTCBConst2>)
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	6808      	ldr	r0, [r1, #0]
 8004cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cca:	f380 8809 	msr	PSP, r0
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f380 8811 	msr	BASEPRI, r0
 8004cda:	4770      	bx	lr
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst2>:
 8004ce0:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ce8:	4808      	ldr	r0, [pc, #32]	; (8004d0c <prvPortStartFirstTask+0x24>)
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	6800      	ldr	r0, [r0, #0]
 8004cee:	f380 8808 	msr	MSP, r0
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8814 	msr	CONTROL, r0
 8004cfa:	b662      	cpsie	i
 8004cfc:	b661      	cpsie	f
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	df00      	svc	0
 8004d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed08 	.word	0xe000ed08

08004d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d16:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <xPortStartScheduler+0x120>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a46      	ldr	r2, [pc, #280]	; (8004e34 <xPortStartScheduler+0x124>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10a      	bne.n	8004d36 <xPortStartScheduler+0x26>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	613b      	str	r3, [r7, #16]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d36:	4b3e      	ldr	r3, [pc, #248]	; (8004e30 <xPortStartScheduler+0x120>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <xPortStartScheduler+0x128>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10a      	bne.n	8004d56 <xPortStartScheduler+0x46>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <xPortStartScheduler+0x12c>)
 8004d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <xPortStartScheduler+0x130>)
 8004d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <xPortStartScheduler+0x134>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d84:	e009      	b.n	8004d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d86:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <xPortStartScheduler+0x134>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <xPortStartScheduler+0x134>)
 8004d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d0ef      	beq.n	8004d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004da6:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <xPortStartScheduler+0x134>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1c3 0307 	rsb	r3, r3, #7
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00a      	beq.n	8004dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <xPortStartScheduler+0x134>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <xPortStartScheduler+0x134>)
 8004dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <xPortStartScheduler+0x134>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dda:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <xPortStartScheduler+0x134>)
 8004ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004de6:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <xPortStartScheduler+0x138>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <xPortStartScheduler+0x138>)
 8004dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <xPortStartScheduler+0x138>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <xPortStartScheduler+0x138>)
 8004df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dfe:	f000 f8dd 	bl	8004fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <xPortStartScheduler+0x13c>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e08:	f000 f8fc 	bl	8005004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e0c:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <xPortStartScheduler+0x140>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <xPortStartScheduler+0x140>)
 8004e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e18:	f7ff ff66 	bl	8004ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e1c:	f7fe ffac 	bl	8003d78 <vTaskSwitchContext>
	prvTaskExitError();
 8004e20:	f7ff ff1c 	bl	8004c5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	e000ed00 	.word	0xe000ed00
 8004e34:	410fc271 	.word	0x410fc271
 8004e38:	410fc270 	.word	0x410fc270
 8004e3c:	e000e400 	.word	0xe000e400
 8004e40:	20000a10 	.word	0x20000a10
 8004e44:	20000a14 	.word	0x20000a14
 8004e48:	e000ed20 	.word	0xe000ed20
 8004e4c:	2000000c 	.word	0x2000000c
 8004e50:	e000ef34 	.word	0xe000ef34

08004e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	607b      	str	r3, [r7, #4]
}
 8004e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <vPortEnterCritical+0x58>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <vPortEnterCritical+0x58>)
 8004e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <vPortEnterCritical+0x58>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10f      	bne.n	8004ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <vPortEnterCritical+0x5c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	603b      	str	r3, [r7, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <vPortEnterCritical+0x4a>
	}
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	2000000c 	.word	0x2000000c
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <vPortExitCritical+0x50>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <vPortExitCritical+0x24>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	607b      	str	r3, [r7, #4]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <vPortExitCritical+0x50>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <vPortExitCritical+0x50>)
 8004ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <vPortExitCritical+0x50>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <vPortExitCritical+0x42>
 8004eea:	2300      	movs	r3, #0
 8004eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f383 8811 	msr	BASEPRI, r3
}
 8004ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000000c 	.word	0x2000000c
	...

08004f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <pxCurrentTCBConst>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f01e 0f10 	tst.w	lr, #16
 8004f20:	bf08      	it	eq
 8004f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f34:	f380 8811 	msr	BASEPRI, r0
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f7fe ff1a 	bl	8003d78 <vTaskSwitchContext>
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f380 8811 	msr	BASEPRI, r0
 8004f4c:	bc09      	pop	{r0, r3}
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	6808      	ldr	r0, [r1, #0]
 8004f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f56:	f01e 0f10 	tst.w	lr, #16
 8004f5a:	bf08      	it	eq
 8004f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f60:	f380 8809 	msr	PSP, r0
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst>:
 8004f70:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f92:	f7fe fe39 	bl	8003c08 <xTaskIncrementTick>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f9c:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <xPortSysTickHandler+0x40>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f383 8811 	msr	BASEPRI, r3
}
 8004fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <vPortSetupTimerInterrupt+0x34>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <vPortSetupTimerInterrupt+0x38>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <vPortSetupTimerInterrupt+0x3c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <vPortSetupTimerInterrupt+0x40>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	099b      	lsrs	r3, r3, #6
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <vPortSetupTimerInterrupt+0x44>)
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <vPortSetupTimerInterrupt+0x34>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	e000e010 	.word	0xe000e010
 8004ff4:	e000e018 	.word	0xe000e018
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	10624dd3 	.word	0x10624dd3
 8005000:	e000e014 	.word	0xe000e014

08005004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005014 <vPortEnableVFP+0x10>
 8005008:	6801      	ldr	r1, [r0, #0]
 800500a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800500e:	6001      	str	r1, [r0, #0]
 8005010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005012:	bf00      	nop
 8005014:	e000ed88 	.word	0xe000ed88

08005018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800501e:	f3ef 8305 	mrs	r3, IPSR
 8005022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d914      	bls.n	8005054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <vPortValidateInterruptPriority+0x70>)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <vPortValidateInterruptPriority+0x74>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	7afa      	ldrb	r2, [r7, #11]
 800503a:	429a      	cmp	r2, r3
 800503c:	d20a      	bcs.n	8005054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <vPortValidateInterruptPriority+0x78>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800505c:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <vPortValidateInterruptPriority+0x7c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d90a      	bls.n	800507a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	603b      	str	r3, [r7, #0]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <vPortValidateInterruptPriority+0x60>
	}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000e3f0 	.word	0xe000e3f0
 800508c:	20000a10 	.word	0x20000a10
 8005090:	e000ed0c 	.word	0xe000ed0c
 8005094:	20000a14 	.word	0x20000a14

08005098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050a4:	f7fe fcf6 	bl	8003a94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050a8:	4b5b      	ldr	r3, [pc, #364]	; (8005218 <pvPortMalloc+0x180>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050b0:	f000 f920 	bl	80052f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050b4:	4b59      	ldr	r3, [pc, #356]	; (800521c <pvPortMalloc+0x184>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 8093 	bne.w	80051e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01d      	beq.n	8005104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050c8:	2208      	movs	r2, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d014      	beq.n	8005104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f023 0307 	bic.w	r3, r3, #7
 80050e0:	3308      	adds	r3, #8
 80050e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <pvPortMalloc+0x6c>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	617b      	str	r3, [r7, #20]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d06e      	beq.n	80051e8 <pvPortMalloc+0x150>
 800510a:	4b45      	ldr	r3, [pc, #276]	; (8005220 <pvPortMalloc+0x188>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d869      	bhi.n	80051e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <pvPortMalloc+0x18c>)
 8005116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <pvPortMalloc+0x18c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800511e:	e004      	b.n	800512a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d903      	bls.n	800513c <pvPortMalloc+0xa4>
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f1      	bne.n	8005120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800513c:	4b36      	ldr	r3, [pc, #216]	; (8005218 <pvPortMalloc+0x180>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	429a      	cmp	r2, r3
 8005144:	d050      	beq.n	80051e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2208      	movs	r2, #8
 800514c:	4413      	add	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	2308      	movs	r3, #8
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	429a      	cmp	r2, r3
 8005166:	d91f      	bls.n	80051a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <pvPortMalloc+0xf8>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	613b      	str	r3, [r7, #16]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1ad2      	subs	r2, r2, r3
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051a2:	69b8      	ldr	r0, [r7, #24]
 80051a4:	f000 f908 	bl	80053b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051a8:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <pvPortMalloc+0x188>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <pvPortMalloc+0x188>)
 80051b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <pvPortMalloc+0x188>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <pvPortMalloc+0x190>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d203      	bcs.n	80051ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <pvPortMalloc+0x188>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <pvPortMalloc+0x190>)
 80051c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	4b13      	ldr	r3, [pc, #76]	; (800521c <pvPortMalloc+0x184>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <pvPortMalloc+0x194>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3301      	adds	r3, #1
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <pvPortMalloc+0x194>)
 80051e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051e8:	f7fe fc62 	bl	8003ab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <pvPortMalloc+0x174>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	60fb      	str	r3, [r7, #12]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <pvPortMalloc+0x172>
	return pvReturn;
 800520c:	69fb      	ldr	r3, [r7, #28]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3728      	adds	r7, #40	; 0x28
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20004620 	.word	0x20004620
 800521c:	20004634 	.word	0x20004634
 8005220:	20004624 	.word	0x20004624
 8005224:	20004618 	.word	0x20004618
 8005228:	20004628 	.word	0x20004628
 800522c:	2000462c 	.word	0x2000462c

08005230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04d      	beq.n	80052de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005242:	2308      	movs	r3, #8
 8005244:	425b      	negs	r3, r3
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <vPortFree+0xb8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <vPortFree+0x44>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60fb      	str	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <vPortFree+0x62>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	60bb      	str	r3, [r7, #8]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <vPortFree+0xb8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01e      	beq.n	80052de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11a      	bne.n	80052de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <vPortFree+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	401a      	ands	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052b8:	f7fe fbec 	bl	8003a94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <vPortFree+0xbc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	4a09      	ldr	r2, [pc, #36]	; (80052ec <vPortFree+0xbc>)
 80052c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ca:	6938      	ldr	r0, [r7, #16]
 80052cc:	f000 f874 	bl	80053b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <vPortFree+0xc0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <vPortFree+0xc0>)
 80052d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052da:	f7fe fbe9 	bl	8003ab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20004634 	.word	0x20004634
 80052ec:	20004624 	.word	0x20004624
 80052f0:	20004630 	.word	0x20004630

080052f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <prvHeapInit+0xac>)
 8005302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3307      	adds	r3, #7
 8005312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <prvHeapInit+0xac>)
 8005324:	4413      	add	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <prvHeapInit+0xb0>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <prvHeapInit+0xb0>)
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005340:	2208      	movs	r2, #8
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0307 	bic.w	r3, r3, #7
 800534e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <prvHeapInit+0xb4>)
 8005354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <prvHeapInit+0xb4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <prvHeapInit+0xb4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <prvHeapInit+0xb4>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <prvHeapInit+0xb8>)
 8005382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <prvHeapInit+0xbc>)
 800538a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <prvHeapInit+0xc0>)
 800538e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000a18 	.word	0x20000a18
 80053a4:	20004618 	.word	0x20004618
 80053a8:	20004620 	.word	0x20004620
 80053ac:	20004628 	.word	0x20004628
 80053b0:	20004624 	.word	0x20004624
 80053b4:	20004634 	.word	0x20004634

080053b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <prvInsertBlockIntoFreeList+0xac>)
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e002      	b.n	80053cc <prvInsertBlockIntoFreeList+0x14>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d8f7      	bhi.n	80053c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4413      	add	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d108      	bne.n	80053fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d118      	bne.n	8005440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b15      	ldr	r3, [pc, #84]	; (8005468 <prvInsertBlockIntoFreeList+0xb0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d00d      	beq.n	8005436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e008      	b.n	8005448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <prvInsertBlockIntoFreeList+0xb0>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e003      	b.n	8005448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d002      	beq.n	8005456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20004618 	.word	0x20004618
 8005468:	20004620 	.word	0x20004620

0800546c <siprintf>:
 800546c:	b40e      	push	{r1, r2, r3}
 800546e:	b500      	push	{lr}
 8005470:	b09c      	sub	sp, #112	; 0x70
 8005472:	ab1d      	add	r3, sp, #116	; 0x74
 8005474:	9002      	str	r0, [sp, #8]
 8005476:	9006      	str	r0, [sp, #24]
 8005478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800547c:	4809      	ldr	r0, [pc, #36]	; (80054a4 <siprintf+0x38>)
 800547e:	9107      	str	r1, [sp, #28]
 8005480:	9104      	str	r1, [sp, #16]
 8005482:	4909      	ldr	r1, [pc, #36]	; (80054a8 <siprintf+0x3c>)
 8005484:	f853 2b04 	ldr.w	r2, [r3], #4
 8005488:	9105      	str	r1, [sp, #20]
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	a902      	add	r1, sp, #8
 8005490:	f000 f8a8 	bl	80055e4 <_svfiprintf_r>
 8005494:	9b02      	ldr	r3, [sp, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	b01c      	add	sp, #112	; 0x70
 800549c:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a0:	b003      	add	sp, #12
 80054a2:	4770      	bx	lr
 80054a4:	2000005c 	.word	0x2000005c
 80054a8:	ffff0208 	.word	0xffff0208

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <__errno>:
 80054bc:	4b01      	ldr	r3, [pc, #4]	; (80054c4 <__errno+0x8>)
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000005c 	.word	0x2000005c

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	4d0d      	ldr	r5, [pc, #52]	; (8005500 <__libc_init_array+0x38>)
 80054cc:	4c0d      	ldr	r4, [pc, #52]	; (8005504 <__libc_init_array+0x3c>)
 80054ce:	1b64      	subs	r4, r4, r5
 80054d0:	10a4      	asrs	r4, r4, #2
 80054d2:	2600      	movs	r6, #0
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	4d0b      	ldr	r5, [pc, #44]	; (8005508 <__libc_init_array+0x40>)
 80054da:	4c0c      	ldr	r4, [pc, #48]	; (800550c <__libc_init_array+0x44>)
 80054dc:	f000 fc6a 	bl	8005db4 <_init>
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	2600      	movs	r6, #0
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	08005f74 	.word	0x08005f74
 8005504:	08005f74 	.word	0x08005f74
 8005508:	08005f74 	.word	0x08005f74
 800550c:	08005f78 	.word	0x08005f78

08005510 <__retarget_lock_acquire_recursive>:
 8005510:	4770      	bx	lr

08005512 <__retarget_lock_release_recursive>:
 8005512:	4770      	bx	lr

08005514 <memcpy>:
 8005514:	440a      	add	r2, r1
 8005516:	4291      	cmp	r1, r2
 8005518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800551c:	d100      	bne.n	8005520 <memcpy+0xc>
 800551e:	4770      	bx	lr
 8005520:	b510      	push	{r4, lr}
 8005522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552a:	4291      	cmp	r1, r2
 800552c:	d1f9      	bne.n	8005522 <memcpy+0xe>
 800552e:	bd10      	pop	{r4, pc}

08005530 <__ssputs_r>:
 8005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	688e      	ldr	r6, [r1, #8]
 8005536:	461f      	mov	r7, r3
 8005538:	42be      	cmp	r6, r7
 800553a:	680b      	ldr	r3, [r1, #0]
 800553c:	4682      	mov	sl, r0
 800553e:	460c      	mov	r4, r1
 8005540:	4690      	mov	r8, r2
 8005542:	d82c      	bhi.n	800559e <__ssputs_r+0x6e>
 8005544:	898a      	ldrh	r2, [r1, #12]
 8005546:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800554a:	d026      	beq.n	800559a <__ssputs_r+0x6a>
 800554c:	6965      	ldr	r5, [r4, #20]
 800554e:	6909      	ldr	r1, [r1, #16]
 8005550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005554:	eba3 0901 	sub.w	r9, r3, r1
 8005558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800555c:	1c7b      	adds	r3, r7, #1
 800555e:	444b      	add	r3, r9
 8005560:	106d      	asrs	r5, r5, #1
 8005562:	429d      	cmp	r5, r3
 8005564:	bf38      	it	cc
 8005566:	461d      	movcc	r5, r3
 8005568:	0553      	lsls	r3, r2, #21
 800556a:	d527      	bpl.n	80055bc <__ssputs_r+0x8c>
 800556c:	4629      	mov	r1, r5
 800556e:	f000 f957 	bl	8005820 <_malloc_r>
 8005572:	4606      	mov	r6, r0
 8005574:	b360      	cbz	r0, 80055d0 <__ssputs_r+0xa0>
 8005576:	6921      	ldr	r1, [r4, #16]
 8005578:	464a      	mov	r2, r9
 800557a:	f7ff ffcb 	bl	8005514 <memcpy>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	6126      	str	r6, [r4, #16]
 800558c:	6165      	str	r5, [r4, #20]
 800558e:	444e      	add	r6, r9
 8005590:	eba5 0509 	sub.w	r5, r5, r9
 8005594:	6026      	str	r6, [r4, #0]
 8005596:	60a5      	str	r5, [r4, #8]
 8005598:	463e      	mov	r6, r7
 800559a:	42be      	cmp	r6, r7
 800559c:	d900      	bls.n	80055a0 <__ssputs_r+0x70>
 800559e:	463e      	mov	r6, r7
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	4632      	mov	r2, r6
 80055a4:	4641      	mov	r1, r8
 80055a6:	f000 fb86 	bl	8005cb6 <memmove>
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	1b9b      	subs	r3, r3, r6
 80055ae:	60a3      	str	r3, [r4, #8]
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	4433      	add	r3, r6
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	2000      	movs	r0, #0
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	462a      	mov	r2, r5
 80055be:	f000 fb4b 	bl	8005c58 <_realloc_r>
 80055c2:	4606      	mov	r6, r0
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1e0      	bne.n	800558a <__ssputs_r+0x5a>
 80055c8:	6921      	ldr	r1, [r4, #16]
 80055ca:	4650      	mov	r0, sl
 80055cc:	f000 fb9e 	bl	8005d0c <_free_r>
 80055d0:	230c      	movs	r3, #12
 80055d2:	f8ca 3000 	str.w	r3, [sl]
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e2:	e7e9      	b.n	80055b8 <__ssputs_r+0x88>

080055e4 <_svfiprintf_r>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	4698      	mov	r8, r3
 80055ea:	898b      	ldrh	r3, [r1, #12]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	b09d      	sub	sp, #116	; 0x74
 80055f0:	4607      	mov	r7, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	4614      	mov	r4, r2
 80055f6:	d50e      	bpl.n	8005616 <_svfiprintf_r+0x32>
 80055f8:	690b      	ldr	r3, [r1, #16]
 80055fa:	b963      	cbnz	r3, 8005616 <_svfiprintf_r+0x32>
 80055fc:	2140      	movs	r1, #64	; 0x40
 80055fe:	f000 f90f 	bl	8005820 <_malloc_r>
 8005602:	6028      	str	r0, [r5, #0]
 8005604:	6128      	str	r0, [r5, #16]
 8005606:	b920      	cbnz	r0, 8005612 <_svfiprintf_r+0x2e>
 8005608:	230c      	movs	r3, #12
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005610:	e0d0      	b.n	80057b4 <_svfiprintf_r+0x1d0>
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	616b      	str	r3, [r5, #20]
 8005616:	2300      	movs	r3, #0
 8005618:	9309      	str	r3, [sp, #36]	; 0x24
 800561a:	2320      	movs	r3, #32
 800561c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005620:	f8cd 800c 	str.w	r8, [sp, #12]
 8005624:	2330      	movs	r3, #48	; 0x30
 8005626:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057cc <_svfiprintf_r+0x1e8>
 800562a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562e:	f04f 0901 	mov.w	r9, #1
 8005632:	4623      	mov	r3, r4
 8005634:	469a      	mov	sl, r3
 8005636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800563a:	b10a      	cbz	r2, 8005640 <_svfiprintf_r+0x5c>
 800563c:	2a25      	cmp	r2, #37	; 0x25
 800563e:	d1f9      	bne.n	8005634 <_svfiprintf_r+0x50>
 8005640:	ebba 0b04 	subs.w	fp, sl, r4
 8005644:	d00b      	beq.n	800565e <_svfiprintf_r+0x7a>
 8005646:	465b      	mov	r3, fp
 8005648:	4622      	mov	r2, r4
 800564a:	4629      	mov	r1, r5
 800564c:	4638      	mov	r0, r7
 800564e:	f7ff ff6f 	bl	8005530 <__ssputs_r>
 8005652:	3001      	adds	r0, #1
 8005654:	f000 80a9 	beq.w	80057aa <_svfiprintf_r+0x1c6>
 8005658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800565a:	445a      	add	r2, fp
 800565c:	9209      	str	r2, [sp, #36]	; 0x24
 800565e:	f89a 3000 	ldrb.w	r3, [sl]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80a1 	beq.w	80057aa <_svfiprintf_r+0x1c6>
 8005668:	2300      	movs	r3, #0
 800566a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800566e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005672:	f10a 0a01 	add.w	sl, sl, #1
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	9307      	str	r3, [sp, #28]
 800567a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567e:	931a      	str	r3, [sp, #104]	; 0x68
 8005680:	4654      	mov	r4, sl
 8005682:	2205      	movs	r2, #5
 8005684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005688:	4850      	ldr	r0, [pc, #320]	; (80057cc <_svfiprintf_r+0x1e8>)
 800568a:	f7fa fdb1 	bl	80001f0 <memchr>
 800568e:	9a04      	ldr	r2, [sp, #16]
 8005690:	b9d8      	cbnz	r0, 80056ca <_svfiprintf_r+0xe6>
 8005692:	06d0      	lsls	r0, r2, #27
 8005694:	bf44      	itt	mi
 8005696:	2320      	movmi	r3, #32
 8005698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800569c:	0711      	lsls	r1, r2, #28
 800569e:	bf44      	itt	mi
 80056a0:	232b      	movmi	r3, #43	; 0x2b
 80056a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a6:	f89a 3000 	ldrb.w	r3, [sl]
 80056aa:	2b2a      	cmp	r3, #42	; 0x2a
 80056ac:	d015      	beq.n	80056da <_svfiprintf_r+0xf6>
 80056ae:	9a07      	ldr	r2, [sp, #28]
 80056b0:	4654      	mov	r4, sl
 80056b2:	2000      	movs	r0, #0
 80056b4:	f04f 0c0a 	mov.w	ip, #10
 80056b8:	4621      	mov	r1, r4
 80056ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056be:	3b30      	subs	r3, #48	; 0x30
 80056c0:	2b09      	cmp	r3, #9
 80056c2:	d94d      	bls.n	8005760 <_svfiprintf_r+0x17c>
 80056c4:	b1b0      	cbz	r0, 80056f4 <_svfiprintf_r+0x110>
 80056c6:	9207      	str	r2, [sp, #28]
 80056c8:	e014      	b.n	80056f4 <_svfiprintf_r+0x110>
 80056ca:	eba0 0308 	sub.w	r3, r0, r8
 80056ce:	fa09 f303 	lsl.w	r3, r9, r3
 80056d2:	4313      	orrs	r3, r2
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	46a2      	mov	sl, r4
 80056d8:	e7d2      	b.n	8005680 <_svfiprintf_r+0x9c>
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	1d19      	adds	r1, r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	9103      	str	r1, [sp, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfbb      	ittet	lt
 80056e6:	425b      	neglt	r3, r3
 80056e8:	f042 0202 	orrlt.w	r2, r2, #2
 80056ec:	9307      	strge	r3, [sp, #28]
 80056ee:	9307      	strlt	r3, [sp, #28]
 80056f0:	bfb8      	it	lt
 80056f2:	9204      	strlt	r2, [sp, #16]
 80056f4:	7823      	ldrb	r3, [r4, #0]
 80056f6:	2b2e      	cmp	r3, #46	; 0x2e
 80056f8:	d10c      	bne.n	8005714 <_svfiprintf_r+0x130>
 80056fa:	7863      	ldrb	r3, [r4, #1]
 80056fc:	2b2a      	cmp	r3, #42	; 0x2a
 80056fe:	d134      	bne.n	800576a <_svfiprintf_r+0x186>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	1d1a      	adds	r2, r3, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	9203      	str	r2, [sp, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfb8      	it	lt
 800570c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005710:	3402      	adds	r4, #2
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057dc <_svfiprintf_r+0x1f8>
 8005718:	7821      	ldrb	r1, [r4, #0]
 800571a:	2203      	movs	r2, #3
 800571c:	4650      	mov	r0, sl
 800571e:	f7fa fd67 	bl	80001f0 <memchr>
 8005722:	b138      	cbz	r0, 8005734 <_svfiprintf_r+0x150>
 8005724:	9b04      	ldr	r3, [sp, #16]
 8005726:	eba0 000a 	sub.w	r0, r0, sl
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	4082      	lsls	r2, r0
 800572e:	4313      	orrs	r3, r2
 8005730:	3401      	adds	r4, #1
 8005732:	9304      	str	r3, [sp, #16]
 8005734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005738:	4825      	ldr	r0, [pc, #148]	; (80057d0 <_svfiprintf_r+0x1ec>)
 800573a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573e:	2206      	movs	r2, #6
 8005740:	f7fa fd56 	bl	80001f0 <memchr>
 8005744:	2800      	cmp	r0, #0
 8005746:	d038      	beq.n	80057ba <_svfiprintf_r+0x1d6>
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <_svfiprintf_r+0x1f0>)
 800574a:	bb1b      	cbnz	r3, 8005794 <_svfiprintf_r+0x1b0>
 800574c:	9b03      	ldr	r3, [sp, #12]
 800574e:	3307      	adds	r3, #7
 8005750:	f023 0307 	bic.w	r3, r3, #7
 8005754:	3308      	adds	r3, #8
 8005756:	9303      	str	r3, [sp, #12]
 8005758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575a:	4433      	add	r3, r6
 800575c:	9309      	str	r3, [sp, #36]	; 0x24
 800575e:	e768      	b.n	8005632 <_svfiprintf_r+0x4e>
 8005760:	fb0c 3202 	mla	r2, ip, r2, r3
 8005764:	460c      	mov	r4, r1
 8005766:	2001      	movs	r0, #1
 8005768:	e7a6      	b.n	80056b8 <_svfiprintf_r+0xd4>
 800576a:	2300      	movs	r3, #0
 800576c:	3401      	adds	r4, #1
 800576e:	9305      	str	r3, [sp, #20]
 8005770:	4619      	mov	r1, r3
 8005772:	f04f 0c0a 	mov.w	ip, #10
 8005776:	4620      	mov	r0, r4
 8005778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577c:	3a30      	subs	r2, #48	; 0x30
 800577e:	2a09      	cmp	r2, #9
 8005780:	d903      	bls.n	800578a <_svfiprintf_r+0x1a6>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0c6      	beq.n	8005714 <_svfiprintf_r+0x130>
 8005786:	9105      	str	r1, [sp, #20]
 8005788:	e7c4      	b.n	8005714 <_svfiprintf_r+0x130>
 800578a:	fb0c 2101 	mla	r1, ip, r1, r2
 800578e:	4604      	mov	r4, r0
 8005790:	2301      	movs	r3, #1
 8005792:	e7f0      	b.n	8005776 <_svfiprintf_r+0x192>
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	462a      	mov	r2, r5
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <_svfiprintf_r+0x1f4>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4638      	mov	r0, r7
 80057a0:	f3af 8000 	nop.w
 80057a4:	1c42      	adds	r2, r0, #1
 80057a6:	4606      	mov	r6, r0
 80057a8:	d1d6      	bne.n	8005758 <_svfiprintf_r+0x174>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	065b      	lsls	r3, r3, #25
 80057ae:	f53f af2d 	bmi.w	800560c <_svfiprintf_r+0x28>
 80057b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b4:	b01d      	add	sp, #116	; 0x74
 80057b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ba:	ab03      	add	r3, sp, #12
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	462a      	mov	r2, r5
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <_svfiprintf_r+0x1f4>)
 80057c2:	a904      	add	r1, sp, #16
 80057c4:	4638      	mov	r0, r7
 80057c6:	f000 f919 	bl	80059fc <_printf_i>
 80057ca:	e7eb      	b.n	80057a4 <_svfiprintf_r+0x1c0>
 80057cc:	08005f38 	.word	0x08005f38
 80057d0:	08005f42 	.word	0x08005f42
 80057d4:	00000000 	.word	0x00000000
 80057d8:	08005531 	.word	0x08005531
 80057dc:	08005f3e 	.word	0x08005f3e

080057e0 <sbrk_aligned>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4e0e      	ldr	r6, [pc, #56]	; (800581c <sbrk_aligned+0x3c>)
 80057e4:	460c      	mov	r4, r1
 80057e6:	6831      	ldr	r1, [r6, #0]
 80057e8:	4605      	mov	r5, r0
 80057ea:	b911      	cbnz	r1, 80057f2 <sbrk_aligned+0x12>
 80057ec:	f000 fa7e 	bl	8005cec <_sbrk_r>
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 fa79 	bl	8005cec <_sbrk_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d00a      	beq.n	8005814 <sbrk_aligned+0x34>
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d007      	beq.n	8005818 <sbrk_aligned+0x38>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4628      	mov	r0, r5
 800580c:	f000 fa6e 	bl	8005cec <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d101      	bne.n	8005818 <sbrk_aligned+0x38>
 8005814:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005818:	4620      	mov	r0, r4
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	20004778 	.word	0x20004778

08005820 <_malloc_r>:
 8005820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005824:	1ccd      	adds	r5, r1, #3
 8005826:	f025 0503 	bic.w	r5, r5, #3
 800582a:	3508      	adds	r5, #8
 800582c:	2d0c      	cmp	r5, #12
 800582e:	bf38      	it	cc
 8005830:	250c      	movcc	r5, #12
 8005832:	2d00      	cmp	r5, #0
 8005834:	4607      	mov	r7, r0
 8005836:	db01      	blt.n	800583c <_malloc_r+0x1c>
 8005838:	42a9      	cmp	r1, r5
 800583a:	d905      	bls.n	8005848 <_malloc_r+0x28>
 800583c:	230c      	movs	r3, #12
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	2600      	movs	r6, #0
 8005842:	4630      	mov	r0, r6
 8005844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005848:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800591c <_malloc_r+0xfc>
 800584c:	f000 f9f8 	bl	8005c40 <__malloc_lock>
 8005850:	f8d8 3000 	ldr.w	r3, [r8]
 8005854:	461c      	mov	r4, r3
 8005856:	bb5c      	cbnz	r4, 80058b0 <_malloc_r+0x90>
 8005858:	4629      	mov	r1, r5
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff ffc0 	bl	80057e0 <sbrk_aligned>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	4604      	mov	r4, r0
 8005864:	d155      	bne.n	8005912 <_malloc_r+0xf2>
 8005866:	f8d8 4000 	ldr.w	r4, [r8]
 800586a:	4626      	mov	r6, r4
 800586c:	2e00      	cmp	r6, #0
 800586e:	d145      	bne.n	80058fc <_malloc_r+0xdc>
 8005870:	2c00      	cmp	r4, #0
 8005872:	d048      	beq.n	8005906 <_malloc_r+0xe6>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	4631      	mov	r1, r6
 8005878:	4638      	mov	r0, r7
 800587a:	eb04 0903 	add.w	r9, r4, r3
 800587e:	f000 fa35 	bl	8005cec <_sbrk_r>
 8005882:	4581      	cmp	r9, r0
 8005884:	d13f      	bne.n	8005906 <_malloc_r+0xe6>
 8005886:	6821      	ldr	r1, [r4, #0]
 8005888:	1a6d      	subs	r5, r5, r1
 800588a:	4629      	mov	r1, r5
 800588c:	4638      	mov	r0, r7
 800588e:	f7ff ffa7 	bl	80057e0 <sbrk_aligned>
 8005892:	3001      	adds	r0, #1
 8005894:	d037      	beq.n	8005906 <_malloc_r+0xe6>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	442b      	add	r3, r5
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	f8d8 3000 	ldr.w	r3, [r8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d038      	beq.n	8005916 <_malloc_r+0xf6>
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	42a2      	cmp	r2, r4
 80058a8:	d12b      	bne.n	8005902 <_malloc_r+0xe2>
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	e00f      	b.n	80058d0 <_malloc_r+0xb0>
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	1b52      	subs	r2, r2, r5
 80058b4:	d41f      	bmi.n	80058f6 <_malloc_r+0xd6>
 80058b6:	2a0b      	cmp	r2, #11
 80058b8:	d917      	bls.n	80058ea <_malloc_r+0xca>
 80058ba:	1961      	adds	r1, r4, r5
 80058bc:	42a3      	cmp	r3, r4
 80058be:	6025      	str	r5, [r4, #0]
 80058c0:	bf18      	it	ne
 80058c2:	6059      	strne	r1, [r3, #4]
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	bf08      	it	eq
 80058c8:	f8c8 1000 	streq.w	r1, [r8]
 80058cc:	5162      	str	r2, [r4, r5]
 80058ce:	604b      	str	r3, [r1, #4]
 80058d0:	4638      	mov	r0, r7
 80058d2:	f104 060b 	add.w	r6, r4, #11
 80058d6:	f000 f9b9 	bl	8005c4c <__malloc_unlock>
 80058da:	f026 0607 	bic.w	r6, r6, #7
 80058de:	1d23      	adds	r3, r4, #4
 80058e0:	1af2      	subs	r2, r6, r3
 80058e2:	d0ae      	beq.n	8005842 <_malloc_r+0x22>
 80058e4:	1b9b      	subs	r3, r3, r6
 80058e6:	50a3      	str	r3, [r4, r2]
 80058e8:	e7ab      	b.n	8005842 <_malloc_r+0x22>
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	d1dd      	bne.n	80058ac <_malloc_r+0x8c>
 80058f0:	f8c8 2000 	str.w	r2, [r8]
 80058f4:	e7ec      	b.n	80058d0 <_malloc_r+0xb0>
 80058f6:	4623      	mov	r3, r4
 80058f8:	6864      	ldr	r4, [r4, #4]
 80058fa:	e7ac      	b.n	8005856 <_malloc_r+0x36>
 80058fc:	4634      	mov	r4, r6
 80058fe:	6876      	ldr	r6, [r6, #4]
 8005900:	e7b4      	b.n	800586c <_malloc_r+0x4c>
 8005902:	4613      	mov	r3, r2
 8005904:	e7cc      	b.n	80058a0 <_malloc_r+0x80>
 8005906:	230c      	movs	r3, #12
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4638      	mov	r0, r7
 800590c:	f000 f99e 	bl	8005c4c <__malloc_unlock>
 8005910:	e797      	b.n	8005842 <_malloc_r+0x22>
 8005912:	6025      	str	r5, [r4, #0]
 8005914:	e7dc      	b.n	80058d0 <_malloc_r+0xb0>
 8005916:	605b      	str	r3, [r3, #4]
 8005918:	deff      	udf	#255	; 0xff
 800591a:	bf00      	nop
 800591c:	20004774 	.word	0x20004774

08005920 <_printf_common>:
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	4616      	mov	r6, r2
 8005926:	4699      	mov	r9, r3
 8005928:	688a      	ldr	r2, [r1, #8]
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005930:	4293      	cmp	r3, r2
 8005932:	bfb8      	it	lt
 8005934:	4613      	movlt	r3, r2
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800593c:	4607      	mov	r7, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b10a      	cbz	r2, 8005946 <_printf_common+0x26>
 8005942:	3301      	adds	r3, #1
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	0699      	lsls	r1, r3, #26
 800594a:	bf42      	ittt	mi
 800594c:	6833      	ldrmi	r3, [r6, #0]
 800594e:	3302      	addmi	r3, #2
 8005950:	6033      	strmi	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	f015 0506 	ands.w	r5, r5, #6
 8005958:	d106      	bne.n	8005968 <_printf_common+0x48>
 800595a:	f104 0a19 	add.w	sl, r4, #25
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	6832      	ldr	r2, [r6, #0]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	42ab      	cmp	r3, r5
 8005966:	dc26      	bgt.n	80059b6 <_printf_common+0x96>
 8005968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800596c:	1e13      	subs	r3, r2, #0
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	bf18      	it	ne
 8005972:	2301      	movne	r3, #1
 8005974:	0692      	lsls	r2, r2, #26
 8005976:	d42b      	bmi.n	80059d0 <_printf_common+0xb0>
 8005978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800597c:	4649      	mov	r1, r9
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	3001      	adds	r0, #1
 8005984:	d01e      	beq.n	80059c4 <_printf_common+0xa4>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6922      	ldr	r2, [r4, #16]
 800598a:	f003 0306 	and.w	r3, r3, #6
 800598e:	2b04      	cmp	r3, #4
 8005990:	bf02      	ittt	eq
 8005992:	68e5      	ldreq	r5, [r4, #12]
 8005994:	6833      	ldreq	r3, [r6, #0]
 8005996:	1aed      	subeq	r5, r5, r3
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	bf0c      	ite	eq
 800599c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a0:	2500      	movne	r5, #0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bfc4      	itt	gt
 80059a6:	1a9b      	subgt	r3, r3, r2
 80059a8:	18ed      	addgt	r5, r5, r3
 80059aa:	2600      	movs	r6, #0
 80059ac:	341a      	adds	r4, #26
 80059ae:	42b5      	cmp	r5, r6
 80059b0:	d11a      	bne.n	80059e8 <_printf_common+0xc8>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e008      	b.n	80059c8 <_printf_common+0xa8>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4652      	mov	r2, sl
 80059ba:	4649      	mov	r1, r9
 80059bc:	4638      	mov	r0, r7
 80059be:	47c0      	blx	r8
 80059c0:	3001      	adds	r0, #1
 80059c2:	d103      	bne.n	80059cc <_printf_common+0xac>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	3501      	adds	r5, #1
 80059ce:	e7c6      	b.n	800595e <_printf_common+0x3e>
 80059d0:	18e1      	adds	r1, r4, r3
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	2030      	movs	r0, #48	; 0x30
 80059d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059da:	4422      	add	r2, r4
 80059dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e4:	3302      	adds	r3, #2
 80059e6:	e7c7      	b.n	8005978 <_printf_common+0x58>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4622      	mov	r2, r4
 80059ec:	4649      	mov	r1, r9
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c0      	blx	r8
 80059f2:	3001      	adds	r0, #1
 80059f4:	d0e6      	beq.n	80059c4 <_printf_common+0xa4>
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7d9      	b.n	80059ae <_printf_common+0x8e>
	...

080059fc <_printf_i>:
 80059fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	7e0f      	ldrb	r7, [r1, #24]
 8005a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a04:	2f78      	cmp	r7, #120	; 0x78
 8005a06:	4691      	mov	r9, r2
 8005a08:	4680      	mov	r8, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	469a      	mov	sl, r3
 8005a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a12:	d807      	bhi.n	8005a24 <_printf_i+0x28>
 8005a14:	2f62      	cmp	r7, #98	; 0x62
 8005a16:	d80a      	bhi.n	8005a2e <_printf_i+0x32>
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	f000 80d4 	beq.w	8005bc6 <_printf_i+0x1ca>
 8005a1e:	2f58      	cmp	r7, #88	; 0x58
 8005a20:	f000 80c0 	beq.w	8005ba4 <_printf_i+0x1a8>
 8005a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a2c:	e03a      	b.n	8005aa4 <_printf_i+0xa8>
 8005a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a32:	2b15      	cmp	r3, #21
 8005a34:	d8f6      	bhi.n	8005a24 <_printf_i+0x28>
 8005a36:	a101      	add	r1, pc, #4	; (adr r1, 8005a3c <_printf_i+0x40>)
 8005a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005aa9 	.word	0x08005aa9
 8005a44:	08005a25 	.word	0x08005a25
 8005a48:	08005a25 	.word	0x08005a25
 8005a4c:	08005a25 	.word	0x08005a25
 8005a50:	08005a25 	.word	0x08005a25
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005a25 	.word	0x08005a25
 8005a5c:	08005a25 	.word	0x08005a25
 8005a60:	08005a25 	.word	0x08005a25
 8005a64:	08005a25 	.word	0x08005a25
 8005a68:	08005bad 	.word	0x08005bad
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005b67 	.word	0x08005b67
 8005a74:	08005a25 	.word	0x08005a25
 8005a78:	08005a25 	.word	0x08005a25
 8005a7c:	08005bcf 	.word	0x08005bcf
 8005a80:	08005a25 	.word	0x08005a25
 8005a84:	08005ad5 	.word	0x08005ad5
 8005a88:	08005a25 	.word	0x08005a25
 8005a8c:	08005a25 	.word	0x08005a25
 8005a90:	08005b6f 	.word	0x08005b6f
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	602a      	str	r2, [r5, #0]
 8005a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e09f      	b.n	8005be8 <_printf_i+0x1ec>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	0607      	lsls	r7, r0, #24
 8005aae:	f103 0104 	add.w	r1, r3, #4
 8005ab2:	6029      	str	r1, [r5, #0]
 8005ab4:	d501      	bpl.n	8005aba <_printf_i+0xbe>
 8005ab6:	681e      	ldr	r6, [r3, #0]
 8005ab8:	e003      	b.n	8005ac2 <_printf_i+0xc6>
 8005aba:	0646      	lsls	r6, r0, #25
 8005abc:	d5fb      	bpl.n	8005ab6 <_printf_i+0xba>
 8005abe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ac2:	2e00      	cmp	r6, #0
 8005ac4:	da03      	bge.n	8005ace <_printf_i+0xd2>
 8005ac6:	232d      	movs	r3, #45	; 0x2d
 8005ac8:	4276      	negs	r6, r6
 8005aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ace:	485a      	ldr	r0, [pc, #360]	; (8005c38 <_printf_i+0x23c>)
 8005ad0:	230a      	movs	r3, #10
 8005ad2:	e012      	b.n	8005afa <_printf_i+0xfe>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	1d19      	adds	r1, r3, #4
 8005ada:	6029      	str	r1, [r5, #0]
 8005adc:	0605      	lsls	r5, r0, #24
 8005ade:	d501      	bpl.n	8005ae4 <_printf_i+0xe8>
 8005ae0:	681e      	ldr	r6, [r3, #0]
 8005ae2:	e002      	b.n	8005aea <_printf_i+0xee>
 8005ae4:	0641      	lsls	r1, r0, #25
 8005ae6:	d5fb      	bpl.n	8005ae0 <_printf_i+0xe4>
 8005ae8:	881e      	ldrh	r6, [r3, #0]
 8005aea:	4853      	ldr	r0, [pc, #332]	; (8005c38 <_printf_i+0x23c>)
 8005aec:	2f6f      	cmp	r7, #111	; 0x6f
 8005aee:	bf0c      	ite	eq
 8005af0:	2308      	moveq	r3, #8
 8005af2:	230a      	movne	r3, #10
 8005af4:	2100      	movs	r1, #0
 8005af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005afa:	6865      	ldr	r5, [r4, #4]
 8005afc:	60a5      	str	r5, [r4, #8]
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	bfa2      	ittt	ge
 8005b02:	6821      	ldrge	r1, [r4, #0]
 8005b04:	f021 0104 	bicge.w	r1, r1, #4
 8005b08:	6021      	strge	r1, [r4, #0]
 8005b0a:	b90e      	cbnz	r6, 8005b10 <_printf_i+0x114>
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	d04b      	beq.n	8005ba8 <_printf_i+0x1ac>
 8005b10:	4615      	mov	r5, r2
 8005b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b16:	fb03 6711 	mls	r7, r3, r1, r6
 8005b1a:	5dc7      	ldrb	r7, [r0, r7]
 8005b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b20:	4637      	mov	r7, r6
 8005b22:	42bb      	cmp	r3, r7
 8005b24:	460e      	mov	r6, r1
 8005b26:	d9f4      	bls.n	8005b12 <_printf_i+0x116>
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d10b      	bne.n	8005b44 <_printf_i+0x148>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07de      	lsls	r6, r3, #31
 8005b30:	d508      	bpl.n	8005b44 <_printf_i+0x148>
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6861      	ldr	r1, [r4, #4]
 8005b36:	4299      	cmp	r1, r3
 8005b38:	bfde      	ittt	le
 8005b3a:	2330      	movle	r3, #48	; 0x30
 8005b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b44:	1b52      	subs	r2, r2, r5
 8005b46:	6122      	str	r2, [r4, #16]
 8005b48:	f8cd a000 	str.w	sl, [sp]
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	aa03      	add	r2, sp, #12
 8005b50:	4621      	mov	r1, r4
 8005b52:	4640      	mov	r0, r8
 8005b54:	f7ff fee4 	bl	8005920 <_printf_common>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d14a      	bne.n	8005bf2 <_printf_i+0x1f6>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b60:	b004      	add	sp, #16
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	f043 0320 	orr.w	r3, r3, #32
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	4833      	ldr	r0, [pc, #204]	; (8005c3c <_printf_i+0x240>)
 8005b70:	2778      	movs	r7, #120	; 0x78
 8005b72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	6829      	ldr	r1, [r5, #0]
 8005b7a:	061f      	lsls	r7, r3, #24
 8005b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b80:	d402      	bmi.n	8005b88 <_printf_i+0x18c>
 8005b82:	065f      	lsls	r7, r3, #25
 8005b84:	bf48      	it	mi
 8005b86:	b2b6      	uxthmi	r6, r6
 8005b88:	07df      	lsls	r7, r3, #31
 8005b8a:	bf48      	it	mi
 8005b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b90:	6029      	str	r1, [r5, #0]
 8005b92:	bf48      	it	mi
 8005b94:	6023      	strmi	r3, [r4, #0]
 8005b96:	b91e      	cbnz	r6, 8005ba0 <_printf_i+0x1a4>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	f023 0320 	bic.w	r3, r3, #32
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	e7a7      	b.n	8005af4 <_printf_i+0xf8>
 8005ba4:	4824      	ldr	r0, [pc, #144]	; (8005c38 <_printf_i+0x23c>)
 8005ba6:	e7e4      	b.n	8005b72 <_printf_i+0x176>
 8005ba8:	4615      	mov	r5, r2
 8005baa:	e7bd      	b.n	8005b28 <_printf_i+0x12c>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	6826      	ldr	r6, [r4, #0]
 8005bb0:	6961      	ldr	r1, [r4, #20]
 8005bb2:	1d18      	adds	r0, r3, #4
 8005bb4:	6028      	str	r0, [r5, #0]
 8005bb6:	0635      	lsls	r5, r6, #24
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	d501      	bpl.n	8005bc0 <_printf_i+0x1c4>
 8005bbc:	6019      	str	r1, [r3, #0]
 8005bbe:	e002      	b.n	8005bc6 <_printf_i+0x1ca>
 8005bc0:	0670      	lsls	r0, r6, #25
 8005bc2:	d5fb      	bpl.n	8005bbc <_printf_i+0x1c0>
 8005bc4:	8019      	strh	r1, [r3, #0]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6123      	str	r3, [r4, #16]
 8005bca:	4615      	mov	r5, r2
 8005bcc:	e7bc      	b.n	8005b48 <_printf_i+0x14c>
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	1d1a      	adds	r2, r3, #4
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	681d      	ldr	r5, [r3, #0]
 8005bd6:	6862      	ldr	r2, [r4, #4]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f7fa fb08 	bl	80001f0 <memchr>
 8005be0:	b108      	cbz	r0, 8005be6 <_printf_i+0x1ea>
 8005be2:	1b40      	subs	r0, r0, r5
 8005be4:	6060      	str	r0, [r4, #4]
 8005be6:	6863      	ldr	r3, [r4, #4]
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	2300      	movs	r3, #0
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf0:	e7aa      	b.n	8005b48 <_printf_i+0x14c>
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	47d0      	blx	sl
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d0ad      	beq.n	8005b5c <_printf_i+0x160>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	079b      	lsls	r3, r3, #30
 8005c04:	d413      	bmi.n	8005c2e <_printf_i+0x232>
 8005c06:	68e0      	ldr	r0, [r4, #12]
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	bfb8      	it	lt
 8005c0e:	4618      	movlt	r0, r3
 8005c10:	e7a6      	b.n	8005b60 <_printf_i+0x164>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4632      	mov	r2, r6
 8005c16:	4649      	mov	r1, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	47d0      	blx	sl
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d09d      	beq.n	8005b5c <_printf_i+0x160>
 8005c20:	3501      	adds	r5, #1
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	9903      	ldr	r1, [sp, #12]
 8005c26:	1a5b      	subs	r3, r3, r1
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dcf2      	bgt.n	8005c12 <_printf_i+0x216>
 8005c2c:	e7eb      	b.n	8005c06 <_printf_i+0x20a>
 8005c2e:	2500      	movs	r5, #0
 8005c30:	f104 0619 	add.w	r6, r4, #25
 8005c34:	e7f5      	b.n	8005c22 <_printf_i+0x226>
 8005c36:	bf00      	nop
 8005c38:	08005f49 	.word	0x08005f49
 8005c3c:	08005f5a 	.word	0x08005f5a

08005c40 <__malloc_lock>:
 8005c40:	4801      	ldr	r0, [pc, #4]	; (8005c48 <__malloc_lock+0x8>)
 8005c42:	f7ff bc65 	b.w	8005510 <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	20004770 	.word	0x20004770

08005c4c <__malloc_unlock>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	; (8005c54 <__malloc_unlock+0x8>)
 8005c4e:	f7ff bc60 	b.w	8005512 <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	20004770 	.word	0x20004770

08005c58 <_realloc_r>:
 8005c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4614      	mov	r4, r2
 8005c60:	460e      	mov	r6, r1
 8005c62:	b921      	cbnz	r1, 8005c6e <_realloc_r+0x16>
 8005c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	4611      	mov	r1, r2
 8005c6a:	f7ff bdd9 	b.w	8005820 <_malloc_r>
 8005c6e:	b92a      	cbnz	r2, 8005c7c <_realloc_r+0x24>
 8005c70:	f000 f84c 	bl	8005d0c <_free_r>
 8005c74:	4625      	mov	r5, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7c:	f000 f892 	bl	8005da4 <_malloc_usable_size_r>
 8005c80:	4284      	cmp	r4, r0
 8005c82:	4607      	mov	r7, r0
 8005c84:	d802      	bhi.n	8005c8c <_realloc_r+0x34>
 8005c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c8a:	d812      	bhi.n	8005cb2 <_realloc_r+0x5a>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4640      	mov	r0, r8
 8005c90:	f7ff fdc6 	bl	8005820 <_malloc_r>
 8005c94:	4605      	mov	r5, r0
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d0ed      	beq.n	8005c76 <_realloc_r+0x1e>
 8005c9a:	42bc      	cmp	r4, r7
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	bf28      	it	cs
 8005ca2:	463a      	movcs	r2, r7
 8005ca4:	f7ff fc36 	bl	8005514 <memcpy>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4640      	mov	r0, r8
 8005cac:	f000 f82e 	bl	8005d0c <_free_r>
 8005cb0:	e7e1      	b.n	8005c76 <_realloc_r+0x1e>
 8005cb2:	4635      	mov	r5, r6
 8005cb4:	e7df      	b.n	8005c76 <_realloc_r+0x1e>

08005cb6 <memmove>:
 8005cb6:	4288      	cmp	r0, r1
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	eb01 0402 	add.w	r4, r1, r2
 8005cbe:	d902      	bls.n	8005cc6 <memmove+0x10>
 8005cc0:	4284      	cmp	r4, r0
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	d807      	bhi.n	8005cd6 <memmove+0x20>
 8005cc6:	1e43      	subs	r3, r0, #1
 8005cc8:	42a1      	cmp	r1, r4
 8005cca:	d008      	beq.n	8005cde <memmove+0x28>
 8005ccc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cd4:	e7f8      	b.n	8005cc8 <memmove+0x12>
 8005cd6:	4402      	add	r2, r0
 8005cd8:	4601      	mov	r1, r0
 8005cda:	428a      	cmp	r2, r1
 8005cdc:	d100      	bne.n	8005ce0 <memmove+0x2a>
 8005cde:	bd10      	pop	{r4, pc}
 8005ce0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ce4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ce8:	e7f7      	b.n	8005cda <memmove+0x24>
	...

08005cec <_sbrk_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d06      	ldr	r5, [pc, #24]	; (8005d08 <_sbrk_r+0x1c>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	f7fb f81c 	bl	8000d34 <_sbrk>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_sbrk_r+0x1a>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_sbrk_r+0x1a>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	2000477c 	.word	0x2000477c

08005d0c <_free_r>:
 8005d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	d044      	beq.n	8005d9c <_free_r+0x90>
 8005d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d16:	9001      	str	r0, [sp, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d1e:	bfb8      	it	lt
 8005d20:	18e4      	addlt	r4, r4, r3
 8005d22:	f7ff ff8d 	bl	8005c40 <__malloc_lock>
 8005d26:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <_free_r+0x94>)
 8005d28:	9801      	ldr	r0, [sp, #4]
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	b933      	cbnz	r3, 8005d3c <_free_r+0x30>
 8005d2e:	6063      	str	r3, [r4, #4]
 8005d30:	6014      	str	r4, [r2, #0]
 8005d32:	b003      	add	sp, #12
 8005d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d38:	f7ff bf88 	b.w	8005c4c <__malloc_unlock>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d908      	bls.n	8005d52 <_free_r+0x46>
 8005d40:	6825      	ldr	r5, [r4, #0]
 8005d42:	1961      	adds	r1, r4, r5
 8005d44:	428b      	cmp	r3, r1
 8005d46:	bf01      	itttt	eq
 8005d48:	6819      	ldreq	r1, [r3, #0]
 8005d4a:	685b      	ldreq	r3, [r3, #4]
 8005d4c:	1949      	addeq	r1, r1, r5
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	e7ed      	b.n	8005d2e <_free_r+0x22>
 8005d52:	461a      	mov	r2, r3
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b10b      	cbz	r3, 8005d5c <_free_r+0x50>
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	d9fa      	bls.n	8005d52 <_free_r+0x46>
 8005d5c:	6811      	ldr	r1, [r2, #0]
 8005d5e:	1855      	adds	r5, r2, r1
 8005d60:	42a5      	cmp	r5, r4
 8005d62:	d10b      	bne.n	8005d7c <_free_r+0x70>
 8005d64:	6824      	ldr	r4, [r4, #0]
 8005d66:	4421      	add	r1, r4
 8005d68:	1854      	adds	r4, r2, r1
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	6011      	str	r1, [r2, #0]
 8005d6e:	d1e0      	bne.n	8005d32 <_free_r+0x26>
 8005d70:	681c      	ldr	r4, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	6053      	str	r3, [r2, #4]
 8005d76:	440c      	add	r4, r1
 8005d78:	6014      	str	r4, [r2, #0]
 8005d7a:	e7da      	b.n	8005d32 <_free_r+0x26>
 8005d7c:	d902      	bls.n	8005d84 <_free_r+0x78>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	6003      	str	r3, [r0, #0]
 8005d82:	e7d6      	b.n	8005d32 <_free_r+0x26>
 8005d84:	6825      	ldr	r5, [r4, #0]
 8005d86:	1961      	adds	r1, r4, r5
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	bf04      	itt	eq
 8005d8c:	6819      	ldreq	r1, [r3, #0]
 8005d8e:	685b      	ldreq	r3, [r3, #4]
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	bf04      	itt	eq
 8005d94:	1949      	addeq	r1, r1, r5
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	6054      	str	r4, [r2, #4]
 8005d9a:	e7ca      	b.n	8005d32 <_free_r+0x26>
 8005d9c:	b003      	add	sp, #12
 8005d9e:	bd30      	pop	{r4, r5, pc}
 8005da0:	20004774 	.word	0x20004774

08005da4 <_malloc_usable_size_r>:
 8005da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da8:	1f18      	subs	r0, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfbc      	itt	lt
 8005dae:	580b      	ldrlt	r3, [r1, r0]
 8005db0:	18c0      	addlt	r0, r0, r3
 8005db2:	4770      	bx	lr

08005db4 <_init>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_fini>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr
